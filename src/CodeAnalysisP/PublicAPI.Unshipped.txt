*REMOVED*Microsoft.CodeAnalysisP.Operations.IEventAssignmentOperation.EventReference.get -> Microsoft.CodeAnalysisP.Operations.IEventReferenceOperation
*REMOVED*Microsoft.CodeAnalysisP.SpecialType.Count = 43 -> Microsoft.CodeAnalysisP.SpecialType
Microsoft.CodeAnalysisP.IArrayTypeSymbol.ElementNullableAnnotation.get -> Microsoft.CodeAnalysisP.NullableAnnotation
Microsoft.CodeAnalysisP.IDiscardSymbol.NullableAnnotation.get -> Microsoft.CodeAnalysisP.NullableAnnotation
Microsoft.CodeAnalysisP.IEventSymbol.NullableAnnotation.get -> Microsoft.CodeAnalysisP.NullableAnnotation
Microsoft.CodeAnalysisP.IFieldSymbol.NullableAnnotation.get -> Microsoft.CodeAnalysisP.NullableAnnotation
Microsoft.CodeAnalysisP.ILocalSymbol.NullableAnnotation.get -> Microsoft.CodeAnalysisP.NullableAnnotation
Microsoft.CodeAnalysisP.IMethodSymbol.ReceiverNullableAnnotation.get -> Microsoft.CodeAnalysisP.NullableAnnotation
Microsoft.CodeAnalysisP.IMethodSymbol.ReturnNullableAnnotation.get -> Microsoft.CodeAnalysisP.NullableAnnotation
Microsoft.CodeAnalysisP.IMethodSymbol.TypeArgumentsNullableAnnotations.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.NullableAnnotation>
Microsoft.CodeAnalysisP.INamedTypeSymbol.TypeArgumentsNullableAnnotations.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.NullableAnnotation>
Microsoft.CodeAnalysisP.IParameterSymbol.NullableAnnotation.get -> Microsoft.CodeAnalysisP.NullableAnnotation
Microsoft.CodeAnalysisP.IPropertySymbol.NullableAnnotation.get -> Microsoft.CodeAnalysisP.NullableAnnotation
Microsoft.CodeAnalysisP.ITypeParameterSymbol.ConstraintNullableAnnotations.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.NullableAnnotation>
Microsoft.CodeAnalysisP.ITypeParameterSymbol.ReferenceTypeConstraintNullableAnnotation.get -> Microsoft.CodeAnalysisP.NullableAnnotation
Microsoft.CodeAnalysisP.ITypeSymbol.ToDisplayParts(Microsoft.CodeAnalysisP.NullableFlowState topLevelNullability, Microsoft.CodeAnalysisP.SymbolDisplayFormat format = null) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.SymbolDisplayPart>
Microsoft.CodeAnalysisP.ITypeSymbol.ToDisplayString(Microsoft.CodeAnalysisP.NullableFlowState topLevelNullability, Microsoft.CodeAnalysisP.SymbolDisplayFormat format = null) -> string
Microsoft.CodeAnalysisP.ITypeSymbol.ToMinimalDisplayParts(Microsoft.CodeAnalysisP.SemanticModel semanticModel, Microsoft.CodeAnalysisP.NullableFlowState topLevelNullability, int position, Microsoft.CodeAnalysisP.SymbolDisplayFormat format = null) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.SymbolDisplayPart>
Microsoft.CodeAnalysisP.ITypeSymbol.ToMinimalDisplayString(Microsoft.CodeAnalysisP.SemanticModel semanticModel, Microsoft.CodeAnalysisP.NullableFlowState topLevelNullability, int position, Microsoft.CodeAnalysisP.SymbolDisplayFormat format = null) -> string
Microsoft.CodeAnalysisP.NullabilityInfo
Microsoft.CodeAnalysisP.NullabilityInfo.Annotation.get -> Microsoft.CodeAnalysisP.NullableAnnotation
Microsoft.CodeAnalysisP.NullabilityInfo.Equals(Microsoft.CodeAnalysisP.NullabilityInfo other) -> bool
Microsoft.CodeAnalysisP.NullabilityInfo.FlowState.get -> Microsoft.CodeAnalysisP.NullableFlowState
Microsoft.CodeAnalysisP.NullableAnnotation
Microsoft.CodeAnalysisP.NullableAnnotation.Annotated = 3 -> Microsoft.CodeAnalysisP.NullableAnnotation
Microsoft.CodeAnalysisP.NullableAnnotation.Disabled = 1 -> Microsoft.CodeAnalysisP.NullableAnnotation
Microsoft.CodeAnalysisP.NullableAnnotation.NotAnnotated = 2 -> Microsoft.CodeAnalysisP.NullableAnnotation
Microsoft.CodeAnalysisP.NullableAnnotation.NotApplicable = 0 -> Microsoft.CodeAnalysisP.NullableAnnotation
Microsoft.CodeAnalysisP.NullableFlowState
Microsoft.CodeAnalysisP.NullableFlowState.MaybeNull = 2 -> Microsoft.CodeAnalysisP.NullableFlowState
Microsoft.CodeAnalysisP.NullableFlowState.NotApplicable = 0 -> Microsoft.CodeAnalysisP.NullableFlowState
Microsoft.CodeAnalysisP.NullableFlowState.NotNull = 1 -> Microsoft.CodeAnalysisP.NullableFlowState
Microsoft.CodeAnalysisP.TypeInfo.ConvertedNullability.get -> Microsoft.CodeAnalysisP.NullabilityInfo
Microsoft.CodeAnalysisP.TypeInfo.Nullability.get -> Microsoft.CodeAnalysisP.NullabilityInfo
abstract Microsoft.CodeAnalysisP.Compilation.ClassifyCommonConversion(Microsoft.CodeAnalysisP.ITypeSymbol source, Microsoft.CodeAnalysisP.ITypeSymbol destination) -> Microsoft.CodeAnalysisP.Operations.CommonConversion
abstract Microsoft.CodeAnalysisP.Compilation.ContainsSymbolsWithName(string name, Microsoft.CodeAnalysisP.SymbolFilter filter = Microsoft.CodeAnalysisP.SymbolFilter.TypeAndMember, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> bool
abstract Microsoft.CodeAnalysisP.Compilation.GetSymbolsWithName(string name, Microsoft.CodeAnalysisP.SymbolFilter filter = Microsoft.CodeAnalysisP.SymbolFilter.TypeAndMember, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.ISymbol>
abstract Microsoft.CodeAnalysisP.Diagnostics.AnalyzerConfigOptions.TryGetValue(string key, out string value) -> bool
abstract Microsoft.CodeAnalysisP.Diagnostics.AnalyzerConfigOptionsProvider.GetOptions(Microsoft.CodeAnalysisP.AdditionalText textFile) -> Microsoft.CodeAnalysisP.Diagnostics.AnalyzerConfigOptions
abstract Microsoft.CodeAnalysisP.Diagnostics.AnalyzerConfigOptionsProvider.GetOptions(Microsoft.CodeAnalysisP.SyntaxTree tree) -> Microsoft.CodeAnalysisP.Diagnostics.AnalyzerConfigOptions
abstract Microsoft.CodeAnalysisP.Diagnostics.SymbolStartAnalysisContext.RegisterCodeBlockAction(System.Action<Microsoft.CodeAnalysisP.Diagnostics.CodeBlockAnalysisContext> action) -> void
abstract Microsoft.CodeAnalysisP.Diagnostics.SymbolStartAnalysisContext.RegisterCodeBlockStartAction<TLanguageKindEnum>(System.Action<Microsoft.CodeAnalysisP.Diagnostics.CodeBlockStartAnalysisContext<TLanguageKindEnum>> action) -> void
abstract Microsoft.CodeAnalysisP.Diagnostics.SymbolStartAnalysisContext.RegisterOperationAction(System.Action<Microsoft.CodeAnalysisP.Diagnostics.OperationAnalysisContext> action, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.OperationKind> operationKinds) -> void
abstract Microsoft.CodeAnalysisP.Diagnostics.SymbolStartAnalysisContext.RegisterOperationBlockAction(System.Action<Microsoft.CodeAnalysisP.Diagnostics.OperationBlockAnalysisContext> action) -> void
abstract Microsoft.CodeAnalysisP.Diagnostics.SymbolStartAnalysisContext.RegisterOperationBlockStartAction(System.Action<Microsoft.CodeAnalysisP.Diagnostics.OperationBlockStartAnalysisContext> action) -> void
abstract Microsoft.CodeAnalysisP.Diagnostics.SymbolStartAnalysisContext.RegisterSymbolEndAction(System.Action<Microsoft.CodeAnalysisP.Diagnostics.SymbolAnalysisContext> action) -> void
abstract Microsoft.CodeAnalysisP.Diagnostics.SymbolStartAnalysisContext.RegisterSyntaxNodeAction<TLanguageKindEnum>(System.Action<Microsoft.CodeAnalysisP.Diagnostics.SyntaxNodeAnalysisContext> action, System.Collections.Immutable.ImmutableArray<TLanguageKindEnum> syntaxKinds) -> void
const Microsoft.CodeAnalysisP.WellKnownMemberNames.CountPropertyName = "Count" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.DisposeAsyncMethodName = "DisposeAsync" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.DisposeMethodName = "Dispose" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.GetAsyncEnumeratorMethodName = "GetAsyncEnumerator" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.LengthPropertyName = "Length" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.MoveNextAsyncMethodName = "MoveNextAsync" -> string
Microsoft.CodeAnalysisP.AnalyzerConfig
Microsoft.CodeAnalysisP.AnalyzerConfig.GlobalSection.get -> Microsoft.CodeAnalysisP.AnalyzerConfig.Section
Microsoft.CodeAnalysisP.AnalyzerConfig.IsRoot.get -> bool
Microsoft.CodeAnalysisP.AnalyzerConfig.NamedSections.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.AnalyzerConfig.Section>
Microsoft.CodeAnalysisP.AnalyzerConfig.NormalizedDirectory.get -> string
Microsoft.CodeAnalysisP.AnalyzerConfig.PathToFile.get -> string
Microsoft.CodeAnalysisP.AnalyzerConfig.Section
Microsoft.CodeAnalysisP.AnalyzerConfig.Section.Name.get -> string
Microsoft.CodeAnalysisP.AnalyzerConfig.Section.Properties.get -> System.Collections.Immutable.ImmutableDictionary<string, string>
Microsoft.CodeAnalysisP.AnalyzerConfig.Section.Section(string name, System.Collections.Immutable.ImmutableDictionary<string, string> properties) -> void
Microsoft.CodeAnalysisP.AnalyzerConfig.SectionNameMatcher
Microsoft.CodeAnalysisP.AnalyzerConfig.SectionNameMatcher.IsMatch(string s) -> bool
Microsoft.CodeAnalysisP.AnalyzerConfigOptionsResult
Microsoft.CodeAnalysisP.AnalyzerConfigOptionsResult.AnalyzerOptions.get -> System.Collections.Immutable.ImmutableDictionary<string, string>
Microsoft.CodeAnalysisP.AnalyzerConfigOptionsResult.Diagnostics.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Diagnostic>
Microsoft.CodeAnalysisP.AnalyzerConfigOptionsResult.TreeOptions.get -> System.Collections.Immutable.ImmutableDictionary<string, Microsoft.CodeAnalysisP.ReportDiagnostic>
Microsoft.CodeAnalysisP.AnalyzerConfigSet
Microsoft.CodeAnalysisP.AnalyzerConfigSet.GetOptionsForSourcePath(string sourcePath) -> Microsoft.CodeAnalysisP.AnalyzerConfigOptionsResult
Microsoft.CodeAnalysisP.CommandLineArguments.AnalyzerConfigPaths.get -> System.Collections.Immutable.ImmutableArray<string>
Microsoft.CodeAnalysisP.Compilation.HasImplicitConversion(Microsoft.CodeAnalysisP.ITypeSymbol fromType, Microsoft.CodeAnalysisP.ITypeSymbol toType) -> bool
Microsoft.CodeAnalysisP.Compilation.IsSymbolAccessibleWithin(Microsoft.CodeAnalysisP.ISymbol symbol, Microsoft.CodeAnalysisP.ISymbol within, Microsoft.CodeAnalysisP.ITypeSymbol throughType = null) -> bool
Microsoft.CodeAnalysisP.Diagnostics.AnalyzerConfigOptions
Microsoft.CodeAnalysisP.Diagnostics.AnalyzerConfigOptions.AnalyzerConfigOptions() -> void
Microsoft.CodeAnalysisP.Diagnostics.AnalyzerConfigOptionsProvider
Microsoft.CodeAnalysisP.Diagnostics.AnalyzerConfigOptionsProvider.AnalyzerConfigOptionsProvider() -> void
Microsoft.CodeAnalysisP.Diagnostics.AnalyzerOptions.AnalyzerConfigOptionsProvider.get -> Microsoft.CodeAnalysisP.Diagnostics.AnalyzerConfigOptionsProvider
Microsoft.CodeAnalysisP.Diagnostics.AnalyzerOptions.AnalyzerOptions(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.AdditionalText> additionalFiles, Microsoft.CodeAnalysisP.Diagnostics.AnalyzerConfigOptionsProvider optionsProvider) -> void
Microsoft.CodeAnalysisP.Diagnostics.OperationAnalysisContext.GetControlFlowGraph() -> Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowGraph
Microsoft.CodeAnalysisP.Diagnostics.OperationBlockAnalysisContext.GetControlFlowGraph(Microsoft.CodeAnalysisP.IOperation operationBlock) -> Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowGraph
Microsoft.CodeAnalysisP.Diagnostics.OperationBlockStartAnalysisContext.GetControlFlowGraph(Microsoft.CodeAnalysisP.IOperation operationBlock) -> Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowGraph
Microsoft.CodeAnalysisP.Diagnostics.SymbolStartAnalysisContext
Microsoft.CodeAnalysisP.Diagnostics.SymbolStartAnalysisContext.CancellationToken.get -> System.Threading.CancellationToken
Microsoft.CodeAnalysisP.Diagnostics.SymbolStartAnalysisContext.Compilation.get -> Microsoft.CodeAnalysisP.Compilation
Microsoft.CodeAnalysisP.Diagnostics.SymbolStartAnalysisContext.Options.get -> Microsoft.CodeAnalysisP.Diagnostics.AnalyzerOptions
Microsoft.CodeAnalysisP.Diagnostics.SymbolStartAnalysisContext.RegisterOperationAction(System.Action<Microsoft.CodeAnalysisP.Diagnostics.OperationAnalysisContext> action, params Microsoft.CodeAnalysisP.OperationKind[] operationKinds) -> void
Microsoft.CodeAnalysisP.Diagnostics.SymbolStartAnalysisContext.RegisterSyntaxNodeAction<TLanguageKindEnum>(System.Action<Microsoft.CodeAnalysisP.Diagnostics.SyntaxNodeAnalysisContext> action, params TLanguageKindEnum[] syntaxKinds) -> void
Microsoft.CodeAnalysisP.Diagnostics.SymbolStartAnalysisContext.Symbol.get -> Microsoft.CodeAnalysisP.ISymbol
Microsoft.CodeAnalysisP.Diagnostics.SymbolStartAnalysisContext.SymbolStartAnalysisContext(Microsoft.CodeAnalysisP.ISymbol symbol, Microsoft.CodeAnalysisP.Compilation compilation, Microsoft.CodeAnalysisP.Diagnostics.AnalyzerOptions options, System.Threading.CancellationToken cancellationToken) -> void
Microsoft.CodeAnalysisP.Diagnostics.Telemetry.AnalyzerTelemetryInfo.Concurrent.get -> bool
Microsoft.CodeAnalysisP.Diagnostics.Telemetry.AnalyzerTelemetryInfo.Concurrent.set -> void
Microsoft.CodeAnalysisP.Diagnostics.Telemetry.AnalyzerTelemetryInfo.SymbolEndActionsCount.get -> int
Microsoft.CodeAnalysisP.Diagnostics.Telemetry.AnalyzerTelemetryInfo.SymbolEndActionsCount.set -> void
Microsoft.CodeAnalysisP.Diagnostics.Telemetry.AnalyzerTelemetryInfo.SymbolStartActionsCount.get -> int
Microsoft.CodeAnalysisP.Diagnostics.Telemetry.AnalyzerTelemetryInfo.SymbolStartActionsCount.set -> void
Microsoft.CodeAnalysisP.FlowAnalysis.BasicBlock
Microsoft.CodeAnalysisP.FlowAnalysis.BasicBlock.BranchValue.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.FlowAnalysis.BasicBlock.ConditionalSuccessor.get -> Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowBranch
Microsoft.CodeAnalysisP.FlowAnalysis.BasicBlock.ConditionKind.get -> Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowConditionKind
Microsoft.CodeAnalysisP.FlowAnalysis.BasicBlock.EnclosingRegion.get -> Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowRegion
Microsoft.CodeAnalysisP.FlowAnalysis.BasicBlock.FallThroughSuccessor.get -> Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowBranch
Microsoft.CodeAnalysisP.FlowAnalysis.BasicBlock.IsReachable.get -> bool
Microsoft.CodeAnalysisP.FlowAnalysis.BasicBlock.Kind.get -> Microsoft.CodeAnalysisP.FlowAnalysis.BasicBlockKind
Microsoft.CodeAnalysisP.FlowAnalysis.BasicBlock.Operations.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.IOperation>
Microsoft.CodeAnalysisP.FlowAnalysis.BasicBlock.Ordinal.get -> int
Microsoft.CodeAnalysisP.FlowAnalysis.BasicBlock.Predecessors.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowBranch>
Microsoft.CodeAnalysisP.FlowAnalysis.BasicBlockKind
Microsoft.CodeAnalysisP.FlowAnalysis.BasicBlockKind.Block = 2 -> Microsoft.CodeAnalysisP.FlowAnalysis.BasicBlockKind
Microsoft.CodeAnalysisP.FlowAnalysis.BasicBlockKind.Entry = 0 -> Microsoft.CodeAnalysisP.FlowAnalysis.BasicBlockKind
Microsoft.CodeAnalysisP.FlowAnalysis.BasicBlockKind.Exit = 1 -> Microsoft.CodeAnalysisP.FlowAnalysis.BasicBlockKind
Microsoft.CodeAnalysisP.FlowAnalysis.CaptureId
Microsoft.CodeAnalysisP.FlowAnalysis.CaptureId.Equals(Microsoft.CodeAnalysisP.FlowAnalysis.CaptureId other) -> bool
Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowBranch
Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowBranch.Destination.get -> Microsoft.CodeAnalysisP.FlowAnalysis.BasicBlock
Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowBranch.EnteringRegions.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowRegion>
Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowBranch.FinallyRegions.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowRegion>
Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowBranch.IsConditionalSuccessor.get -> bool
Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowBranch.LeavingRegions.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowRegion>
Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowBranch.Semantics.get -> Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowBranchSemantics
Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowBranch.Source.get -> Microsoft.CodeAnalysisP.FlowAnalysis.BasicBlock
Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowBranchSemantics
Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowBranchSemantics.Error = 7 -> Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowBranchSemantics
Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowBranchSemantics.None = 0 -> Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowBranchSemantics
Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowBranchSemantics.ProgramTermination = 4 -> Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowBranchSemantics
Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowBranchSemantics.Regular = 1 -> Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowBranchSemantics
Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowBranchSemantics.Rethrow = 6 -> Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowBranchSemantics
Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowBranchSemantics.Return = 2 -> Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowBranchSemantics
Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowBranchSemantics.StructuredExceptionHandling = 3 -> Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowBranchSemantics
Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowBranchSemantics.Throw = 5 -> Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowBranchSemantics
Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowConditionKind
Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowConditionKind.None = 0 -> Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowConditionKind
Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowConditionKind.WhenFalse = 1 -> Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowConditionKind
Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowConditionKind.WhenTrue = 2 -> Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowConditionKind
Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowGraph
Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowGraph.Blocks.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.FlowAnalysis.BasicBlock>
Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowGraph.GetAnonymousFunctionControlFlowGraph(Microsoft.CodeAnalysisP.FlowAnalysis.IFlowAnonymousFunctionOperation anonymousFunction, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowGraph
Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowGraph.GetLocalFunctionControlFlowGraph(Microsoft.CodeAnalysisP.IMethodSymbol localFunction, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowGraph
Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowGraph.LocalFunctions.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.IMethodSymbol>
Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowGraph.OriginalOperation.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowGraph.Parent.get -> Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowGraph
Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowGraph.Root.get -> Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowRegion
Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowGraphExtensions
Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowRegion
Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowRegion.CaptureIds.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.FlowAnalysis.CaptureId>
Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowRegion.EnclosingRegion.get -> Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowRegion
Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowRegion.ExceptionType.get -> Microsoft.CodeAnalysisP.ITypeSymbol
Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowRegion.FirstBlockOrdinal.get -> int
Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowRegion.Kind.get -> Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowRegionKind
Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowRegion.LastBlockOrdinal.get -> int
Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowRegion.LocalFunctions.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.IMethodSymbol>
Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowRegion.Locals.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ILocalSymbol>
Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowRegion.NestedRegions.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowRegion>
Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowRegionKind
Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowRegionKind.Catch = 4 -> Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowRegionKind
Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowRegionKind.ErroneousBody = 10 -> Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowRegionKind
Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowRegionKind.Filter = 3 -> Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowRegionKind
Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowRegionKind.FilterAndHandler = 5 -> Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowRegionKind
Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowRegionKind.Finally = 7 -> Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowRegionKind
Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowRegionKind.LocalLifetime = 1 -> Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowRegionKind
Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowRegionKind.Root = 0 -> Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowRegionKind
Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowRegionKind.StaticLocalInitializer = 9 -> Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowRegionKind
Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowRegionKind.Try = 2 -> Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowRegionKind
Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowRegionKind.TryAndCatch = 6 -> Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowRegionKind
Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowRegionKind.TryAndFinally = 8 -> Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowRegionKind
Microsoft.CodeAnalysisP.FlowAnalysis.ICaughtExceptionOperation
Microsoft.CodeAnalysisP.FlowAnalysis.IFlowAnonymousFunctionOperation
Microsoft.CodeAnalysisP.FlowAnalysis.IFlowAnonymousFunctionOperation.Symbol.get -> Microsoft.CodeAnalysisP.IMethodSymbol
Microsoft.CodeAnalysisP.FlowAnalysis.IFlowCaptureOperation
Microsoft.CodeAnalysisP.FlowAnalysis.IFlowCaptureOperation.Id.get -> Microsoft.CodeAnalysisP.FlowAnalysis.CaptureId
Microsoft.CodeAnalysisP.FlowAnalysis.IFlowCaptureOperation.Value.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.FlowAnalysis.IFlowCaptureReferenceOperation
Microsoft.CodeAnalysisP.FlowAnalysis.IFlowCaptureReferenceOperation.Id.get -> Microsoft.CodeAnalysisP.FlowAnalysis.CaptureId
Microsoft.CodeAnalysisP.FlowAnalysis.IIsNullOperation
Microsoft.CodeAnalysisP.FlowAnalysis.IIsNullOperation.Operand.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.FlowAnalysis.IStaticLocalInitializationSemaphoreOperation
Microsoft.CodeAnalysisP.FlowAnalysis.IStaticLocalInitializationSemaphoreOperation.Local.get -> Microsoft.CodeAnalysisP.ILocalSymbol
Microsoft.CodeAnalysisP.IFieldSymbol.IsFixedSizeBuffer.get -> bool
Microsoft.CodeAnalysisP.ILocalSymbol.IsFixed.get -> bool
Microsoft.CodeAnalysisP.IMethodSymbol.IsReadOnly.get -> bool
Microsoft.CodeAnalysisP.IOperation.SemanticModel.get -> Microsoft.CodeAnalysisP.SemanticModel
Microsoft.CodeAnalysisP.ITypeSymbol.IsReadOnly.get -> bool
Microsoft.CodeAnalysisP.ITypeSymbol.IsRefLikeType.get -> bool
Microsoft.CodeAnalysisP.ITypeSymbol.IsUnmanagedType.get -> bool
Microsoft.CodeAnalysisP.OperationKind.Binary = 32 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.CaughtException = 94 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.CoalesceAssignment = 97 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.ConstructorBody = 89 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.DiscardPattern = 104 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.FlowAnonymousFunction = 96 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.FlowCapture = 91 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.FlowCaptureReference = 92 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.IsNull = 93 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.MethodBody = 88 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.Range = 99 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.RecursivePattern = 103 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.ReDim = 101 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.ReDimClause = 102 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.StaticLocalInitializationSemaphore = 95 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.SwitchExpression = 105 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.SwitchExpressionArm = 106 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.TupleBinary = 87 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.Unary = 31 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.Operations.CommonConversion.IsImplicit.get -> bool
Microsoft.CodeAnalysisP.Operations.ICaseClauseOperation.Label.get -> Microsoft.CodeAnalysisP.ILabelSymbol
Microsoft.CodeAnalysisP.Operations.ICoalesceAssignmentOperation
Microsoft.CodeAnalysisP.Operations.ICoalesceOperation.ValueConversion.get -> Microsoft.CodeAnalysisP.Operations.CommonConversion
Microsoft.CodeAnalysisP.Operations.IDeclarationPatternOperation.MatchedType.get -> Microsoft.CodeAnalysisP.ITypeSymbol
Microsoft.CodeAnalysisP.Operations.IDeclarationPatternOperation.MatchesNull.get -> bool
Microsoft.CodeAnalysisP.Operations.IDiscardPatternOperation
Microsoft.CodeAnalysisP.Operations.IEventAssignmentOperation.EventReference.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IForLoopOperation.ConditionLocals.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ILocalSymbol>
Microsoft.CodeAnalysisP.Operations.IForToLoopOperation.IsChecked.get -> bool
Microsoft.CodeAnalysisP.Operations.IInstanceReferenceOperation.ReferenceKind.get -> Microsoft.CodeAnalysisP.Operations.InstanceReferenceKind
Microsoft.CodeAnalysisP.Operations.ILoopOperation.ContinueLabel.get -> Microsoft.CodeAnalysisP.ILabelSymbol
Microsoft.CodeAnalysisP.Operations.ILoopOperation.ExitLabel.get -> Microsoft.CodeAnalysisP.ILabelSymbol
Microsoft.CodeAnalysisP.Operations.InstanceReferenceKind
Microsoft.CodeAnalysisP.Operations.InstanceReferenceKind.ContainingTypeInstance = 0 -> Microsoft.CodeAnalysisP.Operations.InstanceReferenceKind
Microsoft.CodeAnalysisP.Operations.InstanceReferenceKind.ImplicitReceiver = 1 -> Microsoft.CodeAnalysisP.Operations.InstanceReferenceKind
Microsoft.CodeAnalysisP.Operations.InstanceReferenceKind.PatternInput = 2 -> Microsoft.CodeAnalysisP.Operations.InstanceReferenceKind
Microsoft.CodeAnalysisP.Operations.IPatternOperation.InputType.get -> Microsoft.CodeAnalysisP.ITypeSymbol
Microsoft.CodeAnalysisP.Operations.IRangeOperation
Microsoft.CodeAnalysisP.Operations.IRangeOperation.IsLifted.get -> bool
Microsoft.CodeAnalysisP.Operations.IRangeOperation.LeftOperand.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IRangeOperation.Method.get -> Microsoft.CodeAnalysisP.IMethodSymbol
Microsoft.CodeAnalysisP.Operations.IRangeOperation.RightOperand.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IReDimClauseOperation
Microsoft.CodeAnalysisP.Operations.IReDimClauseOperation.DimensionSizes.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.IOperation>
Microsoft.CodeAnalysisP.Operations.IReDimClauseOperation.Operand.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IReDimOperation
Microsoft.CodeAnalysisP.Operations.IReDimOperation.Clauses.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Operations.IReDimClauseOperation>
Microsoft.CodeAnalysisP.Operations.IReDimOperation.Preserve.get -> bool
Microsoft.CodeAnalysisP.Operations.ISwitchCaseOperation.Locals.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ILocalSymbol>
Microsoft.CodeAnalysisP.Operations.ISwitchExpressionArmOperation
Microsoft.CodeAnalysisP.Operations.ISwitchExpressionArmOperation.Guard.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.ISwitchExpressionArmOperation.Locals.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ILocalSymbol>
Microsoft.CodeAnalysisP.Operations.ISwitchExpressionArmOperation.Pattern.get -> Microsoft.CodeAnalysisP.Operations.IPatternOperation
Microsoft.CodeAnalysisP.Operations.ISwitchExpressionArmOperation.Value.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.ISwitchExpressionOperation
Microsoft.CodeAnalysisP.Operations.ISwitchExpressionOperation.Arms.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Operations.ISwitchExpressionArmOperation>
Microsoft.CodeAnalysisP.Operations.ISwitchExpressionOperation.Value.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.ISwitchOperation.ExitLabel.get -> Microsoft.CodeAnalysisP.ILabelSymbol
Microsoft.CodeAnalysisP.Operations.ISwitchOperation.Locals.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ILocalSymbol>
Microsoft.CodeAnalysisP.Operations.ITryOperation.ExitLabel.get -> Microsoft.CodeAnalysisP.ILabelSymbol
Microsoft.CodeAnalysisP.Operations.IUsingOperation.Locals.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ILocalSymbol>
Microsoft.CodeAnalysisP.Operations.IVariableDeclarationOperation.IgnoredDimensions.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.IOperation>
Microsoft.CodeAnalysisP.Operations.UnaryOperatorKind.Hat = 7 -> Microsoft.CodeAnalysisP.Operations.UnaryOperatorKind
Microsoft.CodeAnalysisP.SpecialType.Count = 44 -> Microsoft.CodeAnalysisP.SpecialType
Microsoft.CodeAnalysisP.SpecialType.System_Runtime_CompilerServices_RuntimeFeature = 44 -> Microsoft.CodeAnalysisP.SpecialType
Microsoft.CodeAnalysisP.SymbolDisplayMiscellaneousOptions.AllowDefaultLiteral = 128 -> Microsoft.CodeAnalysisP.SymbolDisplayMiscellaneousOptions
Microsoft.CodeAnalysisP.SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier = 64 -> Microsoft.CodeAnalysisP.SymbolDisplayMiscellaneousOptions
Microsoft.CodeAnalysisP.SymbolDisplayPartKind.ConstantName = 30 -> Microsoft.CodeAnalysisP.SymbolDisplayPartKind
Microsoft.CodeAnalysisP.SymbolDisplayPartKind.EnumMemberName = 28 -> Microsoft.CodeAnalysisP.SymbolDisplayPartKind
Microsoft.CodeAnalysisP.SymbolDisplayPartKind.ExtensionMethodName = 29 -> Microsoft.CodeAnalysisP.SymbolDisplayPartKind
const Microsoft.CodeAnalysisP.WellKnownMemberNames.SliceMethodName = "Slice" -> string
override Microsoft.CodeAnalysisP.FlowAnalysis.CaptureId.Equals(object obj) -> bool
override Microsoft.CodeAnalysisP.FlowAnalysis.CaptureId.GetHashCode() -> int
static Microsoft.CodeAnalysisP.AnalyzerConfig.Parse(Microsoft.CodeAnalysisP.Text.SourceText text, string pathToFile) -> Microsoft.CodeAnalysisP.AnalyzerConfig
static Microsoft.CodeAnalysisP.AnalyzerConfig.Parse(string text, string pathToFile) -> Microsoft.CodeAnalysisP.AnalyzerConfig
static Microsoft.CodeAnalysisP.AnalyzerConfig.ReservedKeys.get -> System.Collections.Immutable.ImmutableHashSet<string>
static Microsoft.CodeAnalysisP.AnalyzerConfig.ReservedValues.get -> System.Collections.Immutable.ImmutableHashSet<string>
static Microsoft.CodeAnalysisP.AnalyzerConfig.Section.NameComparer.get -> System.StringComparison
static Microsoft.CodeAnalysisP.AnalyzerConfig.Section.PropertiesKeyComparer.get -> System.StringComparer
static Microsoft.CodeAnalysisP.AnalyzerConfig.TryCreateSectionNameMatcher(string sectionName) -> Microsoft.CodeAnalysisP.AnalyzerConfig.SectionNameMatcher?
static Microsoft.CodeAnalysisP.AnalyzerConfigSet.Create<TList>(TList analyzerConfigs) -> Microsoft.CodeAnalysisP.AnalyzerConfigSet
static Microsoft.CodeAnalysisP.Diagnostics.AnalyzerConfigOptions.KeyComparer.get -> System.StringComparer
override Microsoft.CodeAnalysisP.NullabilityInfo.Equals(object other) -> bool
override Microsoft.CodeAnalysisP.NullabilityInfo.GetHashCode() -> int
static Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowGraph.Create(Microsoft.CodeAnalysisP.Operations.IBlockOperation body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowGraph
static Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowGraph.Create(Microsoft.CodeAnalysisP.Operations.IConstructorBodyOperation constructorBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowGraph
static Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowGraph.Create(Microsoft.CodeAnalysisP.Operations.IFieldInitializerOperation initializer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowGraph
static Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowGraph.Create(Microsoft.CodeAnalysisP.Operations.IMethodBodyOperation methodBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowGraph
static Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowGraph.Create(Microsoft.CodeAnalysisP.Operations.IParameterInitializerOperation initializer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowGraph
static Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowGraph.Create(Microsoft.CodeAnalysisP.Operations.IPropertyInitializerOperation initializer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowGraph
static Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowGraph.Create(Microsoft.CodeAnalysisP.SyntaxNode node, Microsoft.CodeAnalysisP.SemanticModel semanticModel, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowGraph
static Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowGraphExtensions.GetAnonymousFunctionControlFlowGraphInScope(this Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowGraph controlFlowGraph, Microsoft.CodeAnalysisP.FlowAnalysis.IFlowAnonymousFunctionOperation anonymousFunction, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowGraph
static Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowGraphExtensions.GetLocalFunctionControlFlowGraphInScope(this Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowGraph controlFlowGraph, Microsoft.CodeAnalysisP.IMethodSymbol localFunction, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysisP.FlowAnalysis.ControlFlowGraph
static Microsoft.CodeAnalysisP.Operations.OperationExtensions.GetCorrespondingOperation(this Microsoft.CodeAnalysisP.Operations.IBranchOperation operation) -> Microsoft.CodeAnalysisP.IOperation
static readonly Microsoft.CodeAnalysisP.SyntaxTree.EmptyDiagnosticOptions -> System.Collections.Immutable.ImmutableDictionary<string, Microsoft.CodeAnalysisP.ReportDiagnostic>
virtual Microsoft.CodeAnalysisP.Diagnostics.AnalysisContext.RegisterSymbolStartAction(System.Action<Microsoft.CodeAnalysisP.Diagnostics.SymbolStartAnalysisContext> action, Microsoft.CodeAnalysisP.SymbolKind symbolKind) -> void
virtual Microsoft.CodeAnalysisP.Diagnostics.CompilationStartAnalysisContext.RegisterSymbolStartAction(System.Action<Microsoft.CodeAnalysisP.Diagnostics.SymbolStartAnalysisContext> action, Microsoft.CodeAnalysisP.SymbolKind symbolKind) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitCaughtException(Microsoft.CodeAnalysisP.FlowAnalysis.ICaughtExceptionOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitCoalesceAssignment(Microsoft.CodeAnalysisP.Operations.ICoalesceAssignmentOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitDiscardPattern(Microsoft.CodeAnalysisP.Operations.IDiscardPatternOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitFlowAnonymousFunction(Microsoft.CodeAnalysisP.FlowAnalysis.IFlowAnonymousFunctionOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitFlowCapture(Microsoft.CodeAnalysisP.FlowAnalysis.IFlowCaptureOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitFlowCaptureReference(Microsoft.CodeAnalysisP.FlowAnalysis.IFlowCaptureReferenceOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitIsNull(Microsoft.CodeAnalysisP.FlowAnalysis.IIsNullOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitRangeOperation(Microsoft.CodeAnalysisP.Operations.IRangeOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitReDim(Microsoft.CodeAnalysisP.Operations.IReDimOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitReDimClause(Microsoft.CodeAnalysisP.Operations.IReDimClauseOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitStaticLocalInitializationSemaphore(Microsoft.CodeAnalysisP.FlowAnalysis.IStaticLocalInitializationSemaphoreOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitSwitchExpression(Microsoft.CodeAnalysisP.Operations.ISwitchExpressionOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitSwitchExpressionArm(Microsoft.CodeAnalysisP.Operations.ISwitchExpressionArmOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitCaughtException(Microsoft.CodeAnalysisP.FlowAnalysis.ICaughtExceptionOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitCoalesceAssignment(Microsoft.CodeAnalysisP.Operations.ICoalesceAssignmentOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitDiscardPattern(Microsoft.CodeAnalysisP.Operations.IDiscardPatternOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitFlowAnonymousFunction(Microsoft.CodeAnalysisP.FlowAnalysis.IFlowAnonymousFunctionOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitFlowCapture(Microsoft.CodeAnalysisP.FlowAnalysis.IFlowCaptureOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitFlowCaptureReference(Microsoft.CodeAnalysisP.FlowAnalysis.IFlowCaptureReferenceOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitIsNull(Microsoft.CodeAnalysisP.FlowAnalysis.IIsNullOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitRangeOperation(Microsoft.CodeAnalysisP.Operations.IRangeOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitReDim(Microsoft.CodeAnalysisP.Operations.IReDimOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitReDimClause(Microsoft.CodeAnalysisP.Operations.IReDimClauseOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitStaticLocalInitializationSemaphore(Microsoft.CodeAnalysisP.FlowAnalysis.IStaticLocalInitializationSemaphoreOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitSwitchExpression(Microsoft.CodeAnalysisP.Operations.ISwitchExpressionOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitSwitchExpressionArm(Microsoft.CodeAnalysisP.Operations.ISwitchExpressionArmOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.SyntaxTree.DiagnosticOptions.get -> System.Collections.Immutable.ImmutableDictionary<string, Microsoft.CodeAnalysisP.ReportDiagnostic>
virtual Microsoft.CodeAnalysisP.SyntaxTree.WithDiagnosticOptions(System.Collections.Immutable.ImmutableDictionary<string, Microsoft.CodeAnalysisP.ReportDiagnostic> options) -> Microsoft.CodeAnalysisP.SyntaxTree
