abstract Microsoft.CodeAnalysisP.AdditionalText.GetText(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysisP.Text.SourceText
abstract Microsoft.CodeAnalysisP.AdditionalText.Path.get -> string
abstract Microsoft.CodeAnalysisP.AttributeData.CommonApplicationSyntaxReference.get -> Microsoft.CodeAnalysisP.SyntaxReference
abstract Microsoft.CodeAnalysisP.AttributeData.CommonAttributeClass.get -> Microsoft.CodeAnalysisP.INamedTypeSymbol
abstract Microsoft.CodeAnalysisP.AttributeData.CommonAttributeConstructor.get -> Microsoft.CodeAnalysisP.IMethodSymbol
abstract Microsoft.CodeAnalysisP.AttributeData.CommonConstructorArguments.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.TypedConstant>
abstract Microsoft.CodeAnalysisP.AttributeData.CommonNamedArguments.get -> System.Collections.Immutable.ImmutableArray<System.Collections.Generic.KeyValuePair<string, Microsoft.CodeAnalysisP.TypedConstant>>
abstract Microsoft.CodeAnalysisP.Compilation.ContainsSymbolsWithName(System.Func<string, bool> predicate, Microsoft.CodeAnalysisP.SymbolFilter filter = Microsoft.CodeAnalysisP.SymbolFilter.TypeAndMember, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> bool
abstract Microsoft.CodeAnalysisP.Compilation.DirectiveReferences.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.MetadataReference>
abstract Microsoft.CodeAnalysisP.Compilation.GetDeclarationDiagnostics(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Diagnostic>
abstract Microsoft.CodeAnalysisP.Compilation.GetDiagnostics(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Diagnostic>
abstract Microsoft.CodeAnalysisP.Compilation.GetMethodBodyDiagnostics(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Diagnostic>
abstract Microsoft.CodeAnalysisP.Compilation.GetParseDiagnostics(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Diagnostic>
abstract Microsoft.CodeAnalysisP.Compilation.GetSymbolsWithName(System.Func<string, bool> predicate, Microsoft.CodeAnalysisP.SymbolFilter filter = Microsoft.CodeAnalysisP.SymbolFilter.TypeAndMember, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.ISymbol>
abstract Microsoft.CodeAnalysisP.Compilation.IsCaseSensitive.get -> bool
abstract Microsoft.CodeAnalysisP.Compilation.Language.get -> string
abstract Microsoft.CodeAnalysisP.Compilation.ReferencedAssemblyNames.get -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.AssemblyIdentity>
abstract Microsoft.CodeAnalysisP.Compilation.ToMetadataReference(System.Collections.Immutable.ImmutableArray<string> aliases = default(System.Collections.Immutable.ImmutableArray<string>), bool embedInteropTypes = false) -> Microsoft.CodeAnalysisP.CompilationReference
abstract Microsoft.CodeAnalysisP.CompilationOptions.Language.get -> string
abstract Microsoft.CodeAnalysisP.ControlFlowAnalysis.EndPointIsReachable.get -> bool
abstract Microsoft.CodeAnalysisP.ControlFlowAnalysis.EntryPoints.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.SyntaxNode>
abstract Microsoft.CodeAnalysisP.ControlFlowAnalysis.ExitPoints.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.SyntaxNode>
abstract Microsoft.CodeAnalysisP.ControlFlowAnalysis.ReturnStatements.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.SyntaxNode>
abstract Microsoft.CodeAnalysisP.ControlFlowAnalysis.StartPointIsReachable.get -> bool
abstract Microsoft.CodeAnalysisP.ControlFlowAnalysis.Succeeded.get -> bool
abstract Microsoft.CodeAnalysisP.CustomModifier.IsOptional.get -> bool
abstract Microsoft.CodeAnalysisP.CustomModifier.Modifier.get -> Microsoft.CodeAnalysisP.INamedTypeSymbol
abstract Microsoft.CodeAnalysisP.DataFlowAnalysis.AlwaysAssigned.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ISymbol>
abstract Microsoft.CodeAnalysisP.DataFlowAnalysis.Captured.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ISymbol>
abstract Microsoft.CodeAnalysisP.DataFlowAnalysis.CapturedInside.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ISymbol>
abstract Microsoft.CodeAnalysisP.DataFlowAnalysis.CapturedOutside.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ISymbol>
abstract Microsoft.CodeAnalysisP.DataFlowAnalysis.DataFlowsIn.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ISymbol>
abstract Microsoft.CodeAnalysisP.DataFlowAnalysis.DataFlowsOut.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ISymbol>
abstract Microsoft.CodeAnalysisP.DataFlowAnalysis.ReadInside.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ISymbol>
abstract Microsoft.CodeAnalysisP.DataFlowAnalysis.ReadOutside.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ISymbol>
abstract Microsoft.CodeAnalysisP.DataFlowAnalysis.Succeeded.get -> bool
abstract Microsoft.CodeAnalysisP.DataFlowAnalysis.UnsafeAddressTaken.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ISymbol>
abstract Microsoft.CodeAnalysisP.DataFlowAnalysis.VariablesDeclared.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ISymbol>
abstract Microsoft.CodeAnalysisP.DataFlowAnalysis.WrittenInside.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ISymbol>
abstract Microsoft.CodeAnalysisP.DataFlowAnalysis.WrittenOutside.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ISymbol>
abstract Microsoft.CodeAnalysisP.Diagnostic.AdditionalLocations.get -> System.Collections.Generic.IReadOnlyList<Microsoft.CodeAnalysisP.Location>
abstract Microsoft.CodeAnalysisP.Diagnostic.Descriptor.get -> Microsoft.CodeAnalysisP.DiagnosticDescriptor
abstract Microsoft.CodeAnalysisP.Diagnostic.Equals(Microsoft.CodeAnalysisP.Diagnostic obj) -> bool
abstract Microsoft.CodeAnalysisP.Diagnostic.GetMessage(System.IFormatProvider formatProvider = null) -> string
abstract Microsoft.CodeAnalysisP.Diagnostic.Id.get -> string
abstract Microsoft.CodeAnalysisP.Diagnostic.IsSuppressed.get -> bool
abstract Microsoft.CodeAnalysisP.Diagnostic.Location.get -> Microsoft.CodeAnalysisP.Location
abstract Microsoft.CodeAnalysisP.Diagnostic.Severity.get -> Microsoft.CodeAnalysisP.DiagnosticSeverity
abstract Microsoft.CodeAnalysisP.Diagnostic.WarningLevel.get -> int
abstract Microsoft.CodeAnalysisP.Diagnostics.AnalysisContext.RegisterCodeBlockAction(System.Action<Microsoft.CodeAnalysisP.Diagnostics.CodeBlockAnalysisContext> action) -> void
abstract Microsoft.CodeAnalysisP.Diagnostics.AnalysisContext.RegisterCodeBlockStartAction<TLanguageKindEnum>(System.Action<Microsoft.CodeAnalysisP.Diagnostics.CodeBlockStartAnalysisContext<TLanguageKindEnum>> action) -> void
abstract Microsoft.CodeAnalysisP.Diagnostics.AnalysisContext.RegisterCompilationAction(System.Action<Microsoft.CodeAnalysisP.Diagnostics.CompilationAnalysisContext> action) -> void
abstract Microsoft.CodeAnalysisP.Diagnostics.AnalysisContext.RegisterCompilationStartAction(System.Action<Microsoft.CodeAnalysisP.Diagnostics.CompilationStartAnalysisContext> action) -> void
abstract Microsoft.CodeAnalysisP.Diagnostics.AnalysisContext.RegisterSemanticModelAction(System.Action<Microsoft.CodeAnalysisP.Diagnostics.SemanticModelAnalysisContext> action) -> void
abstract Microsoft.CodeAnalysisP.Diagnostics.AnalysisContext.RegisterSymbolAction(System.Action<Microsoft.CodeAnalysisP.Diagnostics.SymbolAnalysisContext> action, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.SymbolKind> symbolKinds) -> void
abstract Microsoft.CodeAnalysisP.Diagnostics.AnalysisContext.RegisterSyntaxNodeAction<TLanguageKindEnum>(System.Action<Microsoft.CodeAnalysisP.Diagnostics.SyntaxNodeAnalysisContext> action, System.Collections.Immutable.ImmutableArray<TLanguageKindEnum> syntaxKinds) -> void
abstract Microsoft.CodeAnalysisP.Diagnostics.AnalysisContext.RegisterSyntaxTreeAction(System.Action<Microsoft.CodeAnalysisP.Diagnostics.SyntaxTreeAnalysisContext> action) -> void
abstract Microsoft.CodeAnalysisP.Diagnostics.AnalyzerReference.FullPath.get -> string
abstract Microsoft.CodeAnalysisP.Diagnostics.AnalyzerReference.GetAnalyzers(string language) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Diagnostics.DiagnosticAnalyzer>
abstract Microsoft.CodeAnalysisP.Diagnostics.AnalyzerReference.GetAnalyzersForAllLanguages() -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Diagnostics.DiagnosticAnalyzer>
abstract Microsoft.CodeAnalysisP.Diagnostics.AnalyzerReference.Id.get -> object
abstract Microsoft.CodeAnalysisP.Diagnostics.CodeBlockStartAnalysisContext<TLanguageKindEnum>.RegisterCodeBlockEndAction(System.Action<Microsoft.CodeAnalysisP.Diagnostics.CodeBlockAnalysisContext> action) -> void
abstract Microsoft.CodeAnalysisP.Diagnostics.CodeBlockStartAnalysisContext<TLanguageKindEnum>.RegisterSyntaxNodeAction(System.Action<Microsoft.CodeAnalysisP.Diagnostics.SyntaxNodeAnalysisContext> action, System.Collections.Immutable.ImmutableArray<TLanguageKindEnum> syntaxKinds) -> void
abstract Microsoft.CodeAnalysisP.Diagnostics.CompilationStartAnalysisContext.RegisterCodeBlockAction(System.Action<Microsoft.CodeAnalysisP.Diagnostics.CodeBlockAnalysisContext> action) -> void
abstract Microsoft.CodeAnalysisP.Diagnostics.CompilationStartAnalysisContext.RegisterCodeBlockStartAction<TLanguageKindEnum>(System.Action<Microsoft.CodeAnalysisP.Diagnostics.CodeBlockStartAnalysisContext<TLanguageKindEnum>> action) -> void
abstract Microsoft.CodeAnalysisP.Diagnostics.CompilationStartAnalysisContext.RegisterCompilationEndAction(System.Action<Microsoft.CodeAnalysisP.Diagnostics.CompilationAnalysisContext> action) -> void
abstract Microsoft.CodeAnalysisP.Diagnostics.CompilationStartAnalysisContext.RegisterSemanticModelAction(System.Action<Microsoft.CodeAnalysisP.Diagnostics.SemanticModelAnalysisContext> action) -> void
abstract Microsoft.CodeAnalysisP.Diagnostics.CompilationStartAnalysisContext.RegisterSymbolAction(System.Action<Microsoft.CodeAnalysisP.Diagnostics.SymbolAnalysisContext> action, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.SymbolKind> symbolKinds) -> void
abstract Microsoft.CodeAnalysisP.Diagnostics.CompilationStartAnalysisContext.RegisterSyntaxNodeAction<TLanguageKindEnum>(System.Action<Microsoft.CodeAnalysisP.Diagnostics.SyntaxNodeAnalysisContext> action, System.Collections.Immutable.ImmutableArray<TLanguageKindEnum> syntaxKinds) -> void
abstract Microsoft.CodeAnalysisP.Diagnostics.CompilationStartAnalysisContext.RegisterSyntaxTreeAction(System.Action<Microsoft.CodeAnalysisP.Diagnostics.SyntaxTreeAnalysisContext> action) -> void
abstract Microsoft.CodeAnalysisP.Diagnostics.DiagnosticAnalyzer.Initialize(Microsoft.CodeAnalysisP.Diagnostics.AnalysisContext context) -> void
abstract Microsoft.CodeAnalysisP.Diagnostics.DiagnosticAnalyzer.SupportedDiagnostics.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.DiagnosticDescriptor>
abstract Microsoft.CodeAnalysisP.Diagnostics.OperationBlockStartAnalysisContext.RegisterOperationAction(System.Action<Microsoft.CodeAnalysisP.Diagnostics.OperationAnalysisContext> action, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.OperationKind> operationKinds) -> void
abstract Microsoft.CodeAnalysisP.Diagnostics.OperationBlockStartAnalysisContext.RegisterOperationBlockEndAction(System.Action<Microsoft.CodeAnalysisP.Diagnostics.OperationBlockAnalysisContext> action) -> void
abstract Microsoft.CodeAnalysisP.DocumentationProvider.GetDocumentationForSymbol(string documentationMemberID, System.Globalization.CultureInfo preferredCulture, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> string
abstract Microsoft.CodeAnalysisP.LocalizableString.AreEqual(object other) -> bool
abstract Microsoft.CodeAnalysisP.LocalizableString.GetHash() -> int
abstract Microsoft.CodeAnalysisP.LocalizableString.GetText(System.IFormatProvider formatProvider) -> string
abstract Microsoft.CodeAnalysisP.Location.Kind.get -> Microsoft.CodeAnalysisP.LocationKind
abstract Microsoft.CodeAnalysisP.Metadata.Dispose() -> void
abstract Microsoft.CodeAnalysisP.Metadata.Kind.get -> Microsoft.CodeAnalysisP.MetadataImageKind
abstract Microsoft.CodeAnalysisP.MetadataReferenceResolver.ResolveReference(string reference, string baseFilePath, Microsoft.CodeAnalysisP.MetadataReferenceProperties properties) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.PortableExecutableReference>
abstract Microsoft.CodeAnalysisP.ParseOptions.CommonWithKind(Microsoft.CodeAnalysisP.SourceCodeKind kind) -> Microsoft.CodeAnalysisP.ParseOptions
abstract Microsoft.CodeAnalysisP.ParseOptions.Features.get -> System.Collections.Generic.IReadOnlyDictionary<string, string>
abstract Microsoft.CodeAnalysisP.ParseOptions.Language.get -> string
abstract Microsoft.CodeAnalysisP.ParseOptions.PreprocessorSymbolNames.get -> System.Collections.Generic.IEnumerable<string>
abstract Microsoft.CodeAnalysisP.PortableExecutableReference.CreateDocumentationProvider() -> Microsoft.CodeAnalysisP.DocumentationProvider
abstract Microsoft.CodeAnalysisP.PortableExecutableReference.GetMetadataImpl() -> Microsoft.CodeAnalysisP.Metadata
abstract Microsoft.CodeAnalysisP.PortableExecutableReference.WithPropertiesImpl(Microsoft.CodeAnalysisP.MetadataReferenceProperties properties) -> Microsoft.CodeAnalysisP.PortableExecutableReference
abstract Microsoft.CodeAnalysisP.SemanticModel.AnalyzeControlFlowCore(Microsoft.CodeAnalysisP.SyntaxNode firstStatement, Microsoft.CodeAnalysisP.SyntaxNode lastStatement) -> Microsoft.CodeAnalysisP.ControlFlowAnalysis
abstract Microsoft.CodeAnalysisP.SemanticModel.AnalyzeControlFlowCore(Microsoft.CodeAnalysisP.SyntaxNode statement) -> Microsoft.CodeAnalysisP.ControlFlowAnalysis
abstract Microsoft.CodeAnalysisP.SemanticModel.AnalyzeDataFlowCore(Microsoft.CodeAnalysisP.SyntaxNode firstStatement, Microsoft.CodeAnalysisP.SyntaxNode lastStatement) -> Microsoft.CodeAnalysisP.DataFlowAnalysis
abstract Microsoft.CodeAnalysisP.SemanticModel.AnalyzeDataFlowCore(Microsoft.CodeAnalysisP.SyntaxNode statementOrExpression) -> Microsoft.CodeAnalysisP.DataFlowAnalysis
abstract Microsoft.CodeAnalysisP.SemanticModel.CompilationCore.get -> Microsoft.CodeAnalysisP.Compilation
abstract Microsoft.CodeAnalysisP.SemanticModel.GetAliasInfoCore(Microsoft.CodeAnalysisP.SyntaxNode nameSyntax, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysisP.IAliasSymbol
abstract Microsoft.CodeAnalysisP.SemanticModel.GetConstantValueCore(Microsoft.CodeAnalysisP.SyntaxNode node, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysisP.Optional<object>
abstract Microsoft.CodeAnalysisP.SemanticModel.GetDeclarationDiagnostics(Microsoft.CodeAnalysisP.Text.TextSpan? span = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Diagnostic>
abstract Microsoft.CodeAnalysisP.SemanticModel.GetDeclaredSymbolCore(Microsoft.CodeAnalysisP.SyntaxNode declaration, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysisP.ISymbol
abstract Microsoft.CodeAnalysisP.SemanticModel.GetDeclaredSymbolsCore(Microsoft.CodeAnalysisP.SyntaxNode declaration, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ISymbol>
abstract Microsoft.CodeAnalysisP.SemanticModel.GetDiagnostics(Microsoft.CodeAnalysisP.Text.TextSpan? span = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Diagnostic>
abstract Microsoft.CodeAnalysisP.SemanticModel.GetEnclosingSymbolCore(int position, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysisP.ISymbol
abstract Microsoft.CodeAnalysisP.SemanticModel.GetMemberGroupCore(Microsoft.CodeAnalysisP.SyntaxNode node, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ISymbol>
abstract Microsoft.CodeAnalysisP.SemanticModel.GetMethodBodyDiagnostics(Microsoft.CodeAnalysisP.Text.TextSpan? span = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Diagnostic>
abstract Microsoft.CodeAnalysisP.SemanticModel.GetOperationCore(Microsoft.CodeAnalysisP.SyntaxNode node, System.Threading.CancellationToken cancellationToken) -> Microsoft.CodeAnalysisP.IOperation
abstract Microsoft.CodeAnalysisP.SemanticModel.GetPreprocessingSymbolInfoCore(Microsoft.CodeAnalysisP.SyntaxNode nameSyntax) -> Microsoft.CodeAnalysisP.PreprocessingSymbolInfo
abstract Microsoft.CodeAnalysisP.SemanticModel.GetSpeculativeAliasInfoCore(int position, Microsoft.CodeAnalysisP.SyntaxNode nameSyntax, Microsoft.CodeAnalysisP.SpeculativeBindingOption bindingOption) -> Microsoft.CodeAnalysisP.IAliasSymbol
abstract Microsoft.CodeAnalysisP.SemanticModel.GetSpeculativeSymbolInfoCore(int position, Microsoft.CodeAnalysisP.SyntaxNode expression, Microsoft.CodeAnalysisP.SpeculativeBindingOption bindingOption) -> Microsoft.CodeAnalysisP.SymbolInfo
abstract Microsoft.CodeAnalysisP.SemanticModel.GetSpeculativeTypeInfoCore(int position, Microsoft.CodeAnalysisP.SyntaxNode expression, Microsoft.CodeAnalysisP.SpeculativeBindingOption bindingOption) -> Microsoft.CodeAnalysisP.TypeInfo
abstract Microsoft.CodeAnalysisP.SemanticModel.GetSymbolInfoCore(Microsoft.CodeAnalysisP.SyntaxNode node, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysisP.SymbolInfo
abstract Microsoft.CodeAnalysisP.SemanticModel.GetSyntaxDiagnostics(Microsoft.CodeAnalysisP.Text.TextSpan? span = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Diagnostic>
abstract Microsoft.CodeAnalysisP.SemanticModel.GetTypeInfoCore(Microsoft.CodeAnalysisP.SyntaxNode node, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysisP.TypeInfo
abstract Microsoft.CodeAnalysisP.SemanticModel.IsAccessibleCore(int position, Microsoft.CodeAnalysisP.ISymbol symbol) -> bool
abstract Microsoft.CodeAnalysisP.SemanticModel.IsEventUsableAsFieldCore(int position, Microsoft.CodeAnalysisP.IEventSymbol eventSymbol) -> bool
abstract Microsoft.CodeAnalysisP.SemanticModel.IsSpeculativeSemanticModel.get -> bool
abstract Microsoft.CodeAnalysisP.SemanticModel.Language.get -> string
abstract Microsoft.CodeAnalysisP.SemanticModel.LookupBaseMembersCore(int position, string name) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ISymbol>
abstract Microsoft.CodeAnalysisP.SemanticModel.LookupLabelsCore(int position, string name) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ISymbol>
abstract Microsoft.CodeAnalysisP.SemanticModel.LookupNamespacesAndTypesCore(int position, Microsoft.CodeAnalysisP.INamespaceOrTypeSymbol container, string name) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ISymbol>
abstract Microsoft.CodeAnalysisP.SemanticModel.LookupStaticMembersCore(int position, Microsoft.CodeAnalysisP.INamespaceOrTypeSymbol container, string name) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ISymbol>
abstract Microsoft.CodeAnalysisP.SemanticModel.LookupSymbolsCore(int position, Microsoft.CodeAnalysisP.INamespaceOrTypeSymbol container, string name, bool includeReducedExtensionMethods) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ISymbol>
abstract Microsoft.CodeAnalysisP.SemanticModel.OriginalPositionForSpeculation.get -> int
abstract Microsoft.CodeAnalysisP.SemanticModel.ParentModelCore.get -> Microsoft.CodeAnalysisP.SemanticModel
abstract Microsoft.CodeAnalysisP.SemanticModel.RootCore.get -> Microsoft.CodeAnalysisP.SyntaxNode
abstract Microsoft.CodeAnalysisP.SemanticModel.SyntaxTreeCore.get -> Microsoft.CodeAnalysisP.SyntaxTree
abstract Microsoft.CodeAnalysisP.SourceReferenceResolver.NormalizePath(string path, string baseFilePath) -> string
abstract Microsoft.CodeAnalysisP.SourceReferenceResolver.OpenRead(string resolvedPath) -> System.IO.Stream
abstract Microsoft.CodeAnalysisP.SourceReferenceResolver.ResolveReference(string path, string baseFilePath) -> string
abstract Microsoft.CodeAnalysisP.SyntaxNode.Language.get -> string
abstract Microsoft.CodeAnalysisP.SyntaxReference.GetSyntax(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysisP.SyntaxNode
abstract Microsoft.CodeAnalysisP.SyntaxReference.Span.get -> Microsoft.CodeAnalysisP.Text.TextSpan
abstract Microsoft.CodeAnalysisP.SyntaxReference.SyntaxTree.get -> Microsoft.CodeAnalysisP.SyntaxTree
abstract Microsoft.CodeAnalysisP.SyntaxTree.Encoding.get -> System.Text.Encoding
abstract Microsoft.CodeAnalysisP.SyntaxTree.FilePath.get -> string
abstract Microsoft.CodeAnalysisP.SyntaxTree.GetChangedSpans(Microsoft.CodeAnalysisP.SyntaxTree syntaxTree) -> System.Collections.Generic.IList<Microsoft.CodeAnalysisP.Text.TextSpan>
abstract Microsoft.CodeAnalysisP.SyntaxTree.GetChanges(Microsoft.CodeAnalysisP.SyntaxTree oldTree) -> System.Collections.Generic.IList<Microsoft.CodeAnalysisP.Text.TextChange>
abstract Microsoft.CodeAnalysisP.SyntaxTree.GetDiagnostics(Microsoft.CodeAnalysisP.SyntaxNode node) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.Diagnostic>
abstract Microsoft.CodeAnalysisP.SyntaxTree.GetDiagnostics(Microsoft.CodeAnalysisP.SyntaxNodeOrToken nodeOrToken) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.Diagnostic>
abstract Microsoft.CodeAnalysisP.SyntaxTree.GetDiagnostics(Microsoft.CodeAnalysisP.SyntaxToken token) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.Diagnostic>
abstract Microsoft.CodeAnalysisP.SyntaxTree.GetDiagnostics(Microsoft.CodeAnalysisP.SyntaxTrivia trivia) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.Diagnostic>
abstract Microsoft.CodeAnalysisP.SyntaxTree.GetDiagnostics(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.Diagnostic>
abstract Microsoft.CodeAnalysisP.SyntaxTree.GetLineSpan(Microsoft.CodeAnalysisP.Text.TextSpan span, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysisP.FileLinePositionSpan
abstract Microsoft.CodeAnalysisP.SyntaxTree.GetLocation(Microsoft.CodeAnalysisP.Text.TextSpan span) -> Microsoft.CodeAnalysisP.Location
abstract Microsoft.CodeAnalysisP.SyntaxTree.GetMappedLineSpan(Microsoft.CodeAnalysisP.Text.TextSpan span, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysisP.FileLinePositionSpan
abstract Microsoft.CodeAnalysisP.SyntaxTree.GetReference(Microsoft.CodeAnalysisP.SyntaxNode node) -> Microsoft.CodeAnalysisP.SyntaxReference
abstract Microsoft.CodeAnalysisP.SyntaxTree.GetRootAsyncCore(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.CodeAnalysisP.SyntaxNode>
abstract Microsoft.CodeAnalysisP.SyntaxTree.GetRootCore(System.Threading.CancellationToken cancellationToken) -> Microsoft.CodeAnalysisP.SyntaxNode
abstract Microsoft.CodeAnalysisP.SyntaxTree.GetText(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysisP.Text.SourceText
abstract Microsoft.CodeAnalysisP.SyntaxTree.HasCompilationUnitRoot.get -> bool
abstract Microsoft.CodeAnalysisP.SyntaxTree.HasHiddenRegions() -> bool
abstract Microsoft.CodeAnalysisP.SyntaxTree.IsEquivalentTo(Microsoft.CodeAnalysisP.SyntaxTree tree, bool topLevel = false) -> bool
abstract Microsoft.CodeAnalysisP.SyntaxTree.Length.get -> int
abstract Microsoft.CodeAnalysisP.SyntaxTree.OptionsCore.get -> Microsoft.CodeAnalysisP.ParseOptions
abstract Microsoft.CodeAnalysisP.SyntaxTree.TryGetRootCore(out Microsoft.CodeAnalysisP.SyntaxNode root) -> bool
abstract Microsoft.CodeAnalysisP.SyntaxTree.TryGetText(out Microsoft.CodeAnalysisP.Text.SourceText text) -> bool
abstract Microsoft.CodeAnalysisP.SyntaxTree.WithChangedText(Microsoft.CodeAnalysisP.Text.SourceText newText) -> Microsoft.CodeAnalysisP.SyntaxTree
abstract Microsoft.CodeAnalysisP.SyntaxTree.WithFilePath(string path) -> Microsoft.CodeAnalysisP.SyntaxTree
abstract Microsoft.CodeAnalysisP.SyntaxTree.WithRootAndOptions(Microsoft.CodeAnalysisP.SyntaxNode root, Microsoft.CodeAnalysisP.ParseOptions options) -> Microsoft.CodeAnalysisP.SyntaxTree
abstract Microsoft.CodeAnalysisP.Text.SourceText.CopyTo(int sourceIndex, char[] destination, int destinationIndex, int count) -> void
abstract Microsoft.CodeAnalysisP.Text.SourceText.Encoding.get -> System.Text.Encoding
abstract Microsoft.CodeAnalysisP.Text.SourceText.Length.get -> int
abstract Microsoft.CodeAnalysisP.Text.SourceText.this[int position].get -> char
abstract Microsoft.CodeAnalysisP.Text.SourceTextContainer.CurrentText.get -> Microsoft.CodeAnalysisP.Text.SourceText
abstract Microsoft.CodeAnalysisP.Text.SourceTextContainer.TextChanged -> System.EventHandler<Microsoft.CodeAnalysisP.Text.TextChangeEventArgs>
abstract Microsoft.CodeAnalysisP.Text.TextLineCollection.Count.get -> int
abstract Microsoft.CodeAnalysisP.Text.TextLineCollection.IndexOf(int position) -> int
abstract Microsoft.CodeAnalysisP.Text.TextLineCollection.this[int index].get -> Microsoft.CodeAnalysisP.Text.TextLine
abstract Microsoft.CodeAnalysisP.XmlReferenceResolver.OpenRead(string resolvedPath) -> System.IO.Stream
abstract Microsoft.CodeAnalysisP.XmlReferenceResolver.ResolveReference(string path, string baseFilePath) -> string
const Microsoft.CodeAnalysisP.LanguageNames.CSharp = "C#" -> string
const Microsoft.CodeAnalysisP.LanguageNames.FSharp = "F#" -> string
const Microsoft.CodeAnalysisP.LanguageNames.VisualBasic = "Visual Basic" -> string
const Microsoft.CodeAnalysisP.WellKnownDiagnosticTags.AnalyzerException = "AnalyzerException" -> string
const Microsoft.CodeAnalysisP.WellKnownDiagnosticTags.Build = "Build" -> string
const Microsoft.CodeAnalysisP.WellKnownDiagnosticTags.Compiler = "Compiler" -> string
const Microsoft.CodeAnalysisP.WellKnownDiagnosticTags.EditAndContinue = "EditAndContinue" -> string
const Microsoft.CodeAnalysisP.WellKnownDiagnosticTags.NotConfigurable = "NotConfigurable" -> string
const Microsoft.CodeAnalysisP.WellKnownDiagnosticTags.Telemetry = "Telemetry" -> string
const Microsoft.CodeAnalysisP.WellKnownDiagnosticTags.Unnecessary = "Unnecessary" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.AdditionOperatorName = "op_Addition" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.BitwiseAndOperatorName = "op_BitwiseAnd" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.BitwiseOrOperatorName = "op_BitwiseOr" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.CollectionInitializerAddMethodName = "Add" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.ConcatenateOperatorName = "op_Concatenate" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.CurrentPropertyName = "Current" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.DeconstructMethodName = "Deconstruct" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.DecrementOperatorName = "op_Decrement" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.DefaultScriptClassName = "Script" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.DelegateBeginInvokeName = "BeginInvoke" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.DelegateEndInvokeName = "EndInvoke" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.DelegateInvokeName = "Invoke" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.DestructorName = "Finalize" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.DivisionOperatorName = "op_Division" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.EntryPointMethodName = "Main" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.EnumBackingFieldName = "value__" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.EqualityOperatorName = "op_Equality" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.ExclusiveOrOperatorName = "op_ExclusiveOr" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.ExplicitConversionName = "op_Explicit" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.ExponentOperatorName = "op_Exponent" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.FalseOperatorName = "op_False" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.GetAwaiter = "GetAwaiter" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.GetEnumeratorMethodName = "GetEnumerator" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.GetResult = "GetResult" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.GreaterThanOperatorName = "op_GreaterThan" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.GreaterThanOrEqualOperatorName = "op_GreaterThanOrEqual" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.ImplicitConversionName = "op_Implicit" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.IncrementOperatorName = "op_Increment" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.Indexer = "this[]" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.InequalityOperatorName = "op_Inequality" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.InstanceConstructorName = ".ctor" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.IntegerDivisionOperatorName = "op_IntegerDivision" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.IsCompleted = "IsCompleted" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.LeftShiftOperatorName = "op_LeftShift" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.LessThanOperatorName = "op_LessThan" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.LessThanOrEqualOperatorName = "op_LessThanOrEqual" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.LikeOperatorName = "op_Like" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.LogicalAndOperatorName = "op_LogicalAnd" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.LogicalNotOperatorName = "op_LogicalNot" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.LogicalOrOperatorName = "op_LogicalOr" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.ModulusOperatorName = "op_Modulus" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.MoveNextMethodName = "MoveNext" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.MultiplyOperatorName = "op_Multiply" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.ObjectEquals = "Equals" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.ObjectGetHashCode = "GetHashCode" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.ObjectToString = "ToString" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.OnCompleted = "OnCompleted" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.OnesComplementOperatorName = "op_OnesComplement" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.RightShiftOperatorName = "op_RightShift" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.StaticConstructorName = ".cctor" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.SubtractionOperatorName = "op_Subtraction" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.TrueOperatorName = "op_True" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.UnaryNegationOperatorName = "op_UnaryNegation" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.UnaryPlusOperatorName = "op_UnaryPlus" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.UnsignedLeftShiftOperatorName = "op_UnsignedLeftShift" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.UnsignedRightShiftOperatorName = "op_UnsignedRightShift" -> string
const Microsoft.CodeAnalysisP.WellKnownMemberNames.ValuePropertyName = "Value" -> string
Microsoft.CodeAnalysisP.Accessibility
Microsoft.CodeAnalysisP.Accessibility.Friend = 4 -> Microsoft.CodeAnalysisP.Accessibility
Microsoft.CodeAnalysisP.Accessibility.Internal = 4 -> Microsoft.CodeAnalysisP.Accessibility
Microsoft.CodeAnalysisP.Accessibility.NotApplicable = 0 -> Microsoft.CodeAnalysisP.Accessibility
Microsoft.CodeAnalysisP.Accessibility.Private = 1 -> Microsoft.CodeAnalysisP.Accessibility
Microsoft.CodeAnalysisP.Accessibility.Protected = 3 -> Microsoft.CodeAnalysisP.Accessibility
Microsoft.CodeAnalysisP.Accessibility.ProtectedAndFriend = 2 -> Microsoft.CodeAnalysisP.Accessibility
Microsoft.CodeAnalysisP.Accessibility.ProtectedAndInternal = 2 -> Microsoft.CodeAnalysisP.Accessibility
Microsoft.CodeAnalysisP.Accessibility.ProtectedOrFriend = 5 -> Microsoft.CodeAnalysisP.Accessibility
Microsoft.CodeAnalysisP.Accessibility.ProtectedOrInternal = 5 -> Microsoft.CodeAnalysisP.Accessibility
Microsoft.CodeAnalysisP.Accessibility.Public = 6 -> Microsoft.CodeAnalysisP.Accessibility
Microsoft.CodeAnalysisP.AdditionalText
Microsoft.CodeAnalysisP.AdditionalText.AdditionalText() -> void
Microsoft.CodeAnalysisP.AnnotationExtensions
Microsoft.CodeAnalysisP.AssemblyIdentity
Microsoft.CodeAnalysisP.AssemblyIdentity.AssemblyIdentity(string name, System.Version version = null, string cultureName = null, System.Collections.Immutable.ImmutableArray<byte> publicKeyOrToken = default(System.Collections.Immutable.ImmutableArray<byte>), bool hasPublicKey = false, bool isRetargetable = false, System.Reflection.AssemblyContentType contentType = System.Reflection.AssemblyContentType.Default) -> void
Microsoft.CodeAnalysisP.AssemblyIdentity.ContentType.get -> System.Reflection.AssemblyContentType
Microsoft.CodeAnalysisP.AssemblyIdentity.CultureName.get -> string
Microsoft.CodeAnalysisP.AssemblyIdentity.Equals(Microsoft.CodeAnalysisP.AssemblyIdentity obj) -> bool
Microsoft.CodeAnalysisP.AssemblyIdentity.Flags.get -> System.Reflection.AssemblyNameFlags
Microsoft.CodeAnalysisP.AssemblyIdentity.GetDisplayName(bool fullKey = false) -> string
Microsoft.CodeAnalysisP.AssemblyIdentity.HasPublicKey.get -> bool
Microsoft.CodeAnalysisP.AssemblyIdentity.IsRetargetable.get -> bool
Microsoft.CodeAnalysisP.AssemblyIdentity.IsStrongName.get -> bool
Microsoft.CodeAnalysisP.AssemblyIdentity.Name.get -> string
Microsoft.CodeAnalysisP.AssemblyIdentity.PublicKey.get -> System.Collections.Immutable.ImmutableArray<byte>
Microsoft.CodeAnalysisP.AssemblyIdentity.PublicKeyToken.get -> System.Collections.Immutable.ImmutableArray<byte>
Microsoft.CodeAnalysisP.AssemblyIdentity.Version.get -> System.Version
Microsoft.CodeAnalysisP.AssemblyIdentityComparer
Microsoft.CodeAnalysisP.AssemblyIdentityComparer.Compare(Microsoft.CodeAnalysisP.AssemblyIdentity reference, Microsoft.CodeAnalysisP.AssemblyIdentity definition) -> Microsoft.CodeAnalysisP.AssemblyIdentityComparer.ComparisonResult
Microsoft.CodeAnalysisP.AssemblyIdentityComparer.ComparisonResult
Microsoft.CodeAnalysisP.AssemblyIdentityComparer.ComparisonResult.Equivalent = 1 -> Microsoft.CodeAnalysisP.AssemblyIdentityComparer.ComparisonResult
Microsoft.CodeAnalysisP.AssemblyIdentityComparer.ComparisonResult.EquivalentIgnoringVersion = 2 -> Microsoft.CodeAnalysisP.AssemblyIdentityComparer.ComparisonResult
Microsoft.CodeAnalysisP.AssemblyIdentityComparer.ComparisonResult.NotEquivalent = 0 -> Microsoft.CodeAnalysisP.AssemblyIdentityComparer.ComparisonResult
Microsoft.CodeAnalysisP.AssemblyIdentityComparer.ReferenceMatchesDefinition(Microsoft.CodeAnalysisP.AssemblyIdentity reference, Microsoft.CodeAnalysisP.AssemblyIdentity definition) -> bool
Microsoft.CodeAnalysisP.AssemblyIdentityComparer.ReferenceMatchesDefinition(string referenceDisplayName, Microsoft.CodeAnalysisP.AssemblyIdentity definition) -> bool
Microsoft.CodeAnalysisP.AssemblyIdentityParts
Microsoft.CodeAnalysisP.AssemblyIdentityParts.ContentType = 512 -> Microsoft.CodeAnalysisP.AssemblyIdentityParts
Microsoft.CodeAnalysisP.AssemblyIdentityParts.Culture = 32 -> Microsoft.CodeAnalysisP.AssemblyIdentityParts
Microsoft.CodeAnalysisP.AssemblyIdentityParts.Name = 1 -> Microsoft.CodeAnalysisP.AssemblyIdentityParts
Microsoft.CodeAnalysisP.AssemblyIdentityParts.PublicKey = 64 -> Microsoft.CodeAnalysisP.AssemblyIdentityParts
Microsoft.CodeAnalysisP.AssemblyIdentityParts.PublicKeyOrToken = Microsoft.CodeAnalysisP.AssemblyIdentityParts.PublicKey | Microsoft.CodeAnalysisP.AssemblyIdentityParts.PublicKeyToken -> Microsoft.CodeAnalysisP.AssemblyIdentityParts
Microsoft.CodeAnalysisP.AssemblyIdentityParts.PublicKeyToken = 128 -> Microsoft.CodeAnalysisP.AssemblyIdentityParts
Microsoft.CodeAnalysisP.AssemblyIdentityParts.Retargetability = 256 -> Microsoft.CodeAnalysisP.AssemblyIdentityParts
Microsoft.CodeAnalysisP.AssemblyIdentityParts.Unknown = 1024 -> Microsoft.CodeAnalysisP.AssemblyIdentityParts
Microsoft.CodeAnalysisP.AssemblyIdentityParts.Version = Microsoft.CodeAnalysisP.AssemblyIdentityParts.VersionMajor | Microsoft.CodeAnalysisP.AssemblyIdentityParts.VersionMinor | Microsoft.CodeAnalysisP.AssemblyIdentityParts.VersionBuild | Microsoft.CodeAnalysisP.AssemblyIdentityParts.VersionRevision -> Microsoft.CodeAnalysisP.AssemblyIdentityParts
Microsoft.CodeAnalysisP.AssemblyIdentityParts.VersionBuild = 8 -> Microsoft.CodeAnalysisP.AssemblyIdentityParts
Microsoft.CodeAnalysisP.AssemblyIdentityParts.VersionMajor = 2 -> Microsoft.CodeAnalysisP.AssemblyIdentityParts
Microsoft.CodeAnalysisP.AssemblyIdentityParts.VersionMinor = 4 -> Microsoft.CodeAnalysisP.AssemblyIdentityParts
Microsoft.CodeAnalysisP.AssemblyIdentityParts.VersionRevision = 16 -> Microsoft.CodeAnalysisP.AssemblyIdentityParts
Microsoft.CodeAnalysisP.AssemblyMetadata
Microsoft.CodeAnalysisP.AssemblyMetadata.GetModules() -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ModuleMetadata>
Microsoft.CodeAnalysisP.AssemblyMetadata.GetReference(Microsoft.CodeAnalysisP.DocumentationProvider documentation = null, System.Collections.Immutable.ImmutableArray<string> aliases = default(System.Collections.Immutable.ImmutableArray<string>), bool embedInteropTypes = false, string filePath = null, string display = null) -> Microsoft.CodeAnalysisP.PortableExecutableReference
Microsoft.CodeAnalysisP.AttributeData
Microsoft.CodeAnalysisP.AttributeData.ApplicationSyntaxReference.get -> Microsoft.CodeAnalysisP.SyntaxReference
Microsoft.CodeAnalysisP.AttributeData.AttributeClass.get -> Microsoft.CodeAnalysisP.INamedTypeSymbol
Microsoft.CodeAnalysisP.AttributeData.AttributeConstructor.get -> Microsoft.CodeAnalysisP.IMethodSymbol
Microsoft.CodeAnalysisP.AttributeData.AttributeData() -> void
Microsoft.CodeAnalysisP.AttributeData.ConstructorArguments.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.TypedConstant>
Microsoft.CodeAnalysisP.AttributeData.NamedArguments.get -> System.Collections.Immutable.ImmutableArray<System.Collections.Generic.KeyValuePair<string, Microsoft.CodeAnalysisP.TypedConstant>>
Microsoft.CodeAnalysisP.CandidateReason
Microsoft.CodeAnalysisP.CandidateReason.Ambiguous = 15 -> Microsoft.CodeAnalysisP.CandidateReason
Microsoft.CodeAnalysisP.CandidateReason.Inaccessible = 8 -> Microsoft.CodeAnalysisP.CandidateReason
Microsoft.CodeAnalysisP.CandidateReason.LateBound = 14 -> Microsoft.CodeAnalysisP.CandidateReason
Microsoft.CodeAnalysisP.CandidateReason.MemberGroup = 16 -> Microsoft.CodeAnalysisP.CandidateReason
Microsoft.CodeAnalysisP.CandidateReason.None = 0 -> Microsoft.CodeAnalysisP.CandidateReason
Microsoft.CodeAnalysisP.CandidateReason.NotAnAttributeType = 4 -> Microsoft.CodeAnalysisP.CandidateReason
Microsoft.CodeAnalysisP.CandidateReason.NotAnEvent = 2 -> Microsoft.CodeAnalysisP.CandidateReason
Microsoft.CodeAnalysisP.CandidateReason.NotATypeOrNamespace = 1 -> Microsoft.CodeAnalysisP.CandidateReason
Microsoft.CodeAnalysisP.CandidateReason.NotAValue = 9 -> Microsoft.CodeAnalysisP.CandidateReason
Microsoft.CodeAnalysisP.CandidateReason.NotAVariable = 10 -> Microsoft.CodeAnalysisP.CandidateReason
Microsoft.CodeAnalysisP.CandidateReason.NotAWithEventsMember = 3 -> Microsoft.CodeAnalysisP.CandidateReason
Microsoft.CodeAnalysisP.CandidateReason.NotCreatable = 6 -> Microsoft.CodeAnalysisP.CandidateReason
Microsoft.CodeAnalysisP.CandidateReason.NotInvocable = 11 -> Microsoft.CodeAnalysisP.CandidateReason
Microsoft.CodeAnalysisP.CandidateReason.NotReferencable = 7 -> Microsoft.CodeAnalysisP.CandidateReason
Microsoft.CodeAnalysisP.CandidateReason.OverloadResolutionFailure = 13 -> Microsoft.CodeAnalysisP.CandidateReason
Microsoft.CodeAnalysisP.CandidateReason.StaticInstanceMismatch = 12 -> Microsoft.CodeAnalysisP.CandidateReason
Microsoft.CodeAnalysisP.CandidateReason.WrongArity = 5 -> Microsoft.CodeAnalysisP.CandidateReason
Microsoft.CodeAnalysisP.CaseInsensitiveComparison
Microsoft.CodeAnalysisP.ChildSyntaxList
Microsoft.CodeAnalysisP.ChildSyntaxList.Any() -> bool
Microsoft.CodeAnalysisP.ChildSyntaxList.Count.get -> int
Microsoft.CodeAnalysisP.ChildSyntaxList.Enumerator
Microsoft.CodeAnalysisP.ChildSyntaxList.Enumerator.Current.get -> Microsoft.CodeAnalysisP.SyntaxNodeOrToken
Microsoft.CodeAnalysisP.ChildSyntaxList.Enumerator.MoveNext() -> bool
Microsoft.CodeAnalysisP.ChildSyntaxList.Enumerator.Reset() -> void
Microsoft.CodeAnalysisP.ChildSyntaxList.Equals(Microsoft.CodeAnalysisP.ChildSyntaxList other) -> bool
Microsoft.CodeAnalysisP.ChildSyntaxList.First() -> Microsoft.CodeAnalysisP.SyntaxNodeOrToken
Microsoft.CodeAnalysisP.ChildSyntaxList.GetEnumerator() -> Microsoft.CodeAnalysisP.ChildSyntaxList.Enumerator
Microsoft.CodeAnalysisP.ChildSyntaxList.Last() -> Microsoft.CodeAnalysisP.SyntaxNodeOrToken
Microsoft.CodeAnalysisP.ChildSyntaxList.Reverse() -> Microsoft.CodeAnalysisP.ChildSyntaxList.Reversed
Microsoft.CodeAnalysisP.ChildSyntaxList.Reversed
Microsoft.CodeAnalysisP.ChildSyntaxList.Reversed.Enumerator
Microsoft.CodeAnalysisP.ChildSyntaxList.Reversed.Enumerator.Current.get -> Microsoft.CodeAnalysisP.SyntaxNodeOrToken
Microsoft.CodeAnalysisP.ChildSyntaxList.Reversed.Enumerator.MoveNext() -> bool
Microsoft.CodeAnalysisP.ChildSyntaxList.Reversed.Enumerator.Reset() -> void
Microsoft.CodeAnalysisP.ChildSyntaxList.Reversed.Equals(Microsoft.CodeAnalysisP.ChildSyntaxList.Reversed other) -> bool
Microsoft.CodeAnalysisP.ChildSyntaxList.Reversed.GetEnumerator() -> Microsoft.CodeAnalysisP.ChildSyntaxList.Reversed.Enumerator
Microsoft.CodeAnalysisP.ChildSyntaxList.this[int index].get -> Microsoft.CodeAnalysisP.SyntaxNodeOrToken
Microsoft.CodeAnalysisP.CommandLineAnalyzerReference
Microsoft.CodeAnalysisP.CommandLineAnalyzerReference.CommandLineAnalyzerReference(string path) -> void
Microsoft.CodeAnalysisP.CommandLineAnalyzerReference.Equals(Microsoft.CodeAnalysisP.CommandLineAnalyzerReference other) -> bool
Microsoft.CodeAnalysisP.CommandLineAnalyzerReference.FilePath.get -> string
Microsoft.CodeAnalysisP.CommandLineArguments
Microsoft.CodeAnalysisP.CommandLineArguments.AdditionalFiles.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.CommandLineSourceFile>
Microsoft.CodeAnalysisP.CommandLineArguments.AnalyzerReferences.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.CommandLineAnalyzerReference>
Microsoft.CodeAnalysisP.CommandLineArguments.AppConfigPath.get -> string
Microsoft.CodeAnalysisP.CommandLineArguments.BaseDirectory.get -> string
Microsoft.CodeAnalysisP.CommandLineArguments.ChecksumAlgorithm.get -> Microsoft.CodeAnalysisP.Text.SourceHashAlgorithm
Microsoft.CodeAnalysisP.CommandLineArguments.CompilationName.get -> string
Microsoft.CodeAnalysisP.CommandLineArguments.CompilationOptions.get -> Microsoft.CodeAnalysisP.CompilationOptions
Microsoft.CodeAnalysisP.CommandLineArguments.DisplayHelp.get -> bool
Microsoft.CodeAnalysisP.CommandLineArguments.DisplayLangVersions.get -> bool
Microsoft.CodeAnalysisP.CommandLineArguments.DisplayLogo.get -> bool
Microsoft.CodeAnalysisP.CommandLineArguments.DisplayVersion.get -> bool
Microsoft.CodeAnalysisP.CommandLineArguments.DocumentationPath.get -> string
Microsoft.CodeAnalysisP.CommandLineArguments.EmbeddedFiles.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.CommandLineSourceFile>
Microsoft.CodeAnalysisP.CommandLineArguments.EmitOptions.get -> Microsoft.CodeAnalysisP.Emit.EmitOptions
Microsoft.CodeAnalysisP.CommandLineArguments.EmitPdb.get -> bool
Microsoft.CodeAnalysisP.CommandLineArguments.Encoding.get -> System.Text.Encoding
Microsoft.CodeAnalysisP.CommandLineArguments.ErrorLogPath.get -> string
Microsoft.CodeAnalysisP.CommandLineArguments.Errors.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Diagnostic>
Microsoft.CodeAnalysisP.CommandLineArguments.InteractiveMode.get -> bool
Microsoft.CodeAnalysisP.CommandLineArguments.KeyFileSearchPaths.get -> System.Collections.Immutable.ImmutableArray<string>
Microsoft.CodeAnalysisP.CommandLineArguments.ManifestResources.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ResourceDescription>
Microsoft.CodeAnalysisP.CommandLineArguments.MetadataReferences.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.CommandLineReference>
Microsoft.CodeAnalysisP.CommandLineArguments.NoWin32Manifest.get -> bool
Microsoft.CodeAnalysisP.CommandLineArguments.OutputDirectory.get -> string
Microsoft.CodeAnalysisP.CommandLineArguments.OutputFileName.get -> string
Microsoft.CodeAnalysisP.CommandLineArguments.OutputRefFilePath.get -> string
Microsoft.CodeAnalysisP.CommandLineArguments.ParseOptions.get -> Microsoft.CodeAnalysisP.ParseOptions
Microsoft.CodeAnalysisP.CommandLineArguments.PathMap.get -> System.Collections.Immutable.ImmutableArray<System.Collections.Generic.KeyValuePair<string, string>>
Microsoft.CodeAnalysisP.CommandLineArguments.PdbPath.get -> string
Microsoft.CodeAnalysisP.CommandLineArguments.PreferredUILang.get -> System.Globalization.CultureInfo
Microsoft.CodeAnalysisP.CommandLineArguments.PrintFullPaths.get -> bool
Microsoft.CodeAnalysisP.CommandLineArguments.ReferencePaths.get -> System.Collections.Immutable.ImmutableArray<string>
Microsoft.CodeAnalysisP.CommandLineArguments.ReportAnalyzer.get -> bool
Microsoft.CodeAnalysisP.CommandLineArguments.ResolveAnalyzerReferences(Microsoft.CodeAnalysisP.IAnalyzerAssemblyLoader analyzerLoader) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.Diagnostics.AnalyzerReference>
Microsoft.CodeAnalysisP.CommandLineArguments.ResolveMetadataReferences(Microsoft.CodeAnalysisP.MetadataReferenceResolver metadataResolver) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.MetadataReference>
Microsoft.CodeAnalysisP.CommandLineArguments.RuleSetPath.get -> string
Microsoft.CodeAnalysisP.CommandLineArguments.ScriptArguments.get -> System.Collections.Immutable.ImmutableArray<string>
Microsoft.CodeAnalysisP.CommandLineArguments.SourceFiles.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.CommandLineSourceFile>
Microsoft.CodeAnalysisP.CommandLineArguments.SourceLink.get -> string
Microsoft.CodeAnalysisP.CommandLineArguments.SourcePaths.get -> System.Collections.Immutable.ImmutableArray<string>
Microsoft.CodeAnalysisP.CommandLineArguments.TouchedFilesPath.get -> string
Microsoft.CodeAnalysisP.CommandLineArguments.Utf8Output.get -> bool
Microsoft.CodeAnalysisP.CommandLineArguments.Win32Icon.get -> string
Microsoft.CodeAnalysisP.CommandLineArguments.Win32Manifest.get -> string
Microsoft.CodeAnalysisP.CommandLineArguments.Win32ResourceFile.get -> string
Microsoft.CodeAnalysisP.CommandLineParser
Microsoft.CodeAnalysisP.CommandLineParser.Parse(System.Collections.Generic.IEnumerable<string> args, string baseDirectory, string sdkDirectory, string additionalReferenceDirectories) -> Microsoft.CodeAnalysisP.CommandLineArguments
Microsoft.CodeAnalysisP.CommandLineReference
Microsoft.CodeAnalysisP.CommandLineReference.CommandLineReference(string reference, Microsoft.CodeAnalysisP.MetadataReferenceProperties properties) -> void
Microsoft.CodeAnalysisP.CommandLineReference.Equals(Microsoft.CodeAnalysisP.CommandLineReference other) -> bool
Microsoft.CodeAnalysisP.CommandLineReference.Properties.get -> Microsoft.CodeAnalysisP.MetadataReferenceProperties
Microsoft.CodeAnalysisP.CommandLineReference.Reference.get -> string
Microsoft.CodeAnalysisP.CommandLineSourceFile
Microsoft.CodeAnalysisP.CommandLineSourceFile.CommandLineSourceFile(string path, bool isScript) -> void
Microsoft.CodeAnalysisP.CommandLineSourceFile.IsScript.get -> bool
Microsoft.CodeAnalysisP.CommandLineSourceFile.Path.get -> string
Microsoft.CodeAnalysisP.Compilation
Microsoft.CodeAnalysisP.Compilation.AddReferences(params Microsoft.CodeAnalysisP.MetadataReference[] references) -> Microsoft.CodeAnalysisP.Compilation
Microsoft.CodeAnalysisP.Compilation.AddReferences(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.MetadataReference> references) -> Microsoft.CodeAnalysisP.Compilation
Microsoft.CodeAnalysisP.Compilation.AddSyntaxTrees(params Microsoft.CodeAnalysisP.SyntaxTree[] trees) -> Microsoft.CodeAnalysisP.Compilation
Microsoft.CodeAnalysisP.Compilation.AddSyntaxTrees(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxTree> trees) -> Microsoft.CodeAnalysisP.Compilation
Microsoft.CodeAnalysisP.Compilation.Assembly.get -> Microsoft.CodeAnalysisP.IAssemblySymbol
Microsoft.CodeAnalysisP.Compilation.AssemblyName.get -> string
Microsoft.CodeAnalysisP.Compilation.Clone() -> Microsoft.CodeAnalysisP.Compilation
Microsoft.CodeAnalysisP.Compilation.ContainsSyntaxTree(Microsoft.CodeAnalysisP.SyntaxTree syntaxTree) -> bool
Microsoft.CodeAnalysisP.Compilation.CreateAnonymousTypeSymbol(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ITypeSymbol> memberTypes, System.Collections.Immutable.ImmutableArray<string> memberNames, System.Collections.Immutable.ImmutableArray<bool> memberIsReadOnly = default(System.Collections.Immutable.ImmutableArray<bool>), System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Location> memberLocations = default(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Location>)) -> Microsoft.CodeAnalysisP.INamedTypeSymbol
Microsoft.CodeAnalysisP.Compilation.CreateArrayTypeSymbol(Microsoft.CodeAnalysisP.ITypeSymbol elementType, int rank = 1) -> Microsoft.CodeAnalysisP.IArrayTypeSymbol
Microsoft.CodeAnalysisP.Compilation.CreateDefaultWin32Resources(bool versionResource, bool noManifest, System.IO.Stream manifestContents, System.IO.Stream iconInIcoFormat) -> System.IO.Stream
Microsoft.CodeAnalysisP.Compilation.CreateErrorNamespaceSymbol(Microsoft.CodeAnalysisP.INamespaceSymbol container, string name) -> Microsoft.CodeAnalysisP.INamespaceSymbol
Microsoft.CodeAnalysisP.Compilation.CreateErrorTypeSymbol(Microsoft.CodeAnalysisP.INamespaceOrTypeSymbol container, string name, int arity) -> Microsoft.CodeAnalysisP.INamedTypeSymbol
Microsoft.CodeAnalysisP.Compilation.CreatePointerTypeSymbol(Microsoft.CodeAnalysisP.ITypeSymbol pointedAtType) -> Microsoft.CodeAnalysisP.IPointerTypeSymbol
Microsoft.CodeAnalysisP.Compilation.CreateTupleTypeSymbol(Microsoft.CodeAnalysisP.INamedTypeSymbol underlyingType, System.Collections.Immutable.ImmutableArray<string> elementNames = default(System.Collections.Immutable.ImmutableArray<string>), System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Location> elementLocations = default(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Location>)) -> Microsoft.CodeAnalysisP.INamedTypeSymbol
Microsoft.CodeAnalysisP.Compilation.CreateTupleTypeSymbol(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ITypeSymbol> elementTypes, System.Collections.Immutable.ImmutableArray<string> elementNames = default(System.Collections.Immutable.ImmutableArray<string>), System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Location> elementLocations = default(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Location>)) -> Microsoft.CodeAnalysisP.INamedTypeSymbol
Microsoft.CodeAnalysisP.Compilation.DynamicType.get -> Microsoft.CodeAnalysisP.ITypeSymbol
Microsoft.CodeAnalysisP.Compilation.Emit(System.IO.Stream peStream, System.IO.Stream pdbStream = null, System.IO.Stream xmlDocumentationStream = null, System.IO.Stream win32Resources = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.ResourceDescription> manifestResources = null, Microsoft.CodeAnalysisP.Emit.EmitOptions options = null, Microsoft.CodeAnalysisP.IMethodSymbol debugEntryPoint = null, System.IO.Stream sourceLinkStream = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.EmbeddedText> embeddedTexts = null, System.IO.Stream metadataPEStream = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysisP.Emit.EmitResult
Microsoft.CodeAnalysisP.Compilation.Emit(System.IO.Stream peStream, System.IO.Stream pdbStream, System.IO.Stream xmlDocumentationStream, System.IO.Stream win32Resources, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.ResourceDescription> manifestResources, Microsoft.CodeAnalysisP.Emit.EmitOptions options, Microsoft.CodeAnalysisP.IMethodSymbol debugEntryPoint, System.IO.Stream sourceLinkStream, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.EmbeddedText> embeddedTexts, System.Threading.CancellationToken cancellationToken) -> Microsoft.CodeAnalysisP.Emit.EmitResult
Microsoft.CodeAnalysisP.Compilation.Emit(System.IO.Stream peStream, System.IO.Stream pdbStream, System.IO.Stream xmlDocumentationStream, System.IO.Stream win32Resources, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.ResourceDescription> manifestResources, Microsoft.CodeAnalysisP.Emit.EmitOptions options, Microsoft.CodeAnalysisP.IMethodSymbol debugEntryPoint, System.Threading.CancellationToken cancellationToken) -> Microsoft.CodeAnalysisP.Emit.EmitResult
Microsoft.CodeAnalysisP.Compilation.Emit(System.IO.Stream peStream, System.IO.Stream pdbStream, System.IO.Stream xmlDocumentationStream, System.IO.Stream win32Resources, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.ResourceDescription> manifestResources, Microsoft.CodeAnalysisP.Emit.EmitOptions options, System.Threading.CancellationToken cancellationToken) -> Microsoft.CodeAnalysisP.Emit.EmitResult
Microsoft.CodeAnalysisP.Compilation.EmitDifference(Microsoft.CodeAnalysisP.Emit.EmitBaseline baseline, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.Emit.SemanticEdit> edits, System.Func<Microsoft.CodeAnalysisP.ISymbol, bool> isAddedSymbol, System.IO.Stream metadataStream, System.IO.Stream ilStream, System.IO.Stream pdbStream, System.Collections.Generic.ICollection<System.Reflection.Metadata.MethodDefinitionHandle> updatedMethods, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysisP.Emit.EmitDifferenceResult
Microsoft.CodeAnalysisP.Compilation.EmitDifference(Microsoft.CodeAnalysisP.Emit.EmitBaseline baseline, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.Emit.SemanticEdit> edits, System.IO.Stream metadataStream, System.IO.Stream ilStream, System.IO.Stream pdbStream, System.Collections.Generic.ICollection<System.Reflection.Metadata.MethodDefinitionHandle> updatedMethods, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysisP.Emit.EmitDifferenceResult
Microsoft.CodeAnalysisP.Compilation.ExternalReferences.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.MetadataReference>
Microsoft.CodeAnalysisP.Compilation.GetAssemblyOrModuleSymbol(Microsoft.CodeAnalysisP.MetadataReference reference) -> Microsoft.CodeAnalysisP.ISymbol
Microsoft.CodeAnalysisP.Compilation.GetCompilationNamespace(Microsoft.CodeAnalysisP.INamespaceSymbol namespaceSymbol) -> Microsoft.CodeAnalysisP.INamespaceSymbol
Microsoft.CodeAnalysisP.Compilation.GetEntryPoint(System.Threading.CancellationToken cancellationToken) -> Microsoft.CodeAnalysisP.IMethodSymbol
Microsoft.CodeAnalysisP.Compilation.GetMetadataReference(Microsoft.CodeAnalysisP.IAssemblySymbol assemblySymbol) -> Microsoft.CodeAnalysisP.MetadataReference
Microsoft.CodeAnalysisP.Compilation.GetSemanticModel(Microsoft.CodeAnalysisP.SyntaxTree syntaxTree, bool ignoreAccessibility = false) -> Microsoft.CodeAnalysisP.SemanticModel
Microsoft.CodeAnalysisP.Compilation.GetSpecialType(Microsoft.CodeAnalysisP.SpecialType specialType) -> Microsoft.CodeAnalysisP.INamedTypeSymbol
Microsoft.CodeAnalysisP.Compilation.GetTypeByMetadataName(string fullyQualifiedMetadataName) -> Microsoft.CodeAnalysisP.INamedTypeSymbol
Microsoft.CodeAnalysisP.Compilation.GetUnreferencedAssemblyIdentities(Microsoft.CodeAnalysisP.Diagnostic diagnostic) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.AssemblyIdentity>
Microsoft.CodeAnalysisP.Compilation.GlobalNamespace.get -> Microsoft.CodeAnalysisP.INamespaceSymbol
Microsoft.CodeAnalysisP.Compilation.ObjectType.get -> Microsoft.CodeAnalysisP.INamedTypeSymbol
Microsoft.CodeAnalysisP.Compilation.Options.get -> Microsoft.CodeAnalysisP.CompilationOptions
Microsoft.CodeAnalysisP.Compilation.References.get -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.MetadataReference>
Microsoft.CodeAnalysisP.Compilation.RemoveAllReferences() -> Microsoft.CodeAnalysisP.Compilation
Microsoft.CodeAnalysisP.Compilation.RemoveAllSyntaxTrees() -> Microsoft.CodeAnalysisP.Compilation
Microsoft.CodeAnalysisP.Compilation.RemoveReferences(params Microsoft.CodeAnalysisP.MetadataReference[] references) -> Microsoft.CodeAnalysisP.Compilation
Microsoft.CodeAnalysisP.Compilation.RemoveReferences(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.MetadataReference> references) -> Microsoft.CodeAnalysisP.Compilation
Microsoft.CodeAnalysisP.Compilation.RemoveSyntaxTrees(params Microsoft.CodeAnalysisP.SyntaxTree[] trees) -> Microsoft.CodeAnalysisP.Compilation
Microsoft.CodeAnalysisP.Compilation.RemoveSyntaxTrees(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxTree> trees) -> Microsoft.CodeAnalysisP.Compilation
Microsoft.CodeAnalysisP.Compilation.ReplaceReference(Microsoft.CodeAnalysisP.MetadataReference oldReference, Microsoft.CodeAnalysisP.MetadataReference newReference) -> Microsoft.CodeAnalysisP.Compilation
Microsoft.CodeAnalysisP.Compilation.ReplaceSyntaxTree(Microsoft.CodeAnalysisP.SyntaxTree oldTree, Microsoft.CodeAnalysisP.SyntaxTree newTree) -> Microsoft.CodeAnalysisP.Compilation
Microsoft.CodeAnalysisP.Compilation.ScriptClass.get -> Microsoft.CodeAnalysisP.INamedTypeSymbol
Microsoft.CodeAnalysisP.Compilation.ScriptCompilationInfo.get -> Microsoft.CodeAnalysisP.ScriptCompilationInfo
Microsoft.CodeAnalysisP.Compilation.SourceModule.get -> Microsoft.CodeAnalysisP.IModuleSymbol
Microsoft.CodeAnalysisP.Compilation.SyntaxTrees.get -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxTree>
Microsoft.CodeAnalysisP.Compilation.WithAssemblyName(string assemblyName) -> Microsoft.CodeAnalysisP.Compilation
Microsoft.CodeAnalysisP.Compilation.WithOptions(Microsoft.CodeAnalysisP.CompilationOptions options) -> Microsoft.CodeAnalysisP.Compilation
Microsoft.CodeAnalysisP.Compilation.WithReferences(params Microsoft.CodeAnalysisP.MetadataReference[] newReferences) -> Microsoft.CodeAnalysisP.Compilation
Microsoft.CodeAnalysisP.Compilation.WithReferences(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.MetadataReference> newReferences) -> Microsoft.CodeAnalysisP.Compilation
Microsoft.CodeAnalysisP.Compilation.WithScriptCompilationInfo(Microsoft.CodeAnalysisP.ScriptCompilationInfo info) -> Microsoft.CodeAnalysisP.Compilation
Microsoft.CodeAnalysisP.CompilationOptions
Microsoft.CodeAnalysisP.CompilationOptions.AssemblyIdentityComparer.get -> Microsoft.CodeAnalysisP.AssemblyIdentityComparer
Microsoft.CodeAnalysisP.CompilationOptions.CheckOverflow.get -> bool
Microsoft.CodeAnalysisP.CompilationOptions.ConcurrentBuild.get -> bool
Microsoft.CodeAnalysisP.CompilationOptions.CryptoKeyContainer.get -> string
Microsoft.CodeAnalysisP.CompilationOptions.CryptoKeyFile.get -> string
Microsoft.CodeAnalysisP.CompilationOptions.CryptoPublicKey.get -> System.Collections.Immutable.ImmutableArray<byte>
Microsoft.CodeAnalysisP.CompilationOptions.DelaySign.get -> bool?
Microsoft.CodeAnalysisP.CompilationOptions.Deterministic.get -> bool
Microsoft.CodeAnalysisP.CompilationOptions.Errors.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Diagnostic>
Microsoft.CodeAnalysisP.CompilationOptions.GeneralDiagnosticOption.get -> Microsoft.CodeAnalysisP.ReportDiagnostic
Microsoft.CodeAnalysisP.CompilationOptions.MainTypeName.get -> string
Microsoft.CodeAnalysisP.CompilationOptions.MetadataImportOptions.get -> Microsoft.CodeAnalysisP.MetadataImportOptions
Microsoft.CodeAnalysisP.CompilationOptions.MetadataReferenceResolver.get -> Microsoft.CodeAnalysisP.MetadataReferenceResolver
Microsoft.CodeAnalysisP.CompilationOptions.ModuleName.get -> string
Microsoft.CodeAnalysisP.CompilationOptions.OptimizationLevel.get -> Microsoft.CodeAnalysisP.OptimizationLevel
Microsoft.CodeAnalysisP.CompilationOptions.OutputKind.get -> Microsoft.CodeAnalysisP.OutputKind
Microsoft.CodeAnalysisP.CompilationOptions.Platform.get -> Microsoft.CodeAnalysisP.Platform
Microsoft.CodeAnalysisP.CompilationOptions.PublicSign.get -> bool
Microsoft.CodeAnalysisP.CompilationOptions.ReportSuppressedDiagnostics.get -> bool
Microsoft.CodeAnalysisP.CompilationOptions.ScriptClassName.get -> string
Microsoft.CodeAnalysisP.CompilationOptions.SourceReferenceResolver.get -> Microsoft.CodeAnalysisP.SourceReferenceResolver
Microsoft.CodeAnalysisP.CompilationOptions.SpecificDiagnosticOptions.get -> System.Collections.Immutable.ImmutableDictionary<string, Microsoft.CodeAnalysisP.ReportDiagnostic>
Microsoft.CodeAnalysisP.CompilationOptions.StrongNameProvider.get -> Microsoft.CodeAnalysisP.StrongNameProvider
Microsoft.CodeAnalysisP.CompilationOptions.WarningLevel.get -> int
Microsoft.CodeAnalysisP.CompilationOptions.WithAssemblyIdentityComparer(Microsoft.CodeAnalysisP.AssemblyIdentityComparer comparer) -> Microsoft.CodeAnalysisP.CompilationOptions
Microsoft.CodeAnalysisP.CompilationOptions.WithConcurrentBuild(bool concurrent) -> Microsoft.CodeAnalysisP.CompilationOptions
Microsoft.CodeAnalysisP.CompilationOptions.WithCryptoKeyContainer(string cryptoKeyContainer) -> Microsoft.CodeAnalysisP.CompilationOptions
Microsoft.CodeAnalysisP.CompilationOptions.WithCryptoKeyFile(string cryptoKeyFile) -> Microsoft.CodeAnalysisP.CompilationOptions
Microsoft.CodeAnalysisP.CompilationOptions.WithCryptoPublicKey(System.Collections.Immutable.ImmutableArray<byte> cryptoPublicKey) -> Microsoft.CodeAnalysisP.CompilationOptions
Microsoft.CodeAnalysisP.CompilationOptions.WithDelaySign(bool? delaySign) -> Microsoft.CodeAnalysisP.CompilationOptions
Microsoft.CodeAnalysisP.CompilationOptions.WithDeterministic(bool deterministic) -> Microsoft.CodeAnalysisP.CompilationOptions
Microsoft.CodeAnalysisP.CompilationOptions.WithGeneralDiagnosticOption(Microsoft.CodeAnalysisP.ReportDiagnostic value) -> Microsoft.CodeAnalysisP.CompilationOptions
Microsoft.CodeAnalysisP.CompilationOptions.WithMainTypeName(string mainTypeName) -> Microsoft.CodeAnalysisP.CompilationOptions
Microsoft.CodeAnalysisP.CompilationOptions.WithMetadataImportOptions(Microsoft.CodeAnalysisP.MetadataImportOptions value) -> Microsoft.CodeAnalysisP.CompilationOptions
Microsoft.CodeAnalysisP.CompilationOptions.WithMetadataReferenceResolver(Microsoft.CodeAnalysisP.MetadataReferenceResolver resolver) -> Microsoft.CodeAnalysisP.CompilationOptions
Microsoft.CodeAnalysisP.CompilationOptions.WithModuleName(string moduleName) -> Microsoft.CodeAnalysisP.CompilationOptions
Microsoft.CodeAnalysisP.CompilationOptions.WithOptimizationLevel(Microsoft.CodeAnalysisP.OptimizationLevel value) -> Microsoft.CodeAnalysisP.CompilationOptions
Microsoft.CodeAnalysisP.CompilationOptions.WithOutputKind(Microsoft.CodeAnalysisP.OutputKind kind) -> Microsoft.CodeAnalysisP.CompilationOptions
Microsoft.CodeAnalysisP.CompilationOptions.WithOverflowChecks(bool checkOverflow) -> Microsoft.CodeAnalysisP.CompilationOptions
Microsoft.CodeAnalysisP.CompilationOptions.WithPlatform(Microsoft.CodeAnalysisP.Platform platform) -> Microsoft.CodeAnalysisP.CompilationOptions
Microsoft.CodeAnalysisP.CompilationOptions.WithPublicSign(bool publicSign) -> Microsoft.CodeAnalysisP.CompilationOptions
Microsoft.CodeAnalysisP.CompilationOptions.WithReportSuppressedDiagnostics(bool value) -> Microsoft.CodeAnalysisP.CompilationOptions
Microsoft.CodeAnalysisP.CompilationOptions.WithScriptClassName(string scriptClassName) -> Microsoft.CodeAnalysisP.CompilationOptions
Microsoft.CodeAnalysisP.CompilationOptions.WithSourceReferenceResolver(Microsoft.CodeAnalysisP.SourceReferenceResolver resolver) -> Microsoft.CodeAnalysisP.CompilationOptions
Microsoft.CodeAnalysisP.CompilationOptions.WithSpecificDiagnosticOptions(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, Microsoft.CodeAnalysisP.ReportDiagnostic>> value) -> Microsoft.CodeAnalysisP.CompilationOptions
Microsoft.CodeAnalysisP.CompilationOptions.WithSpecificDiagnosticOptions(System.Collections.Immutable.ImmutableDictionary<string, Microsoft.CodeAnalysisP.ReportDiagnostic> value) -> Microsoft.CodeAnalysisP.CompilationOptions
Microsoft.CodeAnalysisP.CompilationOptions.WithStrongNameProvider(Microsoft.CodeAnalysisP.StrongNameProvider provider) -> Microsoft.CodeAnalysisP.CompilationOptions
Microsoft.CodeAnalysisP.CompilationOptions.WithXmlReferenceResolver(Microsoft.CodeAnalysisP.XmlReferenceResolver resolver) -> Microsoft.CodeAnalysisP.CompilationOptions
Microsoft.CodeAnalysisP.CompilationOptions.XmlReferenceResolver.get -> Microsoft.CodeAnalysisP.XmlReferenceResolver
Microsoft.CodeAnalysisP.CompilationReference
Microsoft.CodeAnalysisP.CompilationReference.Compilation.get -> Microsoft.CodeAnalysisP.Compilation
Microsoft.CodeAnalysisP.CompilationReference.Equals(Microsoft.CodeAnalysisP.CompilationReference other) -> bool
Microsoft.CodeAnalysisP.CompilationReference.WithAliases(System.Collections.Generic.IEnumerable<string> aliases) -> Microsoft.CodeAnalysisP.CompilationReference
Microsoft.CodeAnalysisP.CompilationReference.WithAliases(System.Collections.Immutable.ImmutableArray<string> aliases) -> Microsoft.CodeAnalysisP.CompilationReference
Microsoft.CodeAnalysisP.CompilationReference.WithEmbedInteropTypes(bool value) -> Microsoft.CodeAnalysisP.CompilationReference
Microsoft.CodeAnalysisP.CompilationReference.WithProperties(Microsoft.CodeAnalysisP.MetadataReferenceProperties properties) -> Microsoft.CodeAnalysisP.CompilationReference
Microsoft.CodeAnalysisP.ControlFlowAnalysis
Microsoft.CodeAnalysisP.ControlFlowAnalysis.ControlFlowAnalysis() -> void
Microsoft.CodeAnalysisP.CustomModifier
Microsoft.CodeAnalysisP.CustomModifier.CustomModifier() -> void
Microsoft.CodeAnalysisP.DataFlowAnalysis
Microsoft.CodeAnalysisP.DataFlowAnalysis.DataFlowAnalysis() -> void
Microsoft.CodeAnalysisP.DesktopAssemblyIdentityComparer
Microsoft.CodeAnalysisP.DesktopStrongNameProvider
Microsoft.CodeAnalysisP.DesktopStrongNameProvider.DesktopStrongNameProvider(System.Collections.Immutable.ImmutableArray<string> keyFileSearchPaths = default(System.Collections.Immutable.ImmutableArray<string>), string tempPath = null) -> void
Microsoft.CodeAnalysisP.DesktopStrongNameProvider.DesktopStrongNameProvider(System.Collections.Immutable.ImmutableArray<string> keyFileSearchPaths) -> void
Microsoft.CodeAnalysisP.Diagnostic
Microsoft.CodeAnalysisP.Diagnostic.Diagnostic() -> void
Microsoft.CodeAnalysisP.Diagnostic.GetSuppressionInfo(Microsoft.CodeAnalysisP.Compilation compilation) -> Microsoft.CodeAnalysisP.Diagnostics.SuppressionInfo
Microsoft.CodeAnalysisP.Diagnostic.IsWarningAsError.get -> bool
Microsoft.CodeAnalysisP.DiagnosticDescriptor
Microsoft.CodeAnalysisP.DiagnosticDescriptor.Category.get -> string
Microsoft.CodeAnalysisP.DiagnosticDescriptor.CustomTags.get -> System.Collections.Generic.IEnumerable<string>
Microsoft.CodeAnalysisP.DiagnosticDescriptor.DefaultSeverity.get -> Microsoft.CodeAnalysisP.DiagnosticSeverity
Microsoft.CodeAnalysisP.DiagnosticDescriptor.Description.get -> Microsoft.CodeAnalysisP.LocalizableString
Microsoft.CodeAnalysisP.DiagnosticDescriptor.DiagnosticDescriptor(string id, Microsoft.CodeAnalysisP.LocalizableString title, Microsoft.CodeAnalysisP.LocalizableString messageFormat, string category, Microsoft.CodeAnalysisP.DiagnosticSeverity defaultSeverity, bool isEnabledByDefault, Microsoft.CodeAnalysisP.LocalizableString description = null, string helpLinkUri = null, params string[] customTags) -> void
Microsoft.CodeAnalysisP.DiagnosticDescriptor.DiagnosticDescriptor(string id, string title, string messageFormat, string category, Microsoft.CodeAnalysisP.DiagnosticSeverity defaultSeverity, bool isEnabledByDefault, string description = null, string helpLinkUri = null, params string[] customTags) -> void
Microsoft.CodeAnalysisP.DiagnosticDescriptor.Equals(Microsoft.CodeAnalysisP.DiagnosticDescriptor other) -> bool
Microsoft.CodeAnalysisP.DiagnosticDescriptor.GetEffectiveSeverity(Microsoft.CodeAnalysisP.CompilationOptions compilationOptions) -> Microsoft.CodeAnalysisP.ReportDiagnostic
Microsoft.CodeAnalysisP.DiagnosticDescriptor.HelpLinkUri.get -> string
Microsoft.CodeAnalysisP.DiagnosticDescriptor.Id.get -> string
Microsoft.CodeAnalysisP.DiagnosticDescriptor.IsEnabledByDefault.get -> bool
Microsoft.CodeAnalysisP.DiagnosticDescriptor.MessageFormat.get -> Microsoft.CodeAnalysisP.LocalizableString
Microsoft.CodeAnalysisP.DiagnosticDescriptor.Title.get -> Microsoft.CodeAnalysisP.LocalizableString
Microsoft.CodeAnalysisP.DiagnosticFormatter
Microsoft.CodeAnalysisP.DiagnosticFormatter.DiagnosticFormatter() -> void
Microsoft.CodeAnalysisP.Diagnostics.AnalysisContext
Microsoft.CodeAnalysisP.Diagnostics.AnalysisContext.AnalysisContext() -> void
Microsoft.CodeAnalysisP.Diagnostics.AnalysisContext.RegisterOperationAction(System.Action<Microsoft.CodeAnalysisP.Diagnostics.OperationAnalysisContext> action, params Microsoft.CodeAnalysisP.OperationKind[] operationKinds) -> void
Microsoft.CodeAnalysisP.Diagnostics.AnalysisContext.RegisterSymbolAction(System.Action<Microsoft.CodeAnalysisP.Diagnostics.SymbolAnalysisContext> action, params Microsoft.CodeAnalysisP.SymbolKind[] symbolKinds) -> void
Microsoft.CodeAnalysisP.Diagnostics.AnalysisContext.RegisterSyntaxNodeAction<TLanguageKindEnum>(System.Action<Microsoft.CodeAnalysisP.Diagnostics.SyntaxNodeAnalysisContext> action, params TLanguageKindEnum[] syntaxKinds) -> void
Microsoft.CodeAnalysisP.Diagnostics.AnalysisContext.TryGetValue<TValue>(Microsoft.CodeAnalysisP.Text.SourceText text, Microsoft.CodeAnalysisP.Diagnostics.SourceTextValueProvider<TValue> valueProvider, out TValue value) -> bool
Microsoft.CodeAnalysisP.Diagnostics.AnalysisResult
Microsoft.CodeAnalysisP.Diagnostics.AnalysisResult.Analyzers.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Diagnostics.DiagnosticAnalyzer>
Microsoft.CodeAnalysisP.Diagnostics.AnalysisResult.AnalyzerTelemetryInfo.get -> System.Collections.Immutable.ImmutableDictionary<Microsoft.CodeAnalysisP.Diagnostics.DiagnosticAnalyzer, Microsoft.CodeAnalysisP.Diagnostics.Telemetry.AnalyzerTelemetryInfo>
Microsoft.CodeAnalysisP.Diagnostics.AnalysisResult.CompilationDiagnostics.get -> System.Collections.Immutable.ImmutableDictionary<Microsoft.CodeAnalysisP.Diagnostics.DiagnosticAnalyzer, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Diagnostic>>
Microsoft.CodeAnalysisP.Diagnostics.AnalysisResult.GetAllDiagnostics() -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Diagnostic>
Microsoft.CodeAnalysisP.Diagnostics.AnalysisResult.GetAllDiagnostics(Microsoft.CodeAnalysisP.Diagnostics.DiagnosticAnalyzer analyzer) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Diagnostic>
Microsoft.CodeAnalysisP.Diagnostics.AnalysisResult.SemanticDiagnostics.get -> System.Collections.Immutable.ImmutableDictionary<Microsoft.CodeAnalysisP.SyntaxTree, System.Collections.Immutable.ImmutableDictionary<Microsoft.CodeAnalysisP.Diagnostics.DiagnosticAnalyzer, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Diagnostic>>>
Microsoft.CodeAnalysisP.Diagnostics.AnalysisResult.SyntaxDiagnostics.get -> System.Collections.Immutable.ImmutableDictionary<Microsoft.CodeAnalysisP.SyntaxTree, System.Collections.Immutable.ImmutableDictionary<Microsoft.CodeAnalysisP.Diagnostics.DiagnosticAnalyzer, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Diagnostic>>>
Microsoft.CodeAnalysisP.Diagnostics.AnalyzerFileReference
Microsoft.CodeAnalysisP.Diagnostics.AnalyzerFileReference.AnalyzerFileReference(string fullPath, Microsoft.CodeAnalysisP.IAnalyzerAssemblyLoader assemblyLoader) -> void
Microsoft.CodeAnalysisP.Diagnostics.AnalyzerFileReference.AnalyzerLoadFailed -> System.EventHandler<Microsoft.CodeAnalysisP.Diagnostics.AnalyzerLoadFailureEventArgs>
Microsoft.CodeAnalysisP.Diagnostics.AnalyzerFileReference.Equals(Microsoft.CodeAnalysisP.Diagnostics.AnalyzerReference other) -> bool
Microsoft.CodeAnalysisP.Diagnostics.AnalyzerFileReference.GetAssembly() -> System.Reflection.Assembly
Microsoft.CodeAnalysisP.Diagnostics.AnalyzerImageReference
Microsoft.CodeAnalysisP.Diagnostics.AnalyzerImageReference.AnalyzerImageReference(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Diagnostics.DiagnosticAnalyzer> analyzers, string fullPath = null, string display = null) -> void
Microsoft.CodeAnalysisP.Diagnostics.AnalyzerLoadFailureEventArgs
Microsoft.CodeAnalysisP.Diagnostics.AnalyzerLoadFailureEventArgs.AnalyzerLoadFailureEventArgs(Microsoft.CodeAnalysisP.Diagnostics.AnalyzerLoadFailureEventArgs.FailureErrorCode errorCode, string message, System.Exception exceptionOpt = null, string typeNameOpt = null) -> void
Microsoft.CodeAnalysisP.Diagnostics.AnalyzerLoadFailureEventArgs.ErrorCode.get -> Microsoft.CodeAnalysisP.Diagnostics.AnalyzerLoadFailureEventArgs.FailureErrorCode
Microsoft.CodeAnalysisP.Diagnostics.AnalyzerLoadFailureEventArgs.Exception.get -> System.Exception
Microsoft.CodeAnalysisP.Diagnostics.AnalyzerLoadFailureEventArgs.FailureErrorCode
Microsoft.CodeAnalysisP.Diagnostics.AnalyzerLoadFailureEventArgs.FailureErrorCode.NoAnalyzers = 3 -> Microsoft.CodeAnalysisP.Diagnostics.AnalyzerLoadFailureEventArgs.FailureErrorCode
Microsoft.CodeAnalysisP.Diagnostics.AnalyzerLoadFailureEventArgs.FailureErrorCode.None = 0 -> Microsoft.CodeAnalysisP.Diagnostics.AnalyzerLoadFailureEventArgs.FailureErrorCode
Microsoft.CodeAnalysisP.Diagnostics.AnalyzerLoadFailureEventArgs.FailureErrorCode.UnableToCreateAnalyzer = 2 -> Microsoft.CodeAnalysisP.Diagnostics.AnalyzerLoadFailureEventArgs.FailureErrorCode
Microsoft.CodeAnalysisP.Diagnostics.AnalyzerLoadFailureEventArgs.FailureErrorCode.UnableToLoadAnalyzer = 1 -> Microsoft.CodeAnalysisP.Diagnostics.AnalyzerLoadFailureEventArgs.FailureErrorCode
Microsoft.CodeAnalysisP.Diagnostics.AnalyzerLoadFailureEventArgs.Message.get -> string
Microsoft.CodeAnalysisP.Diagnostics.AnalyzerLoadFailureEventArgs.TypeName.get -> string
Microsoft.CodeAnalysisP.Diagnostics.AnalyzerOptions
Microsoft.CodeAnalysisP.Diagnostics.AnalyzerOptions.AdditionalFiles.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.AdditionalText>
Microsoft.CodeAnalysisP.Diagnostics.AnalyzerOptions.AnalyzerOptions(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.AdditionalText> additionalFiles) -> void
Microsoft.CodeAnalysisP.Diagnostics.AnalyzerOptions.WithAdditionalFiles(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.AdditionalText> additionalFiles) -> Microsoft.CodeAnalysisP.Diagnostics.AnalyzerOptions
Microsoft.CodeAnalysisP.Diagnostics.AnalyzerReference
Microsoft.CodeAnalysisP.Diagnostics.AnalyzerReference.AnalyzerReference() -> void
Microsoft.CodeAnalysisP.Diagnostics.CodeBlockAnalysisContext
Microsoft.CodeAnalysisP.Diagnostics.CodeBlockAnalysisContext.CancellationToken.get -> System.Threading.CancellationToken
Microsoft.CodeAnalysisP.Diagnostics.CodeBlockAnalysisContext.CodeBlock.get -> Microsoft.CodeAnalysisP.SyntaxNode
Microsoft.CodeAnalysisP.Diagnostics.CodeBlockAnalysisContext.CodeBlockAnalysisContext(Microsoft.CodeAnalysisP.SyntaxNode codeBlock, Microsoft.CodeAnalysisP.ISymbol owningSymbol, Microsoft.CodeAnalysisP.SemanticModel semanticModel, Microsoft.CodeAnalysisP.Diagnostics.AnalyzerOptions options, System.Action<Microsoft.CodeAnalysisP.Diagnostic> reportDiagnostic, System.Func<Microsoft.CodeAnalysisP.Diagnostic, bool> isSupportedDiagnostic, System.Threading.CancellationToken cancellationToken) -> void
Microsoft.CodeAnalysisP.Diagnostics.CodeBlockAnalysisContext.Options.get -> Microsoft.CodeAnalysisP.Diagnostics.AnalyzerOptions
Microsoft.CodeAnalysisP.Diagnostics.CodeBlockAnalysisContext.OwningSymbol.get -> Microsoft.CodeAnalysisP.ISymbol
Microsoft.CodeAnalysisP.Diagnostics.CodeBlockAnalysisContext.ReportDiagnostic(Microsoft.CodeAnalysisP.Diagnostic diagnostic) -> void
Microsoft.CodeAnalysisP.Diagnostics.CodeBlockAnalysisContext.SemanticModel.get -> Microsoft.CodeAnalysisP.SemanticModel
Microsoft.CodeAnalysisP.Diagnostics.CodeBlockStartAnalysisContext<TLanguageKindEnum>
Microsoft.CodeAnalysisP.Diagnostics.CodeBlockStartAnalysisContext<TLanguageKindEnum>.CancellationToken.get -> System.Threading.CancellationToken
Microsoft.CodeAnalysisP.Diagnostics.CodeBlockStartAnalysisContext<TLanguageKindEnum>.CodeBlock.get -> Microsoft.CodeAnalysisP.SyntaxNode
Microsoft.CodeAnalysisP.Diagnostics.CodeBlockStartAnalysisContext<TLanguageKindEnum>.CodeBlockStartAnalysisContext(Microsoft.CodeAnalysisP.SyntaxNode codeBlock, Microsoft.CodeAnalysisP.ISymbol owningSymbol, Microsoft.CodeAnalysisP.SemanticModel semanticModel, Microsoft.CodeAnalysisP.Diagnostics.AnalyzerOptions options, System.Threading.CancellationToken cancellationToken) -> void
Microsoft.CodeAnalysisP.Diagnostics.CodeBlockStartAnalysisContext<TLanguageKindEnum>.Options.get -> Microsoft.CodeAnalysisP.Diagnostics.AnalyzerOptions
Microsoft.CodeAnalysisP.Diagnostics.CodeBlockStartAnalysisContext<TLanguageKindEnum>.OwningSymbol.get -> Microsoft.CodeAnalysisP.ISymbol
Microsoft.CodeAnalysisP.Diagnostics.CodeBlockStartAnalysisContext<TLanguageKindEnum>.RegisterSyntaxNodeAction(System.Action<Microsoft.CodeAnalysisP.Diagnostics.SyntaxNodeAnalysisContext> action, params TLanguageKindEnum[] syntaxKinds) -> void
Microsoft.CodeAnalysisP.Diagnostics.CodeBlockStartAnalysisContext<TLanguageKindEnum>.SemanticModel.get -> Microsoft.CodeAnalysisP.SemanticModel
Microsoft.CodeAnalysisP.Diagnostics.CompilationAnalysisContext
Microsoft.CodeAnalysisP.Diagnostics.CompilationAnalysisContext.CancellationToken.get -> System.Threading.CancellationToken
Microsoft.CodeAnalysisP.Diagnostics.CompilationAnalysisContext.Compilation.get -> Microsoft.CodeAnalysisP.Compilation
Microsoft.CodeAnalysisP.Diagnostics.CompilationAnalysisContext.CompilationAnalysisContext(Microsoft.CodeAnalysisP.Compilation compilation, Microsoft.CodeAnalysisP.Diagnostics.AnalyzerOptions options, System.Action<Microsoft.CodeAnalysisP.Diagnostic> reportDiagnostic, System.Func<Microsoft.CodeAnalysisP.Diagnostic, bool> isSupportedDiagnostic, System.Threading.CancellationToken cancellationToken) -> void
Microsoft.CodeAnalysisP.Diagnostics.CompilationAnalysisContext.Options.get -> Microsoft.CodeAnalysisP.Diagnostics.AnalyzerOptions
Microsoft.CodeAnalysisP.Diagnostics.CompilationAnalysisContext.ReportDiagnostic(Microsoft.CodeAnalysisP.Diagnostic diagnostic) -> void
Microsoft.CodeAnalysisP.Diagnostics.CompilationAnalysisContext.TryGetValue<TValue>(Microsoft.CodeAnalysisP.SyntaxTree tree, Microsoft.CodeAnalysisP.Diagnostics.SyntaxTreeValueProvider<TValue> valueProvider, out TValue value) -> bool
Microsoft.CodeAnalysisP.Diagnostics.CompilationAnalysisContext.TryGetValue<TValue>(Microsoft.CodeAnalysisP.Text.SourceText text, Microsoft.CodeAnalysisP.Diagnostics.SourceTextValueProvider<TValue> valueProvider, out TValue value) -> bool
Microsoft.CodeAnalysisP.Diagnostics.CompilationStartAnalysisContext
Microsoft.CodeAnalysisP.Diagnostics.CompilationStartAnalysisContext.CancellationToken.get -> System.Threading.CancellationToken
Microsoft.CodeAnalysisP.Diagnostics.CompilationStartAnalysisContext.Compilation.get -> Microsoft.CodeAnalysisP.Compilation
Microsoft.CodeAnalysisP.Diagnostics.CompilationStartAnalysisContext.CompilationStartAnalysisContext(Microsoft.CodeAnalysisP.Compilation compilation, Microsoft.CodeAnalysisP.Diagnostics.AnalyzerOptions options, System.Threading.CancellationToken cancellationToken) -> void
Microsoft.CodeAnalysisP.Diagnostics.CompilationStartAnalysisContext.Options.get -> Microsoft.CodeAnalysisP.Diagnostics.AnalyzerOptions
Microsoft.CodeAnalysisP.Diagnostics.CompilationStartAnalysisContext.RegisterOperationAction(System.Action<Microsoft.CodeAnalysisP.Diagnostics.OperationAnalysisContext> action, params Microsoft.CodeAnalysisP.OperationKind[] operationKinds) -> void
Microsoft.CodeAnalysisP.Diagnostics.CompilationStartAnalysisContext.RegisterSymbolAction(System.Action<Microsoft.CodeAnalysisP.Diagnostics.SymbolAnalysisContext> action, params Microsoft.CodeAnalysisP.SymbolKind[] symbolKinds) -> void
Microsoft.CodeAnalysisP.Diagnostics.CompilationStartAnalysisContext.RegisterSyntaxNodeAction<TLanguageKindEnum>(System.Action<Microsoft.CodeAnalysisP.Diagnostics.SyntaxNodeAnalysisContext> action, params TLanguageKindEnum[] syntaxKinds) -> void
Microsoft.CodeAnalysisP.Diagnostics.CompilationStartAnalysisContext.TryGetValue<TValue>(Microsoft.CodeAnalysisP.SyntaxTree tree, Microsoft.CodeAnalysisP.Diagnostics.SyntaxTreeValueProvider<TValue> valueProvider, out TValue value) -> bool
Microsoft.CodeAnalysisP.Diagnostics.CompilationStartAnalysisContext.TryGetValue<TValue>(Microsoft.CodeAnalysisP.Text.SourceText text, Microsoft.CodeAnalysisP.Diagnostics.SourceTextValueProvider<TValue> valueProvider, out TValue value) -> bool
Microsoft.CodeAnalysisP.Diagnostics.CompilationWithAnalyzers
Microsoft.CodeAnalysisP.Diagnostics.CompilationWithAnalyzers.AnalysisOptions.get -> Microsoft.CodeAnalysisP.Diagnostics.CompilationWithAnalyzersOptions
Microsoft.CodeAnalysisP.Diagnostics.CompilationWithAnalyzers.Analyzers.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Diagnostics.DiagnosticAnalyzer>
Microsoft.CodeAnalysisP.Diagnostics.CompilationWithAnalyzers.CancellationToken.get -> System.Threading.CancellationToken
Microsoft.CodeAnalysisP.Diagnostics.CompilationWithAnalyzers.Compilation.get -> Microsoft.CodeAnalysisP.Compilation
Microsoft.CodeAnalysisP.Diagnostics.CompilationWithAnalyzers.CompilationWithAnalyzers(Microsoft.CodeAnalysisP.Compilation compilation, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Diagnostics.DiagnosticAnalyzer> analyzers, Microsoft.CodeAnalysisP.Diagnostics.AnalyzerOptions options, System.Threading.CancellationToken cancellationToken) -> void
Microsoft.CodeAnalysisP.Diagnostics.CompilationWithAnalyzers.CompilationWithAnalyzers(Microsoft.CodeAnalysisP.Compilation compilation, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Diagnostics.DiagnosticAnalyzer> analyzers, Microsoft.CodeAnalysisP.Diagnostics.CompilationWithAnalyzersOptions analysisOptions) -> void
Microsoft.CodeAnalysisP.Diagnostics.CompilationWithAnalyzers.GetAllDiagnosticsAsync() -> System.Threading.Tasks.Task<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Diagnostic>>
Microsoft.CodeAnalysisP.Diagnostics.CompilationWithAnalyzers.GetAllDiagnosticsAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Diagnostic>>
Microsoft.CodeAnalysisP.Diagnostics.CompilationWithAnalyzers.GetAnalysisResultAsync(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Diagnostics.DiagnosticAnalyzer> analyzers, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.CodeAnalysisP.Diagnostics.AnalysisResult>
Microsoft.CodeAnalysisP.Diagnostics.CompilationWithAnalyzers.GetAnalysisResultAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.CodeAnalysisP.Diagnostics.AnalysisResult>
Microsoft.CodeAnalysisP.Diagnostics.CompilationWithAnalyzers.GetAnalyzerCompilationDiagnosticsAsync(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Diagnostics.DiagnosticAnalyzer> analyzers, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Diagnostic>>
Microsoft.CodeAnalysisP.Diagnostics.CompilationWithAnalyzers.GetAnalyzerCompilationDiagnosticsAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Diagnostic>>
Microsoft.CodeAnalysisP.Diagnostics.CompilationWithAnalyzers.GetAnalyzerDiagnosticsAsync() -> System.Threading.Tasks.Task<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Diagnostic>>
Microsoft.CodeAnalysisP.Diagnostics.CompilationWithAnalyzers.GetAnalyzerDiagnosticsAsync(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Diagnostics.DiagnosticAnalyzer> analyzers, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Diagnostic>>
Microsoft.CodeAnalysisP.Diagnostics.CompilationWithAnalyzers.GetAnalyzerDiagnosticsAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Diagnostic>>
Microsoft.CodeAnalysisP.Diagnostics.CompilationWithAnalyzers.GetAnalyzerSemanticDiagnosticsAsync(Microsoft.CodeAnalysisP.SemanticModel model, Microsoft.CodeAnalysisP.Text.TextSpan? filterSpan, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Diagnostics.DiagnosticAnalyzer> analyzers, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Diagnostic>>
Microsoft.CodeAnalysisP.Diagnostics.CompilationWithAnalyzers.GetAnalyzerSemanticDiagnosticsAsync(Microsoft.CodeAnalysisP.SemanticModel model, Microsoft.CodeAnalysisP.Text.TextSpan? filterSpan, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Diagnostic>>
Microsoft.CodeAnalysisP.Diagnostics.CompilationWithAnalyzers.GetAnalyzerSyntaxDiagnosticsAsync(Microsoft.CodeAnalysisP.SyntaxTree tree, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Diagnostics.DiagnosticAnalyzer> analyzers, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Diagnostic>>
Microsoft.CodeAnalysisP.Diagnostics.CompilationWithAnalyzers.GetAnalyzerSyntaxDiagnosticsAsync(Microsoft.CodeAnalysisP.SyntaxTree tree, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Diagnostic>>
Microsoft.CodeAnalysisP.Diagnostics.CompilationWithAnalyzers.GetAnalyzerTelemetryInfoAsync(Microsoft.CodeAnalysisP.Diagnostics.DiagnosticAnalyzer analyzer, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.CodeAnalysisP.Diagnostics.Telemetry.AnalyzerTelemetryInfo>
Microsoft.CodeAnalysisP.Diagnostics.CompilationWithAnalyzersOptions
Microsoft.CodeAnalysisP.Diagnostics.CompilationWithAnalyzersOptions.AnalyzerExceptionFilter.get -> System.Func<System.Exception, bool>
Microsoft.CodeAnalysisP.Diagnostics.CompilationWithAnalyzersOptions.CompilationWithAnalyzersOptions(Microsoft.CodeAnalysisP.Diagnostics.AnalyzerOptions options, System.Action<System.Exception, Microsoft.CodeAnalysisP.Diagnostics.DiagnosticAnalyzer, Microsoft.CodeAnalysisP.Diagnostic> onAnalyzerException, bool concurrentAnalysis, bool logAnalyzerExecutionTime) -> void
Microsoft.CodeAnalysisP.Diagnostics.CompilationWithAnalyzersOptions.CompilationWithAnalyzersOptions(Microsoft.CodeAnalysisP.Diagnostics.AnalyzerOptions options, System.Action<System.Exception, Microsoft.CodeAnalysisP.Diagnostics.DiagnosticAnalyzer, Microsoft.CodeAnalysisP.Diagnostic> onAnalyzerException, bool concurrentAnalysis, bool logAnalyzerExecutionTime, bool reportSuppressedDiagnostics) -> void
Microsoft.CodeAnalysisP.Diagnostics.CompilationWithAnalyzersOptions.CompilationWithAnalyzersOptions(Microsoft.CodeAnalysisP.Diagnostics.AnalyzerOptions options, System.Action<System.Exception, Microsoft.CodeAnalysisP.Diagnostics.DiagnosticAnalyzer, Microsoft.CodeAnalysisP.Diagnostic> onAnalyzerException, bool concurrentAnalysis, bool logAnalyzerExecutionTime, bool reportSuppressedDiagnostics, System.Func<System.Exception, bool> analyzerExceptionFilter) -> void
Microsoft.CodeAnalysisP.Diagnostics.CompilationWithAnalyzersOptions.ConcurrentAnalysis.get -> bool
Microsoft.CodeAnalysisP.Diagnostics.CompilationWithAnalyzersOptions.LogAnalyzerExecutionTime.get -> bool
Microsoft.CodeAnalysisP.Diagnostics.CompilationWithAnalyzersOptions.OnAnalyzerException.get -> System.Action<System.Exception, Microsoft.CodeAnalysisP.Diagnostics.DiagnosticAnalyzer, Microsoft.CodeAnalysisP.Diagnostic>
Microsoft.CodeAnalysisP.Diagnostics.CompilationWithAnalyzersOptions.Options.get -> Microsoft.CodeAnalysisP.Diagnostics.AnalyzerOptions
Microsoft.CodeAnalysisP.Diagnostics.CompilationWithAnalyzersOptions.ReportSuppressedDiagnostics.get -> bool
Microsoft.CodeAnalysisP.Diagnostics.DiagnosticAnalyzer
Microsoft.CodeAnalysisP.Diagnostics.DiagnosticAnalyzer.DiagnosticAnalyzer() -> void
Microsoft.CodeAnalysisP.Diagnostics.DiagnosticAnalyzerAttribute
Microsoft.CodeAnalysisP.Diagnostics.DiagnosticAnalyzerAttribute.DiagnosticAnalyzerAttribute(string firstLanguage, params string[] additionalLanguages) -> void
Microsoft.CodeAnalysisP.Diagnostics.DiagnosticAnalyzerAttribute.Languages.get -> string[]
Microsoft.CodeAnalysisP.Diagnostics.DiagnosticAnalyzerExtensions
Microsoft.CodeAnalysisP.Diagnostics.GeneratedCodeAnalysisFlags
Microsoft.CodeAnalysisP.Diagnostics.GeneratedCodeAnalysisFlags.Analyze = 1 -> Microsoft.CodeAnalysisP.Diagnostics.GeneratedCodeAnalysisFlags
Microsoft.CodeAnalysisP.Diagnostics.GeneratedCodeAnalysisFlags.None = 0 -> Microsoft.CodeAnalysisP.Diagnostics.GeneratedCodeAnalysisFlags
Microsoft.CodeAnalysisP.Diagnostics.GeneratedCodeAnalysisFlags.ReportDiagnostics = 2 -> Microsoft.CodeAnalysisP.Diagnostics.GeneratedCodeAnalysisFlags
Microsoft.CodeAnalysisP.Diagnostics.OperationAnalysisContext
Microsoft.CodeAnalysisP.Diagnostics.OperationAnalysisContext.CancellationToken.get -> System.Threading.CancellationToken
Microsoft.CodeAnalysisP.Diagnostics.OperationAnalysisContext.Compilation.get -> Microsoft.CodeAnalysisP.Compilation
Microsoft.CodeAnalysisP.Diagnostics.OperationAnalysisContext.ContainingSymbol.get -> Microsoft.CodeAnalysisP.ISymbol
Microsoft.CodeAnalysisP.Diagnostics.OperationAnalysisContext.Operation.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Diagnostics.OperationAnalysisContext.OperationAnalysisContext(Microsoft.CodeAnalysisP.IOperation operation, Microsoft.CodeAnalysisP.ISymbol containingSymbol, Microsoft.CodeAnalysisP.Compilation compilation, Microsoft.CodeAnalysisP.Diagnostics.AnalyzerOptions options, System.Action<Microsoft.CodeAnalysisP.Diagnostic> reportDiagnostic, System.Func<Microsoft.CodeAnalysisP.Diagnostic, bool> isSupportedDiagnostic, System.Threading.CancellationToken cancellationToken) -> void
Microsoft.CodeAnalysisP.Diagnostics.OperationAnalysisContext.Options.get -> Microsoft.CodeAnalysisP.Diagnostics.AnalyzerOptions
Microsoft.CodeAnalysisP.Diagnostics.OperationAnalysisContext.ReportDiagnostic(Microsoft.CodeAnalysisP.Diagnostic diagnostic) -> void
Microsoft.CodeAnalysisP.Diagnostics.OperationBlockAnalysisContext
Microsoft.CodeAnalysisP.Diagnostics.OperationBlockAnalysisContext.CancellationToken.get -> System.Threading.CancellationToken
Microsoft.CodeAnalysisP.Diagnostics.OperationBlockAnalysisContext.Compilation.get -> Microsoft.CodeAnalysisP.Compilation
Microsoft.CodeAnalysisP.Diagnostics.OperationBlockAnalysisContext.OperationBlockAnalysisContext(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.IOperation> operationBlocks, Microsoft.CodeAnalysisP.ISymbol owningSymbol, Microsoft.CodeAnalysisP.Compilation compilation, Microsoft.CodeAnalysisP.Diagnostics.AnalyzerOptions options, System.Action<Microsoft.CodeAnalysisP.Diagnostic> reportDiagnostic, System.Func<Microsoft.CodeAnalysisP.Diagnostic, bool> isSupportedDiagnostic, System.Threading.CancellationToken cancellationToken) -> void
Microsoft.CodeAnalysisP.Diagnostics.OperationBlockAnalysisContext.OperationBlocks.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.IOperation>
Microsoft.CodeAnalysisP.Diagnostics.OperationBlockAnalysisContext.Options.get -> Microsoft.CodeAnalysisP.Diagnostics.AnalyzerOptions
Microsoft.CodeAnalysisP.Diagnostics.OperationBlockAnalysisContext.OwningSymbol.get -> Microsoft.CodeAnalysisP.ISymbol
Microsoft.CodeAnalysisP.Diagnostics.OperationBlockAnalysisContext.ReportDiagnostic(Microsoft.CodeAnalysisP.Diagnostic diagnostic) -> void
Microsoft.CodeAnalysisP.Diagnostics.OperationBlockStartAnalysisContext
Microsoft.CodeAnalysisP.Diagnostics.OperationBlockStartAnalysisContext.CancellationToken.get -> System.Threading.CancellationToken
Microsoft.CodeAnalysisP.Diagnostics.OperationBlockStartAnalysisContext.Compilation.get -> Microsoft.CodeAnalysisP.Compilation
Microsoft.CodeAnalysisP.Diagnostics.OperationBlockStartAnalysisContext.OperationBlocks.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.IOperation>
Microsoft.CodeAnalysisP.Diagnostics.OperationBlockStartAnalysisContext.OperationBlockStartAnalysisContext(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.IOperation> operationBlocks, Microsoft.CodeAnalysisP.ISymbol owningSymbol, Microsoft.CodeAnalysisP.Compilation compilation, Microsoft.CodeAnalysisP.Diagnostics.AnalyzerOptions options, System.Threading.CancellationToken cancellationToken) -> void
Microsoft.CodeAnalysisP.Diagnostics.OperationBlockStartAnalysisContext.Options.get -> Microsoft.CodeAnalysisP.Diagnostics.AnalyzerOptions
Microsoft.CodeAnalysisP.Diagnostics.OperationBlockStartAnalysisContext.OwningSymbol.get -> Microsoft.CodeAnalysisP.ISymbol
Microsoft.CodeAnalysisP.Diagnostics.OperationBlockStartAnalysisContext.RegisterOperationAction(System.Action<Microsoft.CodeAnalysisP.Diagnostics.OperationAnalysisContext> action, params Microsoft.CodeAnalysisP.OperationKind[] operationKinds) -> void
Microsoft.CodeAnalysisP.Diagnostics.SemanticModelAnalysisContext
Microsoft.CodeAnalysisP.Diagnostics.SemanticModelAnalysisContext.CancellationToken.get -> System.Threading.CancellationToken
Microsoft.CodeAnalysisP.Diagnostics.SemanticModelAnalysisContext.Options.get -> Microsoft.CodeAnalysisP.Diagnostics.AnalyzerOptions
Microsoft.CodeAnalysisP.Diagnostics.SemanticModelAnalysisContext.ReportDiagnostic(Microsoft.CodeAnalysisP.Diagnostic diagnostic) -> void
Microsoft.CodeAnalysisP.Diagnostics.SemanticModelAnalysisContext.SemanticModel.get -> Microsoft.CodeAnalysisP.SemanticModel
Microsoft.CodeAnalysisP.Diagnostics.SemanticModelAnalysisContext.SemanticModelAnalysisContext(Microsoft.CodeAnalysisP.SemanticModel semanticModel, Microsoft.CodeAnalysisP.Diagnostics.AnalyzerOptions options, System.Action<Microsoft.CodeAnalysisP.Diagnostic> reportDiagnostic, System.Func<Microsoft.CodeAnalysisP.Diagnostic, bool> isSupportedDiagnostic, System.Threading.CancellationToken cancellationToken) -> void
Microsoft.CodeAnalysisP.Diagnostics.SourceTextValueProvider<TValue>
Microsoft.CodeAnalysisP.Diagnostics.SourceTextValueProvider<TValue>.SourceTextValueProvider(System.Func<Microsoft.CodeAnalysisP.Text.SourceText, TValue> computeValue, System.Collections.Generic.IEqualityComparer<Microsoft.CodeAnalysisP.Text.SourceText> sourceTextComparer = null) -> void
Microsoft.CodeAnalysisP.Diagnostics.SuppressionInfo
Microsoft.CodeAnalysisP.Diagnostics.SuppressionInfo.Attribute.get -> Microsoft.CodeAnalysisP.AttributeData
Microsoft.CodeAnalysisP.Diagnostics.SuppressionInfo.Id.get -> string
Microsoft.CodeAnalysisP.Diagnostics.SymbolAnalysisContext
Microsoft.CodeAnalysisP.Diagnostics.SymbolAnalysisContext.CancellationToken.get -> System.Threading.CancellationToken
Microsoft.CodeAnalysisP.Diagnostics.SymbolAnalysisContext.Compilation.get -> Microsoft.CodeAnalysisP.Compilation
Microsoft.CodeAnalysisP.Diagnostics.SymbolAnalysisContext.Options.get -> Microsoft.CodeAnalysisP.Diagnostics.AnalyzerOptions
Microsoft.CodeAnalysisP.Diagnostics.SymbolAnalysisContext.ReportDiagnostic(Microsoft.CodeAnalysisP.Diagnostic diagnostic) -> void
Microsoft.CodeAnalysisP.Diagnostics.SymbolAnalysisContext.Symbol.get -> Microsoft.CodeAnalysisP.ISymbol
Microsoft.CodeAnalysisP.Diagnostics.SymbolAnalysisContext.SymbolAnalysisContext(Microsoft.CodeAnalysisP.ISymbol symbol, Microsoft.CodeAnalysisP.Compilation compilation, Microsoft.CodeAnalysisP.Diagnostics.AnalyzerOptions options, System.Action<Microsoft.CodeAnalysisP.Diagnostic> reportDiagnostic, System.Func<Microsoft.CodeAnalysisP.Diagnostic, bool> isSupportedDiagnostic, System.Threading.CancellationToken cancellationToken) -> void
Microsoft.CodeAnalysisP.Diagnostics.SyntaxNodeAnalysisContext
Microsoft.CodeAnalysisP.Diagnostics.SyntaxNodeAnalysisContext.CancellationToken.get -> System.Threading.CancellationToken
Microsoft.CodeAnalysisP.Diagnostics.SyntaxNodeAnalysisContext.Compilation.get -> Microsoft.CodeAnalysisP.Compilation
Microsoft.CodeAnalysisP.Diagnostics.SyntaxNodeAnalysisContext.ContainingSymbol.get -> Microsoft.CodeAnalysisP.ISymbol
Microsoft.CodeAnalysisP.Diagnostics.SyntaxNodeAnalysisContext.Node.get -> Microsoft.CodeAnalysisP.SyntaxNode
Microsoft.CodeAnalysisP.Diagnostics.SyntaxNodeAnalysisContext.Options.get -> Microsoft.CodeAnalysisP.Diagnostics.AnalyzerOptions
Microsoft.CodeAnalysisP.Diagnostics.SyntaxNodeAnalysisContext.ReportDiagnostic(Microsoft.CodeAnalysisP.Diagnostic diagnostic) -> void
Microsoft.CodeAnalysisP.Diagnostics.SyntaxNodeAnalysisContext.SemanticModel.get -> Microsoft.CodeAnalysisP.SemanticModel
Microsoft.CodeAnalysisP.Diagnostics.SyntaxNodeAnalysisContext.SyntaxNodeAnalysisContext(Microsoft.CodeAnalysisP.SyntaxNode node, Microsoft.CodeAnalysisP.ISymbol containingSymbol, Microsoft.CodeAnalysisP.SemanticModel semanticModel, Microsoft.CodeAnalysisP.Diagnostics.AnalyzerOptions options, System.Action<Microsoft.CodeAnalysisP.Diagnostic> reportDiagnostic, System.Func<Microsoft.CodeAnalysisP.Diagnostic, bool> isSupportedDiagnostic, System.Threading.CancellationToken cancellationToken) -> void
Microsoft.CodeAnalysisP.Diagnostics.SyntaxNodeAnalysisContext.SyntaxNodeAnalysisContext(Microsoft.CodeAnalysisP.SyntaxNode node, Microsoft.CodeAnalysisP.SemanticModel semanticModel, Microsoft.CodeAnalysisP.Diagnostics.AnalyzerOptions options, System.Action<Microsoft.CodeAnalysisP.Diagnostic> reportDiagnostic, System.Func<Microsoft.CodeAnalysisP.Diagnostic, bool> isSupportedDiagnostic, System.Threading.CancellationToken cancellationToken) -> void
Microsoft.CodeAnalysisP.Diagnostics.SyntaxTreeAnalysisContext
Microsoft.CodeAnalysisP.Diagnostics.SyntaxTreeAnalysisContext.CancellationToken.get -> System.Threading.CancellationToken
Microsoft.CodeAnalysisP.Diagnostics.SyntaxTreeAnalysisContext.Options.get -> Microsoft.CodeAnalysisP.Diagnostics.AnalyzerOptions
Microsoft.CodeAnalysisP.Diagnostics.SyntaxTreeAnalysisContext.ReportDiagnostic(Microsoft.CodeAnalysisP.Diagnostic diagnostic) -> void
Microsoft.CodeAnalysisP.Diagnostics.SyntaxTreeAnalysisContext.SyntaxTreeAnalysisContext(Microsoft.CodeAnalysisP.SyntaxTree tree, Microsoft.CodeAnalysisP.Diagnostics.AnalyzerOptions options, System.Action<Microsoft.CodeAnalysisP.Diagnostic> reportDiagnostic, System.Func<Microsoft.CodeAnalysisP.Diagnostic, bool> isSupportedDiagnostic, System.Threading.CancellationToken cancellationToken) -> void
Microsoft.CodeAnalysisP.Diagnostics.SyntaxTreeAnalysisContext.Tree.get -> Microsoft.CodeAnalysisP.SyntaxTree
Microsoft.CodeAnalysisP.Diagnostics.SyntaxTreeValueProvider<TValue>
Microsoft.CodeAnalysisP.Diagnostics.SyntaxTreeValueProvider<TValue>.SyntaxTreeValueProvider(System.Func<Microsoft.CodeAnalysisP.SyntaxTree, TValue> computeValue, System.Collections.Generic.IEqualityComparer<Microsoft.CodeAnalysisP.SyntaxTree> syntaxTreeComparer = null) -> void
Microsoft.CodeAnalysisP.Diagnostics.Telemetry.AnalyzerTelemetryInfo
Microsoft.CodeAnalysisP.Diagnostics.Telemetry.AnalyzerTelemetryInfo.AnalyzerTelemetryInfo() -> void
Microsoft.CodeAnalysisP.Diagnostics.Telemetry.AnalyzerTelemetryInfo.CodeBlockActionsCount.get -> int
Microsoft.CodeAnalysisP.Diagnostics.Telemetry.AnalyzerTelemetryInfo.CodeBlockActionsCount.set -> void
Microsoft.CodeAnalysisP.Diagnostics.Telemetry.AnalyzerTelemetryInfo.CodeBlockEndActionsCount.get -> int
Microsoft.CodeAnalysisP.Diagnostics.Telemetry.AnalyzerTelemetryInfo.CodeBlockEndActionsCount.set -> void
Microsoft.CodeAnalysisP.Diagnostics.Telemetry.AnalyzerTelemetryInfo.CodeBlockStartActionsCount.get -> int
Microsoft.CodeAnalysisP.Diagnostics.Telemetry.AnalyzerTelemetryInfo.CodeBlockStartActionsCount.set -> void
Microsoft.CodeAnalysisP.Diagnostics.Telemetry.AnalyzerTelemetryInfo.CompilationActionsCount.get -> int
Microsoft.CodeAnalysisP.Diagnostics.Telemetry.AnalyzerTelemetryInfo.CompilationActionsCount.set -> void
Microsoft.CodeAnalysisP.Diagnostics.Telemetry.AnalyzerTelemetryInfo.CompilationEndActionsCount.get -> int
Microsoft.CodeAnalysisP.Diagnostics.Telemetry.AnalyzerTelemetryInfo.CompilationEndActionsCount.set -> void
Microsoft.CodeAnalysisP.Diagnostics.Telemetry.AnalyzerTelemetryInfo.CompilationStartActionsCount.get -> int
Microsoft.CodeAnalysisP.Diagnostics.Telemetry.AnalyzerTelemetryInfo.CompilationStartActionsCount.set -> void
Microsoft.CodeAnalysisP.Diagnostics.Telemetry.AnalyzerTelemetryInfo.ExecutionTime.get -> System.TimeSpan
Microsoft.CodeAnalysisP.Diagnostics.Telemetry.AnalyzerTelemetryInfo.ExecutionTime.set -> void
Microsoft.CodeAnalysisP.Diagnostics.Telemetry.AnalyzerTelemetryInfo.OperationActionsCount.get -> int
Microsoft.CodeAnalysisP.Diagnostics.Telemetry.AnalyzerTelemetryInfo.OperationActionsCount.set -> void
Microsoft.CodeAnalysisP.Diagnostics.Telemetry.AnalyzerTelemetryInfo.OperationBlockActionsCount.get -> int
Microsoft.CodeAnalysisP.Diagnostics.Telemetry.AnalyzerTelemetryInfo.OperationBlockActionsCount.set -> void
Microsoft.CodeAnalysisP.Diagnostics.Telemetry.AnalyzerTelemetryInfo.OperationBlockEndActionsCount.get -> int
Microsoft.CodeAnalysisP.Diagnostics.Telemetry.AnalyzerTelemetryInfo.OperationBlockEndActionsCount.set -> void
Microsoft.CodeAnalysisP.Diagnostics.Telemetry.AnalyzerTelemetryInfo.OperationBlockStartActionsCount.get -> int
Microsoft.CodeAnalysisP.Diagnostics.Telemetry.AnalyzerTelemetryInfo.OperationBlockStartActionsCount.set -> void
Microsoft.CodeAnalysisP.Diagnostics.Telemetry.AnalyzerTelemetryInfo.SemanticModelActionsCount.get -> int
Microsoft.CodeAnalysisP.Diagnostics.Telemetry.AnalyzerTelemetryInfo.SemanticModelActionsCount.set -> void
Microsoft.CodeAnalysisP.Diagnostics.Telemetry.AnalyzerTelemetryInfo.SymbolActionsCount.get -> int
Microsoft.CodeAnalysisP.Diagnostics.Telemetry.AnalyzerTelemetryInfo.SymbolActionsCount.set -> void
Microsoft.CodeAnalysisP.Diagnostics.Telemetry.AnalyzerTelemetryInfo.SyntaxNodeActionsCount.get -> int
Microsoft.CodeAnalysisP.Diagnostics.Telemetry.AnalyzerTelemetryInfo.SyntaxNodeActionsCount.set -> void
Microsoft.CodeAnalysisP.Diagnostics.Telemetry.AnalyzerTelemetryInfo.SyntaxTreeActionsCount.get -> int
Microsoft.CodeAnalysisP.Diagnostics.Telemetry.AnalyzerTelemetryInfo.SyntaxTreeActionsCount.set -> void
Microsoft.CodeAnalysisP.Diagnostics.UnresolvedAnalyzerReference
Microsoft.CodeAnalysisP.Diagnostics.UnresolvedAnalyzerReference.UnresolvedAnalyzerReference(string unresolvedPath) -> void
Microsoft.CodeAnalysisP.DiagnosticSeverity
Microsoft.CodeAnalysisP.DiagnosticSeverity.Error = 3 -> Microsoft.CodeAnalysisP.DiagnosticSeverity
Microsoft.CodeAnalysisP.DiagnosticSeverity.Hidden = 0 -> Microsoft.CodeAnalysisP.DiagnosticSeverity
Microsoft.CodeAnalysisP.DiagnosticSeverity.Info = 1 -> Microsoft.CodeAnalysisP.DiagnosticSeverity
Microsoft.CodeAnalysisP.DiagnosticSeverity.Warning = 2 -> Microsoft.CodeAnalysisP.DiagnosticSeverity
Microsoft.CodeAnalysisP.DllImportData
Microsoft.CodeAnalysisP.DllImportData.BestFitMapping.get -> bool?
Microsoft.CodeAnalysisP.DllImportData.CallingConvention.get -> System.Runtime.InteropServices.CallingConvention
Microsoft.CodeAnalysisP.DllImportData.CharacterSet.get -> System.Runtime.InteropServices.CharSet
Microsoft.CodeAnalysisP.DllImportData.EntryPointName.get -> string
Microsoft.CodeAnalysisP.DllImportData.ExactSpelling.get -> bool
Microsoft.CodeAnalysisP.DllImportData.ModuleName.get -> string
Microsoft.CodeAnalysisP.DllImportData.SetLastError.get -> bool
Microsoft.CodeAnalysisP.DllImportData.ThrowOnUnmappableCharacter.get -> bool?
Microsoft.CodeAnalysisP.DocumentationCommentId
Microsoft.CodeAnalysisP.DocumentationMode
Microsoft.CodeAnalysisP.DocumentationMode.Diagnose = 2 -> Microsoft.CodeAnalysisP.DocumentationMode
Microsoft.CodeAnalysisP.DocumentationMode.None = 0 -> Microsoft.CodeAnalysisP.DocumentationMode
Microsoft.CodeAnalysisP.DocumentationMode.Parse = 1 -> Microsoft.CodeAnalysisP.DocumentationMode
Microsoft.CodeAnalysisP.DocumentationProvider
Microsoft.CodeAnalysisP.DocumentationProvider.DocumentationProvider() -> void
Microsoft.CodeAnalysisP.EmbeddedText
Microsoft.CodeAnalysisP.EmbeddedText.Checksum.get -> System.Collections.Immutable.ImmutableArray<byte>
Microsoft.CodeAnalysisP.EmbeddedText.ChecksumAlgorithm.get -> Microsoft.CodeAnalysisP.Text.SourceHashAlgorithm
Microsoft.CodeAnalysisP.EmbeddedText.FilePath.get -> string
Microsoft.CodeAnalysisP.Emit.DebugInformationFormat
Microsoft.CodeAnalysisP.Emit.DebugInformationFormat.Embedded = 3 -> Microsoft.CodeAnalysisP.Emit.DebugInformationFormat
Microsoft.CodeAnalysisP.Emit.DebugInformationFormat.Pdb = 1 -> Microsoft.CodeAnalysisP.Emit.DebugInformationFormat
Microsoft.CodeAnalysisP.Emit.DebugInformationFormat.PortablePdb = 2 -> Microsoft.CodeAnalysisP.Emit.DebugInformationFormat
Microsoft.CodeAnalysisP.Emit.EditAndContinueMethodDebugInformation
Microsoft.CodeAnalysisP.Emit.EmitBaseline
Microsoft.CodeAnalysisP.Emit.EmitBaseline.OriginalMetadata.get -> Microsoft.CodeAnalysisP.ModuleMetadata
Microsoft.CodeAnalysisP.Emit.EmitDifferenceResult
Microsoft.CodeAnalysisP.Emit.EmitDifferenceResult.Baseline.get -> Microsoft.CodeAnalysisP.Emit.EmitBaseline
Microsoft.CodeAnalysisP.Emit.EmitOptions
Microsoft.CodeAnalysisP.Emit.EmitOptions.BaseAddress.get -> ulong
Microsoft.CodeAnalysisP.Emit.EmitOptions.DebugInformationFormat.get -> Microsoft.CodeAnalysisP.Emit.DebugInformationFormat
Microsoft.CodeAnalysisP.Emit.EmitOptions.EmitMetadataOnly.get -> bool
Microsoft.CodeAnalysisP.Emit.EmitOptions.EmitOptions(bool metadataOnly = false, Microsoft.CodeAnalysisP.Emit.DebugInformationFormat debugInformationFormat = (Microsoft.CodeAnalysisP.Emit.DebugInformationFormat)0, string pdbFilePath = null, string outputNameOverride = null, int fileAlignment = 0, ulong baseAddress = 0, bool highEntropyVirtualAddressSpace = false, Microsoft.CodeAnalysisP.SubsystemVersion subsystemVersion = default(Microsoft.CodeAnalysisP.SubsystemVersion), string runtimeMetadataVersion = null, bool tolerateErrors = false, bool includePrivateMembers = true, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Emit.InstrumentationKind> instrumentationKinds = default(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Emit.InstrumentationKind>), System.Security.Cryptography.HashAlgorithmName? pdbChecksumAlgorithm = null) -> void
Microsoft.CodeAnalysisP.Emit.EmitOptions.EmitOptions(bool metadataOnly, Microsoft.CodeAnalysisP.Emit.DebugInformationFormat debugInformationFormat, string pdbFilePath, string outputNameOverride, int fileAlignment, ulong baseAddress, bool highEntropyVirtualAddressSpace, Microsoft.CodeAnalysisP.SubsystemVersion subsystemVersion, string runtimeMetadataVersion, bool tolerateErrors, bool includePrivateMembers) -> void
Microsoft.CodeAnalysisP.Emit.EmitOptions.EmitOptions(bool metadataOnly, Microsoft.CodeAnalysisP.Emit.DebugInformationFormat debugInformationFormat, string pdbFilePath, string outputNameOverride, int fileAlignment, ulong baseAddress, bool highEntropyVirtualAddressSpace, Microsoft.CodeAnalysisP.SubsystemVersion subsystemVersion, string runtimeMetadataVersion, bool tolerateErrors, bool includePrivateMembers, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Emit.InstrumentationKind> instrumentationKinds) -> void
Microsoft.CodeAnalysisP.Emit.EmitOptions.Equals(Microsoft.CodeAnalysisP.Emit.EmitOptions other) -> bool
Microsoft.CodeAnalysisP.Emit.EmitOptions.FileAlignment.get -> int
Microsoft.CodeAnalysisP.Emit.EmitOptions.HighEntropyVirtualAddressSpace.get -> bool
Microsoft.CodeAnalysisP.Emit.EmitOptions.IncludePrivateMembers.get -> bool
Microsoft.CodeAnalysisP.Emit.EmitOptions.InstrumentationKinds.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Emit.InstrumentationKind>
Microsoft.CodeAnalysisP.Emit.EmitOptions.OutputNameOverride.get -> string
Microsoft.CodeAnalysisP.Emit.EmitOptions.PdbChecksumAlgorithm.get -> System.Security.Cryptography.HashAlgorithmName
Microsoft.CodeAnalysisP.Emit.EmitOptions.PdbFilePath.get -> string
Microsoft.CodeAnalysisP.Emit.EmitOptions.RuntimeMetadataVersion.get -> string
Microsoft.CodeAnalysisP.Emit.EmitOptions.SubsystemVersion.get -> Microsoft.CodeAnalysisP.SubsystemVersion
Microsoft.CodeAnalysisP.Emit.EmitOptions.TolerateErrors.get -> bool
Microsoft.CodeAnalysisP.Emit.EmitOptions.WithBaseAddress(ulong value) -> Microsoft.CodeAnalysisP.Emit.EmitOptions
Microsoft.CodeAnalysisP.Emit.EmitOptions.WithDebugInformationFormat(Microsoft.CodeAnalysisP.Emit.DebugInformationFormat format) -> Microsoft.CodeAnalysisP.Emit.EmitOptions
Microsoft.CodeAnalysisP.Emit.EmitOptions.WithEmitMetadataOnly(bool value) -> Microsoft.CodeAnalysisP.Emit.EmitOptions
Microsoft.CodeAnalysisP.Emit.EmitOptions.WithFileAlignment(int value) -> Microsoft.CodeAnalysisP.Emit.EmitOptions
Microsoft.CodeAnalysisP.Emit.EmitOptions.WithHighEntropyVirtualAddressSpace(bool value) -> Microsoft.CodeAnalysisP.Emit.EmitOptions
Microsoft.CodeAnalysisP.Emit.EmitOptions.WithIncludePrivateMembers(bool value) -> Microsoft.CodeAnalysisP.Emit.EmitOptions
Microsoft.CodeAnalysisP.Emit.EmitOptions.WithInstrumentationKinds(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Emit.InstrumentationKind> instrumentationKinds) -> Microsoft.CodeAnalysisP.Emit.EmitOptions
Microsoft.CodeAnalysisP.Emit.EmitOptions.WithOutputNameOverride(string outputName) -> Microsoft.CodeAnalysisP.Emit.EmitOptions
Microsoft.CodeAnalysisP.Emit.EmitOptions.WithPdbChecksumAlgorithm(System.Security.Cryptography.HashAlgorithmName name) -> Microsoft.CodeAnalysisP.Emit.EmitOptions
Microsoft.CodeAnalysisP.Emit.EmitOptions.WithPdbFilePath(string path) -> Microsoft.CodeAnalysisP.Emit.EmitOptions
Microsoft.CodeAnalysisP.Emit.EmitOptions.WithRuntimeMetadataVersion(string version) -> Microsoft.CodeAnalysisP.Emit.EmitOptions
Microsoft.CodeAnalysisP.Emit.EmitOptions.WithSubsystemVersion(Microsoft.CodeAnalysisP.SubsystemVersion subsystemVersion) -> Microsoft.CodeAnalysisP.Emit.EmitOptions
Microsoft.CodeAnalysisP.Emit.EmitOptions.WithTolerateErrors(bool value) -> Microsoft.CodeAnalysisP.Emit.EmitOptions
Microsoft.CodeAnalysisP.Emit.EmitResult
Microsoft.CodeAnalysisP.Emit.EmitResult.Diagnostics.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Diagnostic>
Microsoft.CodeAnalysisP.Emit.EmitResult.Success.get -> bool
Microsoft.CodeAnalysisP.Emit.InstrumentationKind
Microsoft.CodeAnalysisP.Emit.InstrumentationKind.None = 0 -> Microsoft.CodeAnalysisP.Emit.InstrumentationKind
Microsoft.CodeAnalysisP.Emit.InstrumentationKind.TestCoverage = 1 -> Microsoft.CodeAnalysisP.Emit.InstrumentationKind
Microsoft.CodeAnalysisP.Emit.SemanticEdit
Microsoft.CodeAnalysisP.Emit.SemanticEdit.Equals(Microsoft.CodeAnalysisP.Emit.SemanticEdit other) -> bool
Microsoft.CodeAnalysisP.Emit.SemanticEdit.Kind.get -> Microsoft.CodeAnalysisP.Emit.SemanticEditKind
Microsoft.CodeAnalysisP.Emit.SemanticEdit.NewSymbol.get -> Microsoft.CodeAnalysisP.ISymbol
Microsoft.CodeAnalysisP.Emit.SemanticEdit.OldSymbol.get -> Microsoft.CodeAnalysisP.ISymbol
Microsoft.CodeAnalysisP.Emit.SemanticEdit.PreserveLocalVariables.get -> bool
Microsoft.CodeAnalysisP.Emit.SemanticEdit.SemanticEdit(Microsoft.CodeAnalysisP.Emit.SemanticEditKind kind, Microsoft.CodeAnalysisP.ISymbol oldSymbol, Microsoft.CodeAnalysisP.ISymbol newSymbol, System.Func<Microsoft.CodeAnalysisP.SyntaxNode, Microsoft.CodeAnalysisP.SyntaxNode> syntaxMap = null, bool preserveLocalVariables = false) -> void
Microsoft.CodeAnalysisP.Emit.SemanticEdit.SyntaxMap.get -> System.Func<Microsoft.CodeAnalysisP.SyntaxNode, Microsoft.CodeAnalysisP.SyntaxNode>
Microsoft.CodeAnalysisP.Emit.SemanticEditKind
Microsoft.CodeAnalysisP.Emit.SemanticEditKind.Delete = 3 -> Microsoft.CodeAnalysisP.Emit.SemanticEditKind
Microsoft.CodeAnalysisP.Emit.SemanticEditKind.Insert = 2 -> Microsoft.CodeAnalysisP.Emit.SemanticEditKind
Microsoft.CodeAnalysisP.Emit.SemanticEditKind.None = 0 -> Microsoft.CodeAnalysisP.Emit.SemanticEditKind
Microsoft.CodeAnalysisP.Emit.SemanticEditKind.Update = 1 -> Microsoft.CodeAnalysisP.Emit.SemanticEditKind
Microsoft.CodeAnalysisP.FileLinePositionSpan
Microsoft.CodeAnalysisP.FileLinePositionSpan.EndLinePosition.get -> Microsoft.CodeAnalysisP.Text.LinePosition
Microsoft.CodeAnalysisP.FileLinePositionSpan.Equals(Microsoft.CodeAnalysisP.FileLinePositionSpan other) -> bool
Microsoft.CodeAnalysisP.FileLinePositionSpan.FileLinePositionSpan(string path, Microsoft.CodeAnalysisP.Text.LinePosition start, Microsoft.CodeAnalysisP.Text.LinePosition end) -> void
Microsoft.CodeAnalysisP.FileLinePositionSpan.FileLinePositionSpan(string path, Microsoft.CodeAnalysisP.Text.LinePositionSpan span) -> void
Microsoft.CodeAnalysisP.FileLinePositionSpan.HasMappedPath.get -> bool
Microsoft.CodeAnalysisP.FileLinePositionSpan.IsValid.get -> bool
Microsoft.CodeAnalysisP.FileLinePositionSpan.Path.get -> string
Microsoft.CodeAnalysisP.FileLinePositionSpan.Span.get -> Microsoft.CodeAnalysisP.Text.LinePositionSpan
Microsoft.CodeAnalysisP.FileLinePositionSpan.StartLinePosition.get -> Microsoft.CodeAnalysisP.Text.LinePosition
Microsoft.CodeAnalysisP.FileSystemExtensions
Microsoft.CodeAnalysisP.IAliasSymbol
Microsoft.CodeAnalysisP.IAliasSymbol.Target.get -> Microsoft.CodeAnalysisP.INamespaceOrTypeSymbol
Microsoft.CodeAnalysisP.IAnalyzerAssemblyLoader
Microsoft.CodeAnalysisP.IAnalyzerAssemblyLoader.AddDependencyLocation(string fullPath) -> void
Microsoft.CodeAnalysisP.IAnalyzerAssemblyLoader.LoadFromPath(string fullPath) -> System.Reflection.Assembly
Microsoft.CodeAnalysisP.IArrayTypeSymbol
Microsoft.CodeAnalysisP.IArrayTypeSymbol.CustomModifiers.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.CustomModifier>
Microsoft.CodeAnalysisP.IArrayTypeSymbol.ElementType.get -> Microsoft.CodeAnalysisP.ITypeSymbol
Microsoft.CodeAnalysisP.IArrayTypeSymbol.Equals(Microsoft.CodeAnalysisP.IArrayTypeSymbol other) -> bool
Microsoft.CodeAnalysisP.IArrayTypeSymbol.IsSZArray.get -> bool
Microsoft.CodeAnalysisP.IArrayTypeSymbol.LowerBounds.get -> System.Collections.Immutable.ImmutableArray<int>
Microsoft.CodeAnalysisP.IArrayTypeSymbol.Rank.get -> int
Microsoft.CodeAnalysisP.IArrayTypeSymbol.Sizes.get -> System.Collections.Immutable.ImmutableArray<int>
Microsoft.CodeAnalysisP.IAssemblySymbol
Microsoft.CodeAnalysisP.IAssemblySymbol.GetMetadata() -> Microsoft.CodeAnalysisP.AssemblyMetadata
Microsoft.CodeAnalysisP.IAssemblySymbol.GetTypeByMetadataName(string fullyQualifiedMetadataName) -> Microsoft.CodeAnalysisP.INamedTypeSymbol
Microsoft.CodeAnalysisP.IAssemblySymbol.GivesAccessTo(Microsoft.CodeAnalysisP.IAssemblySymbol toAssembly) -> bool
Microsoft.CodeAnalysisP.IAssemblySymbol.GlobalNamespace.get -> Microsoft.CodeAnalysisP.INamespaceSymbol
Microsoft.CodeAnalysisP.IAssemblySymbol.Identity.get -> Microsoft.CodeAnalysisP.AssemblyIdentity
Microsoft.CodeAnalysisP.IAssemblySymbol.IsInteractive.get -> bool
Microsoft.CodeAnalysisP.IAssemblySymbol.MightContainExtensionMethods.get -> bool
Microsoft.CodeAnalysisP.IAssemblySymbol.Modules.get -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.IModuleSymbol>
Microsoft.CodeAnalysisP.IAssemblySymbol.NamespaceNames.get -> System.Collections.Generic.ICollection<string>
Microsoft.CodeAnalysisP.IAssemblySymbol.ResolveForwardedType(string fullyQualifiedMetadataName) -> Microsoft.CodeAnalysisP.INamedTypeSymbol
Microsoft.CodeAnalysisP.IAssemblySymbol.TypeNames.get -> System.Collections.Generic.ICollection<string>
Microsoft.CodeAnalysisP.ICompilationUnitSyntax
Microsoft.CodeAnalysisP.ICompilationUnitSyntax.EndOfFileToken.get -> Microsoft.CodeAnalysisP.SyntaxToken
Microsoft.CodeAnalysisP.IDiscardSymbol
Microsoft.CodeAnalysisP.IDiscardSymbol.Type.get -> Microsoft.CodeAnalysisP.ITypeSymbol
Microsoft.CodeAnalysisP.IDynamicTypeSymbol
Microsoft.CodeAnalysisP.IErrorTypeSymbol
Microsoft.CodeAnalysisP.IErrorTypeSymbol.CandidateReason.get -> Microsoft.CodeAnalysisP.CandidateReason
Microsoft.CodeAnalysisP.IErrorTypeSymbol.CandidateSymbols.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ISymbol>
Microsoft.CodeAnalysisP.IEventSymbol
Microsoft.CodeAnalysisP.IEventSymbol.AddMethod.get -> Microsoft.CodeAnalysisP.IMethodSymbol
Microsoft.CodeAnalysisP.IEventSymbol.ExplicitInterfaceImplementations.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.IEventSymbol>
Microsoft.CodeAnalysisP.IEventSymbol.IsWindowsRuntimeEvent.get -> bool
Microsoft.CodeAnalysisP.IEventSymbol.OriginalDefinition.get -> Microsoft.CodeAnalysisP.IEventSymbol
Microsoft.CodeAnalysisP.IEventSymbol.OverriddenEvent.get -> Microsoft.CodeAnalysisP.IEventSymbol
Microsoft.CodeAnalysisP.IEventSymbol.RaiseMethod.get -> Microsoft.CodeAnalysisP.IMethodSymbol
Microsoft.CodeAnalysisP.IEventSymbol.RemoveMethod.get -> Microsoft.CodeAnalysisP.IMethodSymbol
Microsoft.CodeAnalysisP.IEventSymbol.Type.get -> Microsoft.CodeAnalysisP.ITypeSymbol
Microsoft.CodeAnalysisP.IFieldSymbol
Microsoft.CodeAnalysisP.IFieldSymbol.AssociatedSymbol.get -> Microsoft.CodeAnalysisP.ISymbol
Microsoft.CodeAnalysisP.IFieldSymbol.ConstantValue.get -> object
Microsoft.CodeAnalysisP.IFieldSymbol.CorrespondingTupleField.get -> Microsoft.CodeAnalysisP.IFieldSymbol
Microsoft.CodeAnalysisP.IFieldSymbol.CustomModifiers.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.CustomModifier>
Microsoft.CodeAnalysisP.IFieldSymbol.HasConstantValue.get -> bool
Microsoft.CodeAnalysisP.IFieldSymbol.IsConst.get -> bool
Microsoft.CodeAnalysisP.IFieldSymbol.IsReadOnly.get -> bool
Microsoft.CodeAnalysisP.IFieldSymbol.IsVolatile.get -> bool
Microsoft.CodeAnalysisP.IFieldSymbol.OriginalDefinition.get -> Microsoft.CodeAnalysisP.IFieldSymbol
Microsoft.CodeAnalysisP.IFieldSymbol.Type.get -> Microsoft.CodeAnalysisP.ITypeSymbol
Microsoft.CodeAnalysisP.ILabelSymbol
Microsoft.CodeAnalysisP.ILabelSymbol.ContainingMethod.get -> Microsoft.CodeAnalysisP.IMethodSymbol
Microsoft.CodeAnalysisP.ILocalSymbol
Microsoft.CodeAnalysisP.ILocalSymbol.ConstantValue.get -> object
Microsoft.CodeAnalysisP.ILocalSymbol.HasConstantValue.get -> bool
Microsoft.CodeAnalysisP.ILocalSymbol.IsConst.get -> bool
Microsoft.CodeAnalysisP.ILocalSymbol.IsFunctionValue.get -> bool
Microsoft.CodeAnalysisP.ILocalSymbol.IsRef.get -> bool
Microsoft.CodeAnalysisP.ILocalSymbol.RefKind.get -> Microsoft.CodeAnalysisP.RefKind
Microsoft.CodeAnalysisP.ILocalSymbol.Type.get -> Microsoft.CodeAnalysisP.ITypeSymbol
Microsoft.CodeAnalysisP.IMethodSymbol
Microsoft.CodeAnalysisP.IMethodSymbol.Arity.get -> int
Microsoft.CodeAnalysisP.IMethodSymbol.AssociatedAnonymousDelegate.get -> Microsoft.CodeAnalysisP.INamedTypeSymbol
Microsoft.CodeAnalysisP.IMethodSymbol.AssociatedSymbol.get -> Microsoft.CodeAnalysisP.ISymbol
Microsoft.CodeAnalysisP.IMethodSymbol.Construct(params Microsoft.CodeAnalysisP.ITypeSymbol[] typeArguments) -> Microsoft.CodeAnalysisP.IMethodSymbol
Microsoft.CodeAnalysisP.IMethodSymbol.ConstructedFrom.get -> Microsoft.CodeAnalysisP.IMethodSymbol
Microsoft.CodeAnalysisP.IMethodSymbol.ExplicitInterfaceImplementations.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.IMethodSymbol>
Microsoft.CodeAnalysisP.IMethodSymbol.GetDllImportData() -> Microsoft.CodeAnalysisP.DllImportData
Microsoft.CodeAnalysisP.IMethodSymbol.GetReturnTypeAttributes() -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.AttributeData>
Microsoft.CodeAnalysisP.IMethodSymbol.GetTypeInferredDuringReduction(Microsoft.CodeAnalysisP.ITypeParameterSymbol reducedFromTypeParameter) -> Microsoft.CodeAnalysisP.ITypeSymbol
Microsoft.CodeAnalysisP.IMethodSymbol.HidesBaseMethodsByName.get -> bool
Microsoft.CodeAnalysisP.IMethodSymbol.IsAsync.get -> bool
Microsoft.CodeAnalysisP.IMethodSymbol.IsCheckedBuiltin.get -> bool
Microsoft.CodeAnalysisP.IMethodSymbol.IsExtensionMethod.get -> bool
Microsoft.CodeAnalysisP.IMethodSymbol.IsGenericMethod.get -> bool
Microsoft.CodeAnalysisP.IMethodSymbol.IsVararg.get -> bool
Microsoft.CodeAnalysisP.IMethodSymbol.MethodKind.get -> Microsoft.CodeAnalysisP.MethodKind
Microsoft.CodeAnalysisP.IMethodSymbol.OriginalDefinition.get -> Microsoft.CodeAnalysisP.IMethodSymbol
Microsoft.CodeAnalysisP.IMethodSymbol.OverriddenMethod.get -> Microsoft.CodeAnalysisP.IMethodSymbol
Microsoft.CodeAnalysisP.IMethodSymbol.Parameters.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.IParameterSymbol>
Microsoft.CodeAnalysisP.IMethodSymbol.PartialDefinitionPart.get -> Microsoft.CodeAnalysisP.IMethodSymbol
Microsoft.CodeAnalysisP.IMethodSymbol.PartialImplementationPart.get -> Microsoft.CodeAnalysisP.IMethodSymbol
Microsoft.CodeAnalysisP.IMethodSymbol.ReceiverType.get -> Microsoft.CodeAnalysisP.ITypeSymbol
Microsoft.CodeAnalysisP.IMethodSymbol.ReducedFrom.get -> Microsoft.CodeAnalysisP.IMethodSymbol
Microsoft.CodeAnalysisP.IMethodSymbol.ReduceExtensionMethod(Microsoft.CodeAnalysisP.ITypeSymbol receiverType) -> Microsoft.CodeAnalysisP.IMethodSymbol
Microsoft.CodeAnalysisP.IMethodSymbol.RefCustomModifiers.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.CustomModifier>
Microsoft.CodeAnalysisP.IMethodSymbol.RefKind.get -> Microsoft.CodeAnalysisP.RefKind
Microsoft.CodeAnalysisP.IMethodSymbol.ReturnsByRef.get -> bool
Microsoft.CodeAnalysisP.IMethodSymbol.ReturnsByRefReadonly.get -> bool
Microsoft.CodeAnalysisP.IMethodSymbol.ReturnsVoid.get -> bool
Microsoft.CodeAnalysisP.IMethodSymbol.ReturnType.get -> Microsoft.CodeAnalysisP.ITypeSymbol
Microsoft.CodeAnalysisP.IMethodSymbol.ReturnTypeCustomModifiers.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.CustomModifier>
Microsoft.CodeAnalysisP.IMethodSymbol.TypeArguments.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ITypeSymbol>
Microsoft.CodeAnalysisP.IMethodSymbol.TypeParameters.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ITypeParameterSymbol>
Microsoft.CodeAnalysisP.IModuleSymbol
Microsoft.CodeAnalysisP.IModuleSymbol.GetMetadata() -> Microsoft.CodeAnalysisP.ModuleMetadata
Microsoft.CodeAnalysisP.IModuleSymbol.GetModuleNamespace(Microsoft.CodeAnalysisP.INamespaceSymbol namespaceSymbol) -> Microsoft.CodeAnalysisP.INamespaceSymbol
Microsoft.CodeAnalysisP.IModuleSymbol.GlobalNamespace.get -> Microsoft.CodeAnalysisP.INamespaceSymbol
Microsoft.CodeAnalysisP.IModuleSymbol.ReferencedAssemblies.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.AssemblyIdentity>
Microsoft.CodeAnalysisP.IModuleSymbol.ReferencedAssemblySymbols.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.IAssemblySymbol>
Microsoft.CodeAnalysisP.INamedTypeSymbol
Microsoft.CodeAnalysisP.INamedTypeSymbol.Arity.get -> int
Microsoft.CodeAnalysisP.INamedTypeSymbol.AssociatedSymbol.get -> Microsoft.CodeAnalysisP.ISymbol
Microsoft.CodeAnalysisP.INamedTypeSymbol.Construct(params Microsoft.CodeAnalysisP.ITypeSymbol[] typeArguments) -> Microsoft.CodeAnalysisP.INamedTypeSymbol
Microsoft.CodeAnalysisP.INamedTypeSymbol.ConstructedFrom.get -> Microsoft.CodeAnalysisP.INamedTypeSymbol
Microsoft.CodeAnalysisP.INamedTypeSymbol.Constructors.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.IMethodSymbol>
Microsoft.CodeAnalysisP.INamedTypeSymbol.ConstructUnboundGenericType() -> Microsoft.CodeAnalysisP.INamedTypeSymbol
Microsoft.CodeAnalysisP.INamedTypeSymbol.DelegateInvokeMethod.get -> Microsoft.CodeAnalysisP.IMethodSymbol
Microsoft.CodeAnalysisP.INamedTypeSymbol.EnumUnderlyingType.get -> Microsoft.CodeAnalysisP.INamedTypeSymbol
Microsoft.CodeAnalysisP.INamedTypeSymbol.GetTypeArgumentCustomModifiers(int ordinal) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.CustomModifier>
Microsoft.CodeAnalysisP.INamedTypeSymbol.InstanceConstructors.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.IMethodSymbol>
Microsoft.CodeAnalysisP.INamedTypeSymbol.IsComImport.get -> bool
Microsoft.CodeAnalysisP.INamedTypeSymbol.IsGenericType.get -> bool
Microsoft.CodeAnalysisP.INamedTypeSymbol.IsImplicitClass.get -> bool
Microsoft.CodeAnalysisP.INamedTypeSymbol.IsScriptClass.get -> bool
Microsoft.CodeAnalysisP.INamedTypeSymbol.IsSerializable.get -> bool
Microsoft.CodeAnalysisP.INamedTypeSymbol.IsUnboundGenericType.get -> bool
Microsoft.CodeAnalysisP.INamedTypeSymbol.MemberNames.get -> System.Collections.Generic.IEnumerable<string>
Microsoft.CodeAnalysisP.INamedTypeSymbol.MightContainExtensionMethods.get -> bool
Microsoft.CodeAnalysisP.INamedTypeSymbol.OriginalDefinition.get -> Microsoft.CodeAnalysisP.INamedTypeSymbol
Microsoft.CodeAnalysisP.INamedTypeSymbol.StaticConstructors.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.IMethodSymbol>
Microsoft.CodeAnalysisP.INamedTypeSymbol.TupleElements.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.IFieldSymbol>
Microsoft.CodeAnalysisP.INamedTypeSymbol.TupleUnderlyingType.get -> Microsoft.CodeAnalysisP.INamedTypeSymbol
Microsoft.CodeAnalysisP.INamedTypeSymbol.TypeArguments.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ITypeSymbol>
Microsoft.CodeAnalysisP.INamedTypeSymbol.TypeParameters.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ITypeParameterSymbol>
Microsoft.CodeAnalysisP.INamespaceOrTypeSymbol
Microsoft.CodeAnalysisP.INamespaceOrTypeSymbol.GetMembers() -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ISymbol>
Microsoft.CodeAnalysisP.INamespaceOrTypeSymbol.GetMembers(string name) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ISymbol>
Microsoft.CodeAnalysisP.INamespaceOrTypeSymbol.GetTypeMembers() -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.INamedTypeSymbol>
Microsoft.CodeAnalysisP.INamespaceOrTypeSymbol.GetTypeMembers(string name) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.INamedTypeSymbol>
Microsoft.CodeAnalysisP.INamespaceOrTypeSymbol.GetTypeMembers(string name, int arity) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.INamedTypeSymbol>
Microsoft.CodeAnalysisP.INamespaceOrTypeSymbol.IsNamespace.get -> bool
Microsoft.CodeAnalysisP.INamespaceOrTypeSymbol.IsType.get -> bool
Microsoft.CodeAnalysisP.INamespaceSymbol
Microsoft.CodeAnalysisP.INamespaceSymbol.ConstituentNamespaces.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.INamespaceSymbol>
Microsoft.CodeAnalysisP.INamespaceSymbol.ContainingCompilation.get -> Microsoft.CodeAnalysisP.Compilation
Microsoft.CodeAnalysisP.INamespaceSymbol.GetMembers() -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.INamespaceOrTypeSymbol>
Microsoft.CodeAnalysisP.INamespaceSymbol.GetMembers(string name) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.INamespaceOrTypeSymbol>
Microsoft.CodeAnalysisP.INamespaceSymbol.GetNamespaceMembers() -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.INamespaceSymbol>
Microsoft.CodeAnalysisP.INamespaceSymbol.IsGlobalNamespace.get -> bool
Microsoft.CodeAnalysisP.INamespaceSymbol.NamespaceKind.get -> Microsoft.CodeAnalysisP.NamespaceKind
Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.IOperation.Accept(Microsoft.CodeAnalysisP.Operations.OperationVisitor visitor) -> void
Microsoft.CodeAnalysisP.IOperation.Accept<TArgument, TResult>(Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult> visitor, TArgument argument) -> TResult
Microsoft.CodeAnalysisP.IOperation.Children.get -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.IOperation>
Microsoft.CodeAnalysisP.IOperation.ConstantValue.get -> Microsoft.CodeAnalysisP.Optional<object>
Microsoft.CodeAnalysisP.IOperation.IsImplicit.get -> bool
Microsoft.CodeAnalysisP.IOperation.Kind.get -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.IOperation.Language.get -> string
Microsoft.CodeAnalysisP.IOperation.Parent.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.IOperation.Syntax.get -> Microsoft.CodeAnalysisP.SyntaxNode
Microsoft.CodeAnalysisP.IOperation.Type.get -> Microsoft.CodeAnalysisP.ITypeSymbol
Microsoft.CodeAnalysisP.IParameterSymbol
Microsoft.CodeAnalysisP.IParameterSymbol.CustomModifiers.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.CustomModifier>
Microsoft.CodeAnalysisP.IParameterSymbol.ExplicitDefaultValue.get -> object
Microsoft.CodeAnalysisP.IParameterSymbol.HasExplicitDefaultValue.get -> bool
Microsoft.CodeAnalysisP.IParameterSymbol.IsOptional.get -> bool
Microsoft.CodeAnalysisP.IParameterSymbol.IsParams.get -> bool
Microsoft.CodeAnalysisP.IParameterSymbol.IsThis.get -> bool
Microsoft.CodeAnalysisP.IParameterSymbol.Ordinal.get -> int
Microsoft.CodeAnalysisP.IParameterSymbol.OriginalDefinition.get -> Microsoft.CodeAnalysisP.IParameterSymbol
Microsoft.CodeAnalysisP.IParameterSymbol.RefCustomModifiers.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.CustomModifier>
Microsoft.CodeAnalysisP.IParameterSymbol.RefKind.get -> Microsoft.CodeAnalysisP.RefKind
Microsoft.CodeAnalysisP.IParameterSymbol.Type.get -> Microsoft.CodeAnalysisP.ITypeSymbol
Microsoft.CodeAnalysisP.IPointerTypeSymbol
Microsoft.CodeAnalysisP.IPointerTypeSymbol.CustomModifiers.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.CustomModifier>
Microsoft.CodeAnalysisP.IPointerTypeSymbol.PointedAtType.get -> Microsoft.CodeAnalysisP.ITypeSymbol
Microsoft.CodeAnalysisP.IPreprocessingSymbol
Microsoft.CodeAnalysisP.IPropertySymbol
Microsoft.CodeAnalysisP.IPropertySymbol.ExplicitInterfaceImplementations.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.IPropertySymbol>
Microsoft.CodeAnalysisP.IPropertySymbol.GetMethod.get -> Microsoft.CodeAnalysisP.IMethodSymbol
Microsoft.CodeAnalysisP.IPropertySymbol.IsIndexer.get -> bool
Microsoft.CodeAnalysisP.IPropertySymbol.IsReadOnly.get -> bool
Microsoft.CodeAnalysisP.IPropertySymbol.IsWithEvents.get -> bool
Microsoft.CodeAnalysisP.IPropertySymbol.IsWriteOnly.get -> bool
Microsoft.CodeAnalysisP.IPropertySymbol.OriginalDefinition.get -> Microsoft.CodeAnalysisP.IPropertySymbol
Microsoft.CodeAnalysisP.IPropertySymbol.OverriddenProperty.get -> Microsoft.CodeAnalysisP.IPropertySymbol
Microsoft.CodeAnalysisP.IPropertySymbol.Parameters.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.IParameterSymbol>
Microsoft.CodeAnalysisP.IPropertySymbol.RefCustomModifiers.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.CustomModifier>
Microsoft.CodeAnalysisP.IPropertySymbol.RefKind.get -> Microsoft.CodeAnalysisP.RefKind
Microsoft.CodeAnalysisP.IPropertySymbol.ReturnsByRef.get -> bool
Microsoft.CodeAnalysisP.IPropertySymbol.ReturnsByRefReadonly.get -> bool
Microsoft.CodeAnalysisP.IPropertySymbol.SetMethod.get -> Microsoft.CodeAnalysisP.IMethodSymbol
Microsoft.CodeAnalysisP.IPropertySymbol.Type.get -> Microsoft.CodeAnalysisP.ITypeSymbol
Microsoft.CodeAnalysisP.IPropertySymbol.TypeCustomModifiers.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.CustomModifier>
Microsoft.CodeAnalysisP.IRangeVariableSymbol
Microsoft.CodeAnalysisP.ISkippedTokensTriviaSyntax
Microsoft.CodeAnalysisP.ISkippedTokensTriviaSyntax.Tokens.get -> Microsoft.CodeAnalysisP.SyntaxTokenList
Microsoft.CodeAnalysisP.ISourceAssemblySymbol
Microsoft.CodeAnalysisP.ISourceAssemblySymbol.Compilation.get -> Microsoft.CodeAnalysisP.Compilation
Microsoft.CodeAnalysisP.IStructuredTriviaSyntax
Microsoft.CodeAnalysisP.IStructuredTriviaSyntax.ParentTrivia.get -> Microsoft.CodeAnalysisP.SyntaxTrivia
Microsoft.CodeAnalysisP.ISymbol
Microsoft.CodeAnalysisP.ISymbol.Accept(Microsoft.CodeAnalysisP.SymbolVisitor visitor) -> void
Microsoft.CodeAnalysisP.ISymbol.Accept<TResult>(Microsoft.CodeAnalysisP.SymbolVisitor<TResult> visitor) -> TResult
Microsoft.CodeAnalysisP.ISymbol.CanBeReferencedByName.get -> bool
Microsoft.CodeAnalysisP.ISymbol.ContainingAssembly.get -> Microsoft.CodeAnalysisP.IAssemblySymbol
Microsoft.CodeAnalysisP.ISymbol.ContainingModule.get -> Microsoft.CodeAnalysisP.IModuleSymbol
Microsoft.CodeAnalysisP.ISymbol.ContainingNamespace.get -> Microsoft.CodeAnalysisP.INamespaceSymbol
Microsoft.CodeAnalysisP.ISymbol.ContainingSymbol.get -> Microsoft.CodeAnalysisP.ISymbol
Microsoft.CodeAnalysisP.ISymbol.ContainingType.get -> Microsoft.CodeAnalysisP.INamedTypeSymbol
Microsoft.CodeAnalysisP.ISymbol.DeclaredAccessibility.get -> Microsoft.CodeAnalysisP.Accessibility
Microsoft.CodeAnalysisP.ISymbol.DeclaringSyntaxReferences.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.SyntaxReference>
Microsoft.CodeAnalysisP.ISymbol.GetAttributes() -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.AttributeData>
Microsoft.CodeAnalysisP.ISymbol.GetDocumentationCommentId() -> string
Microsoft.CodeAnalysisP.ISymbol.GetDocumentationCommentXml(System.Globalization.CultureInfo preferredCulture = null, bool expandIncludes = false, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> string
Microsoft.CodeAnalysisP.ISymbol.HasUnsupportedMetadata.get -> bool
Microsoft.CodeAnalysisP.ISymbol.IsAbstract.get -> bool
Microsoft.CodeAnalysisP.ISymbol.IsDefinition.get -> bool
Microsoft.CodeAnalysisP.ISymbol.IsExtern.get -> bool
Microsoft.CodeAnalysisP.ISymbol.IsImplicitlyDeclared.get -> bool
Microsoft.CodeAnalysisP.ISymbol.IsOverride.get -> bool
Microsoft.CodeAnalysisP.ISymbol.IsSealed.get -> bool
Microsoft.CodeAnalysisP.ISymbol.IsStatic.get -> bool
Microsoft.CodeAnalysisP.ISymbol.IsVirtual.get -> bool
Microsoft.CodeAnalysisP.ISymbol.Kind.get -> Microsoft.CodeAnalysisP.SymbolKind
Microsoft.CodeAnalysisP.ISymbol.Language.get -> string
Microsoft.CodeAnalysisP.ISymbol.Locations.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Location>
Microsoft.CodeAnalysisP.ISymbol.MetadataName.get -> string
Microsoft.CodeAnalysisP.ISymbol.Name.get -> string
Microsoft.CodeAnalysisP.ISymbol.OriginalDefinition.get -> Microsoft.CodeAnalysisP.ISymbol
Microsoft.CodeAnalysisP.ISymbol.ToDisplayParts(Microsoft.CodeAnalysisP.SymbolDisplayFormat format = null) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.SymbolDisplayPart>
Microsoft.CodeAnalysisP.ISymbol.ToDisplayString(Microsoft.CodeAnalysisP.SymbolDisplayFormat format = null) -> string
Microsoft.CodeAnalysisP.ISymbol.ToMinimalDisplayParts(Microsoft.CodeAnalysisP.SemanticModel semanticModel, int position, Microsoft.CodeAnalysisP.SymbolDisplayFormat format = null) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.SymbolDisplayPart>
Microsoft.CodeAnalysisP.ISymbol.ToMinimalDisplayString(Microsoft.CodeAnalysisP.SemanticModel semanticModel, int position, Microsoft.CodeAnalysisP.SymbolDisplayFormat format = null) -> string
Microsoft.CodeAnalysisP.ISymbolExtensions
Microsoft.CodeAnalysisP.ITypeParameterSymbol
Microsoft.CodeAnalysisP.ITypeParameterSymbol.ConstraintTypes.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ITypeSymbol>
Microsoft.CodeAnalysisP.ITypeParameterSymbol.DeclaringMethod.get -> Microsoft.CodeAnalysisP.IMethodSymbol
Microsoft.CodeAnalysisP.ITypeParameterSymbol.DeclaringType.get -> Microsoft.CodeAnalysisP.INamedTypeSymbol
Microsoft.CodeAnalysisP.ITypeParameterSymbol.HasConstructorConstraint.get -> bool
Microsoft.CodeAnalysisP.ITypeParameterSymbol.HasReferenceTypeConstraint.get -> bool
Microsoft.CodeAnalysisP.ITypeParameterSymbol.HasUnmanagedTypeConstraint.get -> bool
Microsoft.CodeAnalysisP.ITypeParameterSymbol.HasValueTypeConstraint.get -> bool
Microsoft.CodeAnalysisP.ITypeParameterSymbol.Ordinal.get -> int
Microsoft.CodeAnalysisP.ITypeParameterSymbol.OriginalDefinition.get -> Microsoft.CodeAnalysisP.ITypeParameterSymbol
Microsoft.CodeAnalysisP.ITypeParameterSymbol.ReducedFrom.get -> Microsoft.CodeAnalysisP.ITypeParameterSymbol
Microsoft.CodeAnalysisP.ITypeParameterSymbol.TypeParameterKind.get -> Microsoft.CodeAnalysisP.TypeParameterKind
Microsoft.CodeAnalysisP.ITypeParameterSymbol.Variance.get -> Microsoft.CodeAnalysisP.VarianceKind
Microsoft.CodeAnalysisP.ITypeSymbol
Microsoft.CodeAnalysisP.ITypeSymbol.AllInterfaces.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.INamedTypeSymbol>
Microsoft.CodeAnalysisP.ITypeSymbol.BaseType.get -> Microsoft.CodeAnalysisP.INamedTypeSymbol
Microsoft.CodeAnalysisP.ITypeSymbol.FindImplementationForInterfaceMember(Microsoft.CodeAnalysisP.ISymbol interfaceMember) -> Microsoft.CodeAnalysisP.ISymbol
Microsoft.CodeAnalysisP.ITypeSymbol.Interfaces.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.INamedTypeSymbol>
Microsoft.CodeAnalysisP.ITypeSymbol.IsAnonymousType.get -> bool
Microsoft.CodeAnalysisP.ITypeSymbol.IsReferenceType.get -> bool
Microsoft.CodeAnalysisP.ITypeSymbol.IsTupleType.get -> bool
Microsoft.CodeAnalysisP.ITypeSymbol.IsValueType.get -> bool
Microsoft.CodeAnalysisP.ITypeSymbol.OriginalDefinition.get -> Microsoft.CodeAnalysisP.ITypeSymbol
Microsoft.CodeAnalysisP.ITypeSymbol.SpecialType.get -> Microsoft.CodeAnalysisP.SpecialType
Microsoft.CodeAnalysisP.ITypeSymbol.TypeKind.get -> Microsoft.CodeAnalysisP.TypeKind
Microsoft.CodeAnalysisP.LanguageNames
Microsoft.CodeAnalysisP.LineVisibility
Microsoft.CodeAnalysisP.LineVisibility.BeforeFirstLineDirective = 0 -> Microsoft.CodeAnalysisP.LineVisibility
Microsoft.CodeAnalysisP.LineVisibility.Hidden = 1 -> Microsoft.CodeAnalysisP.LineVisibility
Microsoft.CodeAnalysisP.LineVisibility.Visible = 2 -> Microsoft.CodeAnalysisP.LineVisibility
Microsoft.CodeAnalysisP.LocalizableResourceString
Microsoft.CodeAnalysisP.LocalizableResourceString.LocalizableResourceString(string nameOfLocalizableResource, System.Resources.ResourceManager resourceManager, System.Type resourceSource) -> void
Microsoft.CodeAnalysisP.LocalizableResourceString.LocalizableResourceString(string nameOfLocalizableResource, System.Resources.ResourceManager resourceManager, System.Type resourceSource, params string[] formatArguments) -> void
Microsoft.CodeAnalysisP.LocalizableString
Microsoft.CodeAnalysisP.LocalizableString.Equals(Microsoft.CodeAnalysisP.LocalizableString other) -> bool
Microsoft.CodeAnalysisP.LocalizableString.LocalizableString() -> void
Microsoft.CodeAnalysisP.LocalizableString.OnException -> System.EventHandler<System.Exception>
Microsoft.CodeAnalysisP.LocalizableString.ToString(System.IFormatProvider formatProvider) -> string
Microsoft.CodeAnalysisP.Location
Microsoft.CodeAnalysisP.Location.IsInMetadata.get -> bool
Microsoft.CodeAnalysisP.Location.IsInSource.get -> bool
Microsoft.CodeAnalysisP.LocationKind
Microsoft.CodeAnalysisP.LocationKind.ExternalFile = 4 -> Microsoft.CodeAnalysisP.LocationKind
Microsoft.CodeAnalysisP.LocationKind.MetadataFile = 2 -> Microsoft.CodeAnalysisP.LocationKind
Microsoft.CodeAnalysisP.LocationKind.None = 0 -> Microsoft.CodeAnalysisP.LocationKind
Microsoft.CodeAnalysisP.LocationKind.SourceFile = 1 -> Microsoft.CodeAnalysisP.LocationKind
Microsoft.CodeAnalysisP.LocationKind.XmlFile = 3 -> Microsoft.CodeAnalysisP.LocationKind
Microsoft.CodeAnalysisP.Metadata
Microsoft.CodeAnalysisP.Metadata.Copy() -> Microsoft.CodeAnalysisP.Metadata
Microsoft.CodeAnalysisP.Metadata.Id.get -> Microsoft.CodeAnalysisP.MetadataId
Microsoft.CodeAnalysisP.MetadataId
Microsoft.CodeAnalysisP.MetadataImageKind
Microsoft.CodeAnalysisP.MetadataImageKind.Assembly = 0 -> Microsoft.CodeAnalysisP.MetadataImageKind
Microsoft.CodeAnalysisP.MetadataImageKind.Module = 1 -> Microsoft.CodeAnalysisP.MetadataImageKind
Microsoft.CodeAnalysisP.MetadataImportOptions
Microsoft.CodeAnalysisP.MetadataImportOptions.All = 2 -> Microsoft.CodeAnalysisP.MetadataImportOptions
Microsoft.CodeAnalysisP.MetadataImportOptions.Internal = 1 -> Microsoft.CodeAnalysisP.MetadataImportOptions
Microsoft.CodeAnalysisP.MetadataImportOptions.Public = 0 -> Microsoft.CodeAnalysisP.MetadataImportOptions
Microsoft.CodeAnalysisP.MetadataReference
Microsoft.CodeAnalysisP.MetadataReference.MetadataReference(Microsoft.CodeAnalysisP.MetadataReferenceProperties properties) -> void
Microsoft.CodeAnalysisP.MetadataReference.Properties.get -> Microsoft.CodeAnalysisP.MetadataReferenceProperties
Microsoft.CodeAnalysisP.MetadataReference.WithAliases(System.Collections.Generic.IEnumerable<string> aliases) -> Microsoft.CodeAnalysisP.MetadataReference
Microsoft.CodeAnalysisP.MetadataReference.WithAliases(System.Collections.Immutable.ImmutableArray<string> aliases) -> Microsoft.CodeAnalysisP.MetadataReference
Microsoft.CodeAnalysisP.MetadataReference.WithEmbedInteropTypes(bool value) -> Microsoft.CodeAnalysisP.MetadataReference
Microsoft.CodeAnalysisP.MetadataReference.WithProperties(Microsoft.CodeAnalysisP.MetadataReferenceProperties properties) -> Microsoft.CodeAnalysisP.MetadataReference
Microsoft.CodeAnalysisP.MetadataReferenceProperties
Microsoft.CodeAnalysisP.MetadataReferenceProperties.Aliases.get -> System.Collections.Immutable.ImmutableArray<string>
Microsoft.CodeAnalysisP.MetadataReferenceProperties.EmbedInteropTypes.get -> bool
Microsoft.CodeAnalysisP.MetadataReferenceProperties.Equals(Microsoft.CodeAnalysisP.MetadataReferenceProperties other) -> bool
Microsoft.CodeAnalysisP.MetadataReferenceProperties.Kind.get -> Microsoft.CodeAnalysisP.MetadataImageKind
Microsoft.CodeAnalysisP.MetadataReferenceProperties.MetadataReferenceProperties(Microsoft.CodeAnalysisP.MetadataImageKind kind = Microsoft.CodeAnalysisP.MetadataImageKind.Assembly, System.Collections.Immutable.ImmutableArray<string> aliases = default(System.Collections.Immutable.ImmutableArray<string>), bool embedInteropTypes = false) -> void
Microsoft.CodeAnalysisP.MetadataReferenceProperties.WithAliases(System.Collections.Generic.IEnumerable<string> aliases) -> Microsoft.CodeAnalysisP.MetadataReferenceProperties
Microsoft.CodeAnalysisP.MetadataReferenceProperties.WithAliases(System.Collections.Immutable.ImmutableArray<string> aliases) -> Microsoft.CodeAnalysisP.MetadataReferenceProperties
Microsoft.CodeAnalysisP.MetadataReferenceProperties.WithEmbedInteropTypes(bool embedInteropTypes) -> Microsoft.CodeAnalysisP.MetadataReferenceProperties
Microsoft.CodeAnalysisP.MetadataReferenceResolver
Microsoft.CodeAnalysisP.MetadataReferenceResolver.MetadataReferenceResolver() -> void
Microsoft.CodeAnalysisP.MethodKind
Microsoft.CodeAnalysisP.MethodKind.AnonymousFunction = 0 -> Microsoft.CodeAnalysisP.MethodKind
Microsoft.CodeAnalysisP.MethodKind.BuiltinOperator = 15 -> Microsoft.CodeAnalysisP.MethodKind
Microsoft.CodeAnalysisP.MethodKind.Constructor = 1 -> Microsoft.CodeAnalysisP.MethodKind
Microsoft.CodeAnalysisP.MethodKind.Conversion = 2 -> Microsoft.CodeAnalysisP.MethodKind
Microsoft.CodeAnalysisP.MethodKind.DeclareMethod = 16 -> Microsoft.CodeAnalysisP.MethodKind
Microsoft.CodeAnalysisP.MethodKind.DelegateInvoke = 3 -> Microsoft.CodeAnalysisP.MethodKind
Microsoft.CodeAnalysisP.MethodKind.Destructor = 4 -> Microsoft.CodeAnalysisP.MethodKind
Microsoft.CodeAnalysisP.MethodKind.EventAdd = 5 -> Microsoft.CodeAnalysisP.MethodKind
Microsoft.CodeAnalysisP.MethodKind.EventRaise = 6 -> Microsoft.CodeAnalysisP.MethodKind
Microsoft.CodeAnalysisP.MethodKind.EventRemove = 7 -> Microsoft.CodeAnalysisP.MethodKind
Microsoft.CodeAnalysisP.MethodKind.ExplicitInterfaceImplementation = 8 -> Microsoft.CodeAnalysisP.MethodKind
Microsoft.CodeAnalysisP.MethodKind.LambdaMethod = 0 -> Microsoft.CodeAnalysisP.MethodKind
Microsoft.CodeAnalysisP.MethodKind.LocalFunction = 17 -> Microsoft.CodeAnalysisP.MethodKind
Microsoft.CodeAnalysisP.MethodKind.Ordinary = 10 -> Microsoft.CodeAnalysisP.MethodKind
Microsoft.CodeAnalysisP.MethodKind.PropertyGet = 11 -> Microsoft.CodeAnalysisP.MethodKind
Microsoft.CodeAnalysisP.MethodKind.PropertySet = 12 -> Microsoft.CodeAnalysisP.MethodKind
Microsoft.CodeAnalysisP.MethodKind.ReducedExtension = 13 -> Microsoft.CodeAnalysisP.MethodKind
Microsoft.CodeAnalysisP.MethodKind.SharedConstructor = 14 -> Microsoft.CodeAnalysisP.MethodKind
Microsoft.CodeAnalysisP.MethodKind.StaticConstructor = 14 -> Microsoft.CodeAnalysisP.MethodKind
Microsoft.CodeAnalysisP.MethodKind.UserDefinedOperator = 9 -> Microsoft.CodeAnalysisP.MethodKind
Microsoft.CodeAnalysisP.ModelExtensions
Microsoft.CodeAnalysisP.ModuleMetadata
Microsoft.CodeAnalysisP.ModuleMetadata.GetMetadataReader() -> System.Reflection.Metadata.MetadataReader
Microsoft.CodeAnalysisP.ModuleMetadata.GetModuleNames() -> System.Collections.Immutable.ImmutableArray<string>
Microsoft.CodeAnalysisP.ModuleMetadata.GetModuleVersionId() -> System.Guid
Microsoft.CodeAnalysisP.ModuleMetadata.GetReference(Microsoft.CodeAnalysisP.DocumentationProvider documentation = null, string filePath = null, string display = null) -> Microsoft.CodeAnalysisP.PortableExecutableReference
Microsoft.CodeAnalysisP.ModuleMetadata.IsDisposed.get -> bool
Microsoft.CodeAnalysisP.ModuleMetadata.Name.get -> string
Microsoft.CodeAnalysisP.NamespaceKind
Microsoft.CodeAnalysisP.NamespaceKind.Assembly = 2 -> Microsoft.CodeAnalysisP.NamespaceKind
Microsoft.CodeAnalysisP.NamespaceKind.Compilation = 3 -> Microsoft.CodeAnalysisP.NamespaceKind
Microsoft.CodeAnalysisP.NamespaceKind.Module = 1 -> Microsoft.CodeAnalysisP.NamespaceKind
Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.AddressOf = 64 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.AnonymousFunction = 35 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.AnonymousObjectCreation = 49 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.Argument = 79 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.ArrayCreation = 38 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.ArrayElementReference = 23 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.ArrayInitializer = 76 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.Await = 41 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.BinaryOperator = 32 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.Block = 2 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.Branch = 7 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.CaseClause = 82 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.CatchClause = 80 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.Coalesce = 34 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.CollectionElementInitializer = 52 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.CompoundAssignment = 43 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.Conditional = 33 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.ConditionalAccess = 46 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.ConditionalAccessInstance = 47 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.ConstantPattern = 85 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.ConstructorBodyOperation = 89 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.Conversion = 21 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.DeclarationExpression = 70 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.DeclarationPattern = 86 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.DeconstructionAssignment = 69 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.Decrement = 68 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.DefaultValue = 61 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.DelegateCreation = 60 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.Discard = 90 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.DynamicIndexerAccess = 58 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.DynamicInvocation = 57 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.DynamicMemberReference = 56 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.DynamicObjectCreation = 55 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.Empty = 8 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.End = 18 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.EventAssignment = 45 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.EventReference = 30 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.ExpressionStatement = 15 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.FieldInitializer = 72 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.FieldReference = 26 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.Increment = 66 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.InstanceReference = 39 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.InterpolatedString = 48 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.InterpolatedStringText = 83 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.Interpolation = 84 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.Invalid = 1 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.Invocation = 22 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.IsPattern = 65 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.IsType = 40 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.Labeled = 6 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.Literal = 20 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.LocalFunction = 16 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.LocalReference = 24 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.Lock = 11 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.Loop = 5 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.MemberInitializer = 51 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.MethodBodyOperation = 88 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.MethodReference = 27 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.NameOf = 53 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.None = 0 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.ObjectCreation = 36 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.ObjectOrCollectionInitializer = 50 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.OmittedArgument = 71 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.ParameterInitializer = 75 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.ParameterReference = 25 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.Parenthesized = 44 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.PropertyInitializer = 74 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.PropertyReference = 28 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.RaiseEvent = 19 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.Return = 9 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.SimpleAssignment = 42 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.SizeOf = 63 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.Stop = 17 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.Switch = 4 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.SwitchCase = 81 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.Throw = 67 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.TranslatedQuery = 59 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.Try = 12 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.Tuple = 54 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.TupleBinaryOperator = 87 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.TypeOf = 62 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.TypeParameterObjectCreation = 37 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.UnaryOperator = 31 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.Using = 13 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.VariableDeclaration = 78 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.VariableDeclarationGroup = 3 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.VariableDeclarator = 77 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.VariableInitializer = 73 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.YieldBreak = 10 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.OperationKind.YieldReturn = 14 -> Microsoft.CodeAnalysisP.OperationKind
Microsoft.CodeAnalysisP.Operations.ArgumentKind
Microsoft.CodeAnalysisP.Operations.ArgumentKind.DefaultValue = 3 -> Microsoft.CodeAnalysisP.Operations.ArgumentKind
Microsoft.CodeAnalysisP.Operations.ArgumentKind.Explicit = 1 -> Microsoft.CodeAnalysisP.Operations.ArgumentKind
Microsoft.CodeAnalysisP.Operations.ArgumentKind.None = 0 -> Microsoft.CodeAnalysisP.Operations.ArgumentKind
Microsoft.CodeAnalysisP.Operations.ArgumentKind.ParamArray = 2 -> Microsoft.CodeAnalysisP.Operations.ArgumentKind
Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind
Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind.Add = 1 -> Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind
Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind.And = 10 -> Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind
Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind.Concatenate = 15 -> Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind
Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind.ConditionalAnd = 13 -> Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind
Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind.ConditionalOr = 14 -> Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind
Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind.Divide = 4 -> Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind
Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind.Equals = 16 -> Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind
Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind.ExclusiveOr = 12 -> Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind
Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind.GreaterThan = 23 -> Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind
Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind.GreaterThanOrEqual = 22 -> Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind
Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind.IntegerDivide = 5 -> Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind
Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind.LeftShift = 8 -> Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind
Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind.LessThan = 20 -> Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind
Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind.LessThanOrEqual = 21 -> Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind
Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind.Like = 24 -> Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind
Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind.Multiply = 3 -> Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind
Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind.None = 0 -> Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind
Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind.NotEquals = 18 -> Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind
Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind.ObjectValueEquals = 17 -> Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind
Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind.ObjectValueNotEquals = 19 -> Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind
Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind.Or = 11 -> Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind
Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind.Power = 7 -> Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind
Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind.Remainder = 6 -> Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind
Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind.RightShift = 9 -> Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind
Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind.Subtract = 2 -> Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind
Microsoft.CodeAnalysisP.Operations.BranchKind
Microsoft.CodeAnalysisP.Operations.BranchKind.Break = 2 -> Microsoft.CodeAnalysisP.Operations.BranchKind
Microsoft.CodeAnalysisP.Operations.BranchKind.Continue = 1 -> Microsoft.CodeAnalysisP.Operations.BranchKind
Microsoft.CodeAnalysisP.Operations.BranchKind.GoTo = 3 -> Microsoft.CodeAnalysisP.Operations.BranchKind
Microsoft.CodeAnalysisP.Operations.BranchKind.None = 0 -> Microsoft.CodeAnalysisP.Operations.BranchKind
Microsoft.CodeAnalysisP.Operations.CaseKind
Microsoft.CodeAnalysisP.Operations.CaseKind.Default = 4 -> Microsoft.CodeAnalysisP.Operations.CaseKind
Microsoft.CodeAnalysisP.Operations.CaseKind.None = 0 -> Microsoft.CodeAnalysisP.Operations.CaseKind
Microsoft.CodeAnalysisP.Operations.CaseKind.Pattern = 5 -> Microsoft.CodeAnalysisP.Operations.CaseKind
Microsoft.CodeAnalysisP.Operations.CaseKind.Range = 3 -> Microsoft.CodeAnalysisP.Operations.CaseKind
Microsoft.CodeAnalysisP.Operations.CaseKind.Relational = 2 -> Microsoft.CodeAnalysisP.Operations.CaseKind
Microsoft.CodeAnalysisP.Operations.CaseKind.SingleValue = 1 -> Microsoft.CodeAnalysisP.Operations.CaseKind
Microsoft.CodeAnalysisP.Operations.CommonConversion
Microsoft.CodeAnalysisP.Operations.CommonConversion.Exists.get -> bool
Microsoft.CodeAnalysisP.Operations.CommonConversion.IsIdentity.get -> bool
Microsoft.CodeAnalysisP.Operations.CommonConversion.IsNumeric.get -> bool
Microsoft.CodeAnalysisP.Operations.CommonConversion.IsReference.get -> bool
Microsoft.CodeAnalysisP.Operations.CommonConversion.IsUserDefined.get -> bool
Microsoft.CodeAnalysisP.Operations.CommonConversion.MethodSymbol.get -> Microsoft.CodeAnalysisP.IMethodSymbol
Microsoft.CodeAnalysisP.Operations.IAddressOfOperation
Microsoft.CodeAnalysisP.Operations.IAddressOfOperation.Reference.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IAnonymousFunctionOperation
Microsoft.CodeAnalysisP.Operations.IAnonymousFunctionOperation.Body.get -> Microsoft.CodeAnalysisP.Operations.IBlockOperation
Microsoft.CodeAnalysisP.Operations.IAnonymousFunctionOperation.Symbol.get -> Microsoft.CodeAnalysisP.IMethodSymbol
Microsoft.CodeAnalysisP.Operations.IAnonymousObjectCreationOperation
Microsoft.CodeAnalysisP.Operations.IAnonymousObjectCreationOperation.Initializers.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.IOperation>
Microsoft.CodeAnalysisP.Operations.IArgumentOperation
Microsoft.CodeAnalysisP.Operations.IArgumentOperation.ArgumentKind.get -> Microsoft.CodeAnalysisP.Operations.ArgumentKind
Microsoft.CodeAnalysisP.Operations.IArgumentOperation.InConversion.get -> Microsoft.CodeAnalysisP.Operations.CommonConversion
Microsoft.CodeAnalysisP.Operations.IArgumentOperation.OutConversion.get -> Microsoft.CodeAnalysisP.Operations.CommonConversion
Microsoft.CodeAnalysisP.Operations.IArgumentOperation.Parameter.get -> Microsoft.CodeAnalysisP.IParameterSymbol
Microsoft.CodeAnalysisP.Operations.IArgumentOperation.Value.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IArrayCreationOperation
Microsoft.CodeAnalysisP.Operations.IArrayCreationOperation.DimensionSizes.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.IOperation>
Microsoft.CodeAnalysisP.Operations.IArrayCreationOperation.Initializer.get -> Microsoft.CodeAnalysisP.Operations.IArrayInitializerOperation
Microsoft.CodeAnalysisP.Operations.IArrayElementReferenceOperation
Microsoft.CodeAnalysisP.Operations.IArrayElementReferenceOperation.ArrayReference.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IArrayElementReferenceOperation.Indices.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.IOperation>
Microsoft.CodeAnalysisP.Operations.IArrayInitializerOperation
Microsoft.CodeAnalysisP.Operations.IArrayInitializerOperation.ElementValues.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.IOperation>
Microsoft.CodeAnalysisP.Operations.IAssignmentOperation
Microsoft.CodeAnalysisP.Operations.IAssignmentOperation.Target.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IAssignmentOperation.Value.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IAwaitOperation
Microsoft.CodeAnalysisP.Operations.IAwaitOperation.Operation.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IBinaryOperation
Microsoft.CodeAnalysisP.Operations.IBinaryOperation.IsChecked.get -> bool
Microsoft.CodeAnalysisP.Operations.IBinaryOperation.IsCompareText.get -> bool
Microsoft.CodeAnalysisP.Operations.IBinaryOperation.IsLifted.get -> bool
Microsoft.CodeAnalysisP.Operations.IBinaryOperation.LeftOperand.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IBinaryOperation.OperatorKind.get -> Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind
Microsoft.CodeAnalysisP.Operations.IBinaryOperation.OperatorMethod.get -> Microsoft.CodeAnalysisP.IMethodSymbol
Microsoft.CodeAnalysisP.Operations.IBinaryOperation.RightOperand.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IBlockOperation
Microsoft.CodeAnalysisP.Operations.IBlockOperation.Locals.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ILocalSymbol>
Microsoft.CodeAnalysisP.Operations.IBlockOperation.Operations.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.IOperation>
Microsoft.CodeAnalysisP.Operations.IBranchOperation
Microsoft.CodeAnalysisP.Operations.IBranchOperation.BranchKind.get -> Microsoft.CodeAnalysisP.Operations.BranchKind
Microsoft.CodeAnalysisP.Operations.IBranchOperation.Target.get -> Microsoft.CodeAnalysisP.ILabelSymbol
Microsoft.CodeAnalysisP.Operations.ICaseClauseOperation
Microsoft.CodeAnalysisP.Operations.ICaseClauseOperation.CaseKind.get -> Microsoft.CodeAnalysisP.Operations.CaseKind
Microsoft.CodeAnalysisP.Operations.ICatchClauseOperation
Microsoft.CodeAnalysisP.Operations.ICatchClauseOperation.ExceptionDeclarationOrExpression.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.ICatchClauseOperation.ExceptionType.get -> Microsoft.CodeAnalysisP.ITypeSymbol
Microsoft.CodeAnalysisP.Operations.ICatchClauseOperation.Filter.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.ICatchClauseOperation.Handler.get -> Microsoft.CodeAnalysisP.Operations.IBlockOperation
Microsoft.CodeAnalysisP.Operations.ICatchClauseOperation.Locals.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ILocalSymbol>
Microsoft.CodeAnalysisP.Operations.ICoalesceOperation
Microsoft.CodeAnalysisP.Operations.ICoalesceOperation.Value.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.ICoalesceOperation.WhenNull.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.ICollectionElementInitializerOperation
Microsoft.CodeAnalysisP.Operations.ICollectionElementInitializerOperation.AddMethod.get -> Microsoft.CodeAnalysisP.IMethodSymbol
Microsoft.CodeAnalysisP.Operations.ICollectionElementInitializerOperation.Arguments.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.IOperation>
Microsoft.CodeAnalysisP.Operations.ICollectionElementInitializerOperation.IsDynamic.get -> bool
Microsoft.CodeAnalysisP.Operations.ICompoundAssignmentOperation
Microsoft.CodeAnalysisP.Operations.ICompoundAssignmentOperation.InConversion.get -> Microsoft.CodeAnalysisP.Operations.CommonConversion
Microsoft.CodeAnalysisP.Operations.ICompoundAssignmentOperation.IsChecked.get -> bool
Microsoft.CodeAnalysisP.Operations.ICompoundAssignmentOperation.IsLifted.get -> bool
Microsoft.CodeAnalysisP.Operations.ICompoundAssignmentOperation.OperatorKind.get -> Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind
Microsoft.CodeAnalysisP.Operations.ICompoundAssignmentOperation.OperatorMethod.get -> Microsoft.CodeAnalysisP.IMethodSymbol
Microsoft.CodeAnalysisP.Operations.ICompoundAssignmentOperation.OutConversion.get -> Microsoft.CodeAnalysisP.Operations.CommonConversion
Microsoft.CodeAnalysisP.Operations.IConditionalAccessInstanceOperation
Microsoft.CodeAnalysisP.Operations.IConditionalAccessOperation
Microsoft.CodeAnalysisP.Operations.IConditionalAccessOperation.Operation.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IConditionalAccessOperation.WhenNotNull.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IConditionalOperation
Microsoft.CodeAnalysisP.Operations.IConditionalOperation.Condition.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IConditionalOperation.IsRef.get -> bool
Microsoft.CodeAnalysisP.Operations.IConditionalOperation.WhenFalse.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IConditionalOperation.WhenTrue.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IConstantPatternOperation
Microsoft.CodeAnalysisP.Operations.IConstantPatternOperation.Value.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IConstructorBodyOperation
Microsoft.CodeAnalysisP.Operations.IConstructorBodyOperation.Initializer.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IConstructorBodyOperation.Locals.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ILocalSymbol>
Microsoft.CodeAnalysisP.Operations.IConversionOperation
Microsoft.CodeAnalysisP.Operations.IConversionOperation.Conversion.get -> Microsoft.CodeAnalysisP.Operations.CommonConversion
Microsoft.CodeAnalysisP.Operations.IConversionOperation.IsChecked.get -> bool
Microsoft.CodeAnalysisP.Operations.IConversionOperation.IsTryCast.get -> bool
Microsoft.CodeAnalysisP.Operations.IConversionOperation.Operand.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IConversionOperation.OperatorMethod.get -> Microsoft.CodeAnalysisP.IMethodSymbol
Microsoft.CodeAnalysisP.Operations.IDeclarationExpressionOperation
Microsoft.CodeAnalysisP.Operations.IDeclarationExpressionOperation.Expression.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IDeclarationPatternOperation
Microsoft.CodeAnalysisP.Operations.IDeclarationPatternOperation.DeclaredSymbol.get -> Microsoft.CodeAnalysisP.ISymbol
Microsoft.CodeAnalysisP.Operations.IDeconstructionAssignmentOperation
Microsoft.CodeAnalysisP.Operations.IDefaultCaseClauseOperation
Microsoft.CodeAnalysisP.Operations.IDefaultValueOperation
Microsoft.CodeAnalysisP.Operations.IDelegateCreationOperation
Microsoft.CodeAnalysisP.Operations.IDelegateCreationOperation.Target.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IDiscardOperation
Microsoft.CodeAnalysisP.Operations.IDiscardOperation.DiscardSymbol.get -> Microsoft.CodeAnalysisP.IDiscardSymbol
Microsoft.CodeAnalysisP.Operations.IDynamicIndexerAccessOperation
Microsoft.CodeAnalysisP.Operations.IDynamicIndexerAccessOperation.Arguments.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.IOperation>
Microsoft.CodeAnalysisP.Operations.IDynamicIndexerAccessOperation.Operation.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IDynamicInvocationOperation
Microsoft.CodeAnalysisP.Operations.IDynamicInvocationOperation.Arguments.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.IOperation>
Microsoft.CodeAnalysisP.Operations.IDynamicInvocationOperation.Operation.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IDynamicMemberReferenceOperation
Microsoft.CodeAnalysisP.Operations.IDynamicMemberReferenceOperation.ContainingType.get -> Microsoft.CodeAnalysisP.ITypeSymbol
Microsoft.CodeAnalysisP.Operations.IDynamicMemberReferenceOperation.Instance.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IDynamicMemberReferenceOperation.MemberName.get -> string
Microsoft.CodeAnalysisP.Operations.IDynamicMemberReferenceOperation.TypeArguments.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ITypeSymbol>
Microsoft.CodeAnalysisP.Operations.IDynamicObjectCreationOperation
Microsoft.CodeAnalysisP.Operations.IDynamicObjectCreationOperation.Arguments.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.IOperation>
Microsoft.CodeAnalysisP.Operations.IDynamicObjectCreationOperation.Initializer.get -> Microsoft.CodeAnalysisP.Operations.IObjectOrCollectionInitializerOperation
Microsoft.CodeAnalysisP.Operations.IEmptyOperation
Microsoft.CodeAnalysisP.Operations.IEndOperation
Microsoft.CodeAnalysisP.Operations.IEventAssignmentOperation
Microsoft.CodeAnalysisP.Operations.IEventAssignmentOperation.Adds.get -> bool
Microsoft.CodeAnalysisP.Operations.IEventAssignmentOperation.HandlerValue.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IEventReferenceOperation
Microsoft.CodeAnalysisP.Operations.IEventReferenceOperation.Event.get -> Microsoft.CodeAnalysisP.IEventSymbol
Microsoft.CodeAnalysisP.Operations.IExpressionStatementOperation
Microsoft.CodeAnalysisP.Operations.IExpressionStatementOperation.Operation.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IFieldInitializerOperation
Microsoft.CodeAnalysisP.Operations.IFieldInitializerOperation.InitializedFields.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.IFieldSymbol>
Microsoft.CodeAnalysisP.Operations.IFieldReferenceOperation
Microsoft.CodeAnalysisP.Operations.IFieldReferenceOperation.Field.get -> Microsoft.CodeAnalysisP.IFieldSymbol
Microsoft.CodeAnalysisP.Operations.IFieldReferenceOperation.IsDeclaration.get -> bool
Microsoft.CodeAnalysisP.Operations.IForEachLoopOperation
Microsoft.CodeAnalysisP.Operations.IForEachLoopOperation.Collection.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IForEachLoopOperation.LoopControlVariable.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IForEachLoopOperation.NextVariables.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.IOperation>
Microsoft.CodeAnalysisP.Operations.IForLoopOperation
Microsoft.CodeAnalysisP.Operations.IForLoopOperation.AtLoopBottom.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.IOperation>
Microsoft.CodeAnalysisP.Operations.IForLoopOperation.Before.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.IOperation>
Microsoft.CodeAnalysisP.Operations.IForLoopOperation.Condition.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IForToLoopOperation
Microsoft.CodeAnalysisP.Operations.IForToLoopOperation.InitialValue.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IForToLoopOperation.LimitValue.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IForToLoopOperation.LoopControlVariable.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IForToLoopOperation.NextVariables.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.IOperation>
Microsoft.CodeAnalysisP.Operations.IForToLoopOperation.StepValue.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IIncrementOrDecrementOperation
Microsoft.CodeAnalysisP.Operations.IIncrementOrDecrementOperation.IsChecked.get -> bool
Microsoft.CodeAnalysisP.Operations.IIncrementOrDecrementOperation.IsLifted.get -> bool
Microsoft.CodeAnalysisP.Operations.IIncrementOrDecrementOperation.IsPostfix.get -> bool
Microsoft.CodeAnalysisP.Operations.IIncrementOrDecrementOperation.OperatorMethod.get -> Microsoft.CodeAnalysisP.IMethodSymbol
Microsoft.CodeAnalysisP.Operations.IIncrementOrDecrementOperation.Target.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IInstanceReferenceOperation
Microsoft.CodeAnalysisP.Operations.IInterpolatedStringContentOperation
Microsoft.CodeAnalysisP.Operations.IInterpolatedStringOperation
Microsoft.CodeAnalysisP.Operations.IInterpolatedStringOperation.Parts.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Operations.IInterpolatedStringContentOperation>
Microsoft.CodeAnalysisP.Operations.IInterpolatedStringTextOperation
Microsoft.CodeAnalysisP.Operations.IInterpolatedStringTextOperation.Text.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IInterpolationOperation
Microsoft.CodeAnalysisP.Operations.IInterpolationOperation.Alignment.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IInterpolationOperation.Expression.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IInterpolationOperation.FormatString.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IInvalidOperation
Microsoft.CodeAnalysisP.Operations.IInvocationOperation
Microsoft.CodeAnalysisP.Operations.IInvocationOperation.Arguments.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Operations.IArgumentOperation>
Microsoft.CodeAnalysisP.Operations.IInvocationOperation.Instance.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IInvocationOperation.IsVirtual.get -> bool
Microsoft.CodeAnalysisP.Operations.IInvocationOperation.TargetMethod.get -> Microsoft.CodeAnalysisP.IMethodSymbol
Microsoft.CodeAnalysisP.Operations.IIsPatternOperation
Microsoft.CodeAnalysisP.Operations.IIsPatternOperation.Pattern.get -> Microsoft.CodeAnalysisP.Operations.IPatternOperation
Microsoft.CodeAnalysisP.Operations.IIsPatternOperation.Value.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IIsTypeOperation
Microsoft.CodeAnalysisP.Operations.IIsTypeOperation.IsNegated.get -> bool
Microsoft.CodeAnalysisP.Operations.IIsTypeOperation.TypeOperand.get -> Microsoft.CodeAnalysisP.ITypeSymbol
Microsoft.CodeAnalysisP.Operations.IIsTypeOperation.ValueOperand.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.ILabeledOperation
Microsoft.CodeAnalysisP.Operations.ILabeledOperation.Label.get -> Microsoft.CodeAnalysisP.ILabelSymbol
Microsoft.CodeAnalysisP.Operations.ILabeledOperation.Operation.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.ILiteralOperation
Microsoft.CodeAnalysisP.Operations.ILocalFunctionOperation
Microsoft.CodeAnalysisP.Operations.ILocalFunctionOperation.Body.get -> Microsoft.CodeAnalysisP.Operations.IBlockOperation
Microsoft.CodeAnalysisP.Operations.ILocalFunctionOperation.IgnoredBody.get -> Microsoft.CodeAnalysisP.Operations.IBlockOperation
Microsoft.CodeAnalysisP.Operations.ILocalFunctionOperation.Symbol.get -> Microsoft.CodeAnalysisP.IMethodSymbol
Microsoft.CodeAnalysisP.Operations.ILocalReferenceOperation
Microsoft.CodeAnalysisP.Operations.ILocalReferenceOperation.IsDeclaration.get -> bool
Microsoft.CodeAnalysisP.Operations.ILocalReferenceOperation.Local.get -> Microsoft.CodeAnalysisP.ILocalSymbol
Microsoft.CodeAnalysisP.Operations.ILockOperation
Microsoft.CodeAnalysisP.Operations.ILockOperation.Body.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.ILockOperation.LockedValue.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.ILoopOperation
Microsoft.CodeAnalysisP.Operations.ILoopOperation.Body.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.ILoopOperation.Locals.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ILocalSymbol>
Microsoft.CodeAnalysisP.Operations.ILoopOperation.LoopKind.get -> Microsoft.CodeAnalysisP.Operations.LoopKind
Microsoft.CodeAnalysisP.Operations.IMemberInitializerOperation
Microsoft.CodeAnalysisP.Operations.IMemberInitializerOperation.InitializedMember.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IMemberInitializerOperation.Initializer.get -> Microsoft.CodeAnalysisP.Operations.IObjectOrCollectionInitializerOperation
Microsoft.CodeAnalysisP.Operations.IMemberReferenceOperation
Microsoft.CodeAnalysisP.Operations.IMemberReferenceOperation.Instance.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IMemberReferenceOperation.Member.get -> Microsoft.CodeAnalysisP.ISymbol
Microsoft.CodeAnalysisP.Operations.IMethodBodyBaseOperation
Microsoft.CodeAnalysisP.Operations.IMethodBodyBaseOperation.BlockBody.get -> Microsoft.CodeAnalysisP.Operations.IBlockOperation
Microsoft.CodeAnalysisP.Operations.IMethodBodyBaseOperation.ExpressionBody.get -> Microsoft.CodeAnalysisP.Operations.IBlockOperation
Microsoft.CodeAnalysisP.Operations.IMethodBodyOperation
Microsoft.CodeAnalysisP.Operations.IMethodReferenceOperation
Microsoft.CodeAnalysisP.Operations.IMethodReferenceOperation.IsVirtual.get -> bool
Microsoft.CodeAnalysisP.Operations.IMethodReferenceOperation.Method.get -> Microsoft.CodeAnalysisP.IMethodSymbol
Microsoft.CodeAnalysisP.Operations.INameOfOperation
Microsoft.CodeAnalysisP.Operations.INameOfOperation.Argument.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IObjectCreationOperation
Microsoft.CodeAnalysisP.Operations.IObjectCreationOperation.Arguments.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Operations.IArgumentOperation>
Microsoft.CodeAnalysisP.Operations.IObjectCreationOperation.Constructor.get -> Microsoft.CodeAnalysisP.IMethodSymbol
Microsoft.CodeAnalysisP.Operations.IObjectCreationOperation.Initializer.get -> Microsoft.CodeAnalysisP.Operations.IObjectOrCollectionInitializerOperation
Microsoft.CodeAnalysisP.Operations.IObjectOrCollectionInitializerOperation
Microsoft.CodeAnalysisP.Operations.IObjectOrCollectionInitializerOperation.Initializers.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.IOperation>
Microsoft.CodeAnalysisP.Operations.IOmittedArgumentOperation
Microsoft.CodeAnalysisP.Operations.IParameterInitializerOperation
Microsoft.CodeAnalysisP.Operations.IParameterInitializerOperation.Parameter.get -> Microsoft.CodeAnalysisP.IParameterSymbol
Microsoft.CodeAnalysisP.Operations.IParameterReferenceOperation
Microsoft.CodeAnalysisP.Operations.IParameterReferenceOperation.Parameter.get -> Microsoft.CodeAnalysisP.IParameterSymbol
Microsoft.CodeAnalysisP.Operations.IParenthesizedOperation
Microsoft.CodeAnalysisP.Operations.IParenthesizedOperation.Operand.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IPatternCaseClauseOperation
Microsoft.CodeAnalysisP.Operations.IPatternCaseClauseOperation.Guard.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IPatternCaseClauseOperation.Label.get -> Microsoft.CodeAnalysisP.ILabelSymbol
Microsoft.CodeAnalysisP.Operations.IPatternCaseClauseOperation.Pattern.get -> Microsoft.CodeAnalysisP.Operations.IPatternOperation
Microsoft.CodeAnalysisP.Operations.IPatternOperation
Microsoft.CodeAnalysisP.Operations.IPropertyInitializerOperation
Microsoft.CodeAnalysisP.Operations.IPropertyInitializerOperation.InitializedProperties.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.IPropertySymbol>
Microsoft.CodeAnalysisP.Operations.IPropertyReferenceOperation
Microsoft.CodeAnalysisP.Operations.IPropertyReferenceOperation.Arguments.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Operations.IArgumentOperation>
Microsoft.CodeAnalysisP.Operations.IPropertyReferenceOperation.Property.get -> Microsoft.CodeAnalysisP.IPropertySymbol
Microsoft.CodeAnalysisP.Operations.IRaiseEventOperation
Microsoft.CodeAnalysisP.Operations.IRaiseEventOperation.Arguments.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Operations.IArgumentOperation>
Microsoft.CodeAnalysisP.Operations.IRaiseEventOperation.EventReference.get -> Microsoft.CodeAnalysisP.Operations.IEventReferenceOperation
Microsoft.CodeAnalysisP.Operations.IRangeCaseClauseOperation
Microsoft.CodeAnalysisP.Operations.IRangeCaseClauseOperation.MaximumValue.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IRangeCaseClauseOperation.MinimumValue.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IRelationalCaseClauseOperation
Microsoft.CodeAnalysisP.Operations.IRelationalCaseClauseOperation.Relation.get -> Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind
Microsoft.CodeAnalysisP.Operations.IRelationalCaseClauseOperation.Value.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IReturnOperation
Microsoft.CodeAnalysisP.Operations.IReturnOperation.ReturnedValue.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.ISimpleAssignmentOperation
Microsoft.CodeAnalysisP.Operations.ISimpleAssignmentOperation.IsRef.get -> bool
Microsoft.CodeAnalysisP.Operations.ISingleValueCaseClauseOperation
Microsoft.CodeAnalysisP.Operations.ISingleValueCaseClauseOperation.Value.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.ISizeOfOperation
Microsoft.CodeAnalysisP.Operations.ISizeOfOperation.TypeOperand.get -> Microsoft.CodeAnalysisP.ITypeSymbol
Microsoft.CodeAnalysisP.Operations.IStopOperation
Microsoft.CodeAnalysisP.Operations.ISwitchCaseOperation
Microsoft.CodeAnalysisP.Operations.ISwitchCaseOperation.Body.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.IOperation>
Microsoft.CodeAnalysisP.Operations.ISwitchCaseOperation.Clauses.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Operations.ICaseClauseOperation>
Microsoft.CodeAnalysisP.Operations.ISwitchOperation
Microsoft.CodeAnalysisP.Operations.ISwitchOperation.Cases.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Operations.ISwitchCaseOperation>
Microsoft.CodeAnalysisP.Operations.ISwitchOperation.Value.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.ISymbolInitializerOperation
Microsoft.CodeAnalysisP.Operations.ISymbolInitializerOperation.Locals.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ILocalSymbol>
Microsoft.CodeAnalysisP.Operations.ISymbolInitializerOperation.Value.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IThrowOperation
Microsoft.CodeAnalysisP.Operations.IThrowOperation.Exception.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.ITranslatedQueryOperation
Microsoft.CodeAnalysisP.Operations.ITranslatedQueryOperation.Operation.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.ITryOperation
Microsoft.CodeAnalysisP.Operations.ITryOperation.Body.get -> Microsoft.CodeAnalysisP.Operations.IBlockOperation
Microsoft.CodeAnalysisP.Operations.ITryOperation.Catches.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Operations.ICatchClauseOperation>
Microsoft.CodeAnalysisP.Operations.ITryOperation.Finally.get -> Microsoft.CodeAnalysisP.Operations.IBlockOperation
Microsoft.CodeAnalysisP.Operations.ITupleBinaryOperation
Microsoft.CodeAnalysisP.Operations.ITupleBinaryOperation.LeftOperand.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.ITupleBinaryOperation.OperatorKind.get -> Microsoft.CodeAnalysisP.Operations.BinaryOperatorKind
Microsoft.CodeAnalysisP.Operations.ITupleBinaryOperation.RightOperand.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.ITupleOperation
Microsoft.CodeAnalysisP.Operations.ITupleOperation.Elements.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.IOperation>
Microsoft.CodeAnalysisP.Operations.ITupleOperation.NaturalType.get -> Microsoft.CodeAnalysisP.ITypeSymbol
Microsoft.CodeAnalysisP.Operations.ITypeOfOperation
Microsoft.CodeAnalysisP.Operations.ITypeOfOperation.TypeOperand.get -> Microsoft.CodeAnalysisP.ITypeSymbol
Microsoft.CodeAnalysisP.Operations.ITypeParameterObjectCreationOperation
Microsoft.CodeAnalysisP.Operations.ITypeParameterObjectCreationOperation.Initializer.get -> Microsoft.CodeAnalysisP.Operations.IObjectOrCollectionInitializerOperation
Microsoft.CodeAnalysisP.Operations.IUnaryOperation
Microsoft.CodeAnalysisP.Operations.IUnaryOperation.IsChecked.get -> bool
Microsoft.CodeAnalysisP.Operations.IUnaryOperation.IsLifted.get -> bool
Microsoft.CodeAnalysisP.Operations.IUnaryOperation.Operand.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IUnaryOperation.OperatorKind.get -> Microsoft.CodeAnalysisP.Operations.UnaryOperatorKind
Microsoft.CodeAnalysisP.Operations.IUnaryOperation.OperatorMethod.get -> Microsoft.CodeAnalysisP.IMethodSymbol
Microsoft.CodeAnalysisP.Operations.IUsingOperation
Microsoft.CodeAnalysisP.Operations.IUsingOperation.Body.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IUsingOperation.Resources.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IVariableDeclarationGroupOperation
Microsoft.CodeAnalysisP.Operations.IVariableDeclarationGroupOperation.Declarations.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Operations.IVariableDeclarationOperation>
Microsoft.CodeAnalysisP.Operations.IVariableDeclarationOperation
Microsoft.CodeAnalysisP.Operations.IVariableDeclarationOperation.Declarators.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Operations.IVariableDeclaratorOperation>
Microsoft.CodeAnalysisP.Operations.IVariableDeclarationOperation.Initializer.get -> Microsoft.CodeAnalysisP.Operations.IVariableInitializerOperation
Microsoft.CodeAnalysisP.Operations.IVariableDeclaratorOperation
Microsoft.CodeAnalysisP.Operations.IVariableDeclaratorOperation.IgnoredArguments.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.IOperation>
Microsoft.CodeAnalysisP.Operations.IVariableDeclaratorOperation.Initializer.get -> Microsoft.CodeAnalysisP.Operations.IVariableInitializerOperation
Microsoft.CodeAnalysisP.Operations.IVariableDeclaratorOperation.Symbol.get -> Microsoft.CodeAnalysisP.ILocalSymbol
Microsoft.CodeAnalysisP.Operations.IVariableInitializerOperation
Microsoft.CodeAnalysisP.Operations.IWhileLoopOperation
Microsoft.CodeAnalysisP.Operations.IWhileLoopOperation.Condition.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.IWhileLoopOperation.ConditionIsTop.get -> bool
Microsoft.CodeAnalysisP.Operations.IWhileLoopOperation.ConditionIsUntil.get -> bool
Microsoft.CodeAnalysisP.Operations.IWhileLoopOperation.IgnoredCondition.get -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.Operations.LoopKind
Microsoft.CodeAnalysisP.Operations.LoopKind.For = 2 -> Microsoft.CodeAnalysisP.Operations.LoopKind
Microsoft.CodeAnalysisP.Operations.LoopKind.ForEach = 4 -> Microsoft.CodeAnalysisP.Operations.LoopKind
Microsoft.CodeAnalysisP.Operations.LoopKind.ForTo = 3 -> Microsoft.CodeAnalysisP.Operations.LoopKind
Microsoft.CodeAnalysisP.Operations.LoopKind.None = 0 -> Microsoft.CodeAnalysisP.Operations.LoopKind
Microsoft.CodeAnalysisP.Operations.LoopKind.While = 1 -> Microsoft.CodeAnalysisP.Operations.LoopKind
Microsoft.CodeAnalysisP.Operations.OperationExtensions
Microsoft.CodeAnalysisP.Operations.OperationVisitor
Microsoft.CodeAnalysisP.Operations.OperationVisitor.OperationVisitor() -> void
Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>
Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.OperationVisitor() -> void
Microsoft.CodeAnalysisP.Operations.OperationWalker
Microsoft.CodeAnalysisP.Operations.OperationWalker.OperationWalker() -> void
Microsoft.CodeAnalysisP.Operations.UnaryOperatorKind
Microsoft.CodeAnalysisP.Operations.UnaryOperatorKind.BitwiseNegation = 1 -> Microsoft.CodeAnalysisP.Operations.UnaryOperatorKind
Microsoft.CodeAnalysisP.Operations.UnaryOperatorKind.False = 6 -> Microsoft.CodeAnalysisP.Operations.UnaryOperatorKind
Microsoft.CodeAnalysisP.Operations.UnaryOperatorKind.Minus = 4 -> Microsoft.CodeAnalysisP.Operations.UnaryOperatorKind
Microsoft.CodeAnalysisP.Operations.UnaryOperatorKind.None = 0 -> Microsoft.CodeAnalysisP.Operations.UnaryOperatorKind
Microsoft.CodeAnalysisP.Operations.UnaryOperatorKind.Not = 2 -> Microsoft.CodeAnalysisP.Operations.UnaryOperatorKind
Microsoft.CodeAnalysisP.Operations.UnaryOperatorKind.Plus = 3 -> Microsoft.CodeAnalysisP.Operations.UnaryOperatorKind
Microsoft.CodeAnalysisP.Operations.UnaryOperatorKind.True = 5 -> Microsoft.CodeAnalysisP.Operations.UnaryOperatorKind
Microsoft.CodeAnalysisP.OptimizationLevel
Microsoft.CodeAnalysisP.OptimizationLevel.Debug = 0 -> Microsoft.CodeAnalysisP.OptimizationLevel
Microsoft.CodeAnalysisP.OptimizationLevel.Release = 1 -> Microsoft.CodeAnalysisP.OptimizationLevel
Microsoft.CodeAnalysisP.Optional<T>
Microsoft.CodeAnalysisP.Optional<T>.HasValue.get -> bool
Microsoft.CodeAnalysisP.Optional<T>.Optional(T value) -> void
Microsoft.CodeAnalysisP.Optional<T>.Value.get -> T
Microsoft.CodeAnalysisP.OutputKind
Microsoft.CodeAnalysisP.OutputKind.ConsoleApplication = 0 -> Microsoft.CodeAnalysisP.OutputKind
Microsoft.CodeAnalysisP.OutputKind.DynamicallyLinkedLibrary = 2 -> Microsoft.CodeAnalysisP.OutputKind
Microsoft.CodeAnalysisP.OutputKind.NetModule = 3 -> Microsoft.CodeAnalysisP.OutputKind
Microsoft.CodeAnalysisP.OutputKind.WindowsApplication = 1 -> Microsoft.CodeAnalysisP.OutputKind
Microsoft.CodeAnalysisP.OutputKind.WindowsRuntimeApplication = 5 -> Microsoft.CodeAnalysisP.OutputKind
Microsoft.CodeAnalysisP.OutputKind.WindowsRuntimeMetadata = 4 -> Microsoft.CodeAnalysisP.OutputKind
Microsoft.CodeAnalysisP.ParseOptions
Microsoft.CodeAnalysisP.ParseOptions.DocumentationMode.get -> Microsoft.CodeAnalysisP.DocumentationMode
Microsoft.CodeAnalysisP.ParseOptions.Errors.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Diagnostic>
Microsoft.CodeAnalysisP.ParseOptions.Kind.get -> Microsoft.CodeAnalysisP.SourceCodeKind
Microsoft.CodeAnalysisP.ParseOptions.SpecifiedKind.get -> Microsoft.CodeAnalysisP.SourceCodeKind
Microsoft.CodeAnalysisP.ParseOptions.WithDocumentationMode(Microsoft.CodeAnalysisP.DocumentationMode documentationMode) -> Microsoft.CodeAnalysisP.ParseOptions
Microsoft.CodeAnalysisP.ParseOptions.WithFeatures(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>> features) -> Microsoft.CodeAnalysisP.ParseOptions
Microsoft.CodeAnalysisP.ParseOptions.WithKind(Microsoft.CodeAnalysisP.SourceCodeKind kind) -> Microsoft.CodeAnalysisP.ParseOptions
Microsoft.CodeAnalysisP.Platform
Microsoft.CodeAnalysisP.Platform.AnyCpu = 0 -> Microsoft.CodeAnalysisP.Platform
Microsoft.CodeAnalysisP.Platform.AnyCpu32BitPreferred = 4 -> Microsoft.CodeAnalysisP.Platform
Microsoft.CodeAnalysisP.Platform.Arm = 5 -> Microsoft.CodeAnalysisP.Platform
Microsoft.CodeAnalysisP.Platform.Arm64 = 6 -> Microsoft.CodeAnalysisP.Platform
Microsoft.CodeAnalysisP.Platform.Itanium = 3 -> Microsoft.CodeAnalysisP.Platform
Microsoft.CodeAnalysisP.Platform.X64 = 2 -> Microsoft.CodeAnalysisP.Platform
Microsoft.CodeAnalysisP.Platform.X86 = 1 -> Microsoft.CodeAnalysisP.Platform
Microsoft.CodeAnalysisP.PortableExecutableReference
Microsoft.CodeAnalysisP.PortableExecutableReference.FilePath.get -> string
Microsoft.CodeAnalysisP.PortableExecutableReference.GetMetadata() -> Microsoft.CodeAnalysisP.Metadata
Microsoft.CodeAnalysisP.PortableExecutableReference.GetMetadataId() -> Microsoft.CodeAnalysisP.MetadataId
Microsoft.CodeAnalysisP.PortableExecutableReference.PortableExecutableReference(Microsoft.CodeAnalysisP.MetadataReferenceProperties properties, string fullPath = null, Microsoft.CodeAnalysisP.DocumentationProvider initialDocumentation = null) -> void
Microsoft.CodeAnalysisP.PortableExecutableReference.WithAliases(System.Collections.Generic.IEnumerable<string> aliases) -> Microsoft.CodeAnalysisP.PortableExecutableReference
Microsoft.CodeAnalysisP.PortableExecutableReference.WithAliases(System.Collections.Immutable.ImmutableArray<string> aliases) -> Microsoft.CodeAnalysisP.PortableExecutableReference
Microsoft.CodeAnalysisP.PortableExecutableReference.WithEmbedInteropTypes(bool value) -> Microsoft.CodeAnalysisP.PortableExecutableReference
Microsoft.CodeAnalysisP.PortableExecutableReference.WithProperties(Microsoft.CodeAnalysisP.MetadataReferenceProperties properties) -> Microsoft.CodeAnalysisP.PortableExecutableReference
Microsoft.CodeAnalysisP.PreprocessingSymbolInfo
Microsoft.CodeAnalysisP.PreprocessingSymbolInfo.Equals(Microsoft.CodeAnalysisP.PreprocessingSymbolInfo other) -> bool
Microsoft.CodeAnalysisP.PreprocessingSymbolInfo.IsDefined.get -> bool
Microsoft.CodeAnalysisP.PreprocessingSymbolInfo.Symbol.get -> Microsoft.CodeAnalysisP.IPreprocessingSymbol
Microsoft.CodeAnalysisP.RefKind
Microsoft.CodeAnalysisP.RefKind.In = 3 -> Microsoft.CodeAnalysisP.RefKind
Microsoft.CodeAnalysisP.RefKind.None = 0 -> Microsoft.CodeAnalysisP.RefKind
Microsoft.CodeAnalysisP.RefKind.Out = 2 -> Microsoft.CodeAnalysisP.RefKind
Microsoft.CodeAnalysisP.RefKind.Ref = 1 -> Microsoft.CodeAnalysisP.RefKind
Microsoft.CodeAnalysisP.RefKind.RefReadOnly = 3 -> Microsoft.CodeAnalysisP.RefKind
Microsoft.CodeAnalysisP.ReportDiagnostic
Microsoft.CodeAnalysisP.ReportDiagnostic.Default = 0 -> Microsoft.CodeAnalysisP.ReportDiagnostic
Microsoft.CodeAnalysisP.ReportDiagnostic.Error = 1 -> Microsoft.CodeAnalysisP.ReportDiagnostic
Microsoft.CodeAnalysisP.ReportDiagnostic.Hidden = 4 -> Microsoft.CodeAnalysisP.ReportDiagnostic
Microsoft.CodeAnalysisP.ReportDiagnostic.Info = 3 -> Microsoft.CodeAnalysisP.ReportDiagnostic
Microsoft.CodeAnalysisP.ReportDiagnostic.Suppress = 5 -> Microsoft.CodeAnalysisP.ReportDiagnostic
Microsoft.CodeAnalysisP.ReportDiagnostic.Warn = 2 -> Microsoft.CodeAnalysisP.ReportDiagnostic
Microsoft.CodeAnalysisP.ResourceDescription
Microsoft.CodeAnalysisP.ResourceDescription.ResourceDescription(string resourceName, string fileName, System.Func<System.IO.Stream> dataProvider, bool isPublic) -> void
Microsoft.CodeAnalysisP.ResourceDescription.ResourceDescription(string resourceName, System.Func<System.IO.Stream> dataProvider, bool isPublic) -> void
Microsoft.CodeAnalysisP.RuleSet
Microsoft.CodeAnalysisP.RuleSet.FilePath.get -> string
Microsoft.CodeAnalysisP.RuleSet.GeneralDiagnosticOption.get -> Microsoft.CodeAnalysisP.ReportDiagnostic
Microsoft.CodeAnalysisP.RuleSet.Includes.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.RuleSetInclude>
Microsoft.CodeAnalysisP.RuleSet.RuleSet(string filePath, Microsoft.CodeAnalysisP.ReportDiagnostic generalOption, System.Collections.Immutable.ImmutableDictionary<string, Microsoft.CodeAnalysisP.ReportDiagnostic> specificOptions, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.RuleSetInclude> includes) -> void
Microsoft.CodeAnalysisP.RuleSet.SpecificDiagnosticOptions.get -> System.Collections.Immutable.ImmutableDictionary<string, Microsoft.CodeAnalysisP.ReportDiagnostic>
Microsoft.CodeAnalysisP.RuleSet.WithEffectiveAction(Microsoft.CodeAnalysisP.ReportDiagnostic action) -> Microsoft.CodeAnalysisP.RuleSet
Microsoft.CodeAnalysisP.RuleSetInclude
Microsoft.CodeAnalysisP.RuleSetInclude.Action.get -> Microsoft.CodeAnalysisP.ReportDiagnostic
Microsoft.CodeAnalysisP.RuleSetInclude.IncludePath.get -> string
Microsoft.CodeAnalysisP.RuleSetInclude.LoadRuleSet(Microsoft.CodeAnalysisP.RuleSet parent) -> Microsoft.CodeAnalysisP.RuleSet
Microsoft.CodeAnalysisP.RuleSetInclude.RuleSetInclude(string includePath, Microsoft.CodeAnalysisP.ReportDiagnostic action) -> void
Microsoft.CodeAnalysisP.ScriptCompilationInfo
Microsoft.CodeAnalysisP.ScriptCompilationInfo.GlobalsType.get -> System.Type
Microsoft.CodeAnalysisP.ScriptCompilationInfo.PreviousScriptCompilation.get -> Microsoft.CodeAnalysisP.Compilation
Microsoft.CodeAnalysisP.ScriptCompilationInfo.ReturnType.get -> System.Type
Microsoft.CodeAnalysisP.ScriptCompilationInfo.WithPreviousScriptCompilation(Microsoft.CodeAnalysisP.Compilation compilation) -> Microsoft.CodeAnalysisP.ScriptCompilationInfo
Microsoft.CodeAnalysisP.SemanticModel
Microsoft.CodeAnalysisP.SemanticModel.Compilation.get -> Microsoft.CodeAnalysisP.Compilation
Microsoft.CodeAnalysisP.SemanticModel.GetConstantValue(Microsoft.CodeAnalysisP.SyntaxNode node, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysisP.Optional<object>
Microsoft.CodeAnalysisP.SemanticModel.GetEnclosingSymbol(int position, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysisP.ISymbol
Microsoft.CodeAnalysisP.SemanticModel.GetOperation(Microsoft.CodeAnalysisP.SyntaxNode node, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysisP.IOperation
Microsoft.CodeAnalysisP.SemanticModel.GetPreprocessingSymbolInfo(Microsoft.CodeAnalysisP.SyntaxNode nameSyntax) -> Microsoft.CodeAnalysisP.PreprocessingSymbolInfo
Microsoft.CodeAnalysisP.SemanticModel.IsAccessible(int position, Microsoft.CodeAnalysisP.ISymbol symbol) -> bool
Microsoft.CodeAnalysisP.SemanticModel.IsEventUsableAsField(int position, Microsoft.CodeAnalysisP.IEventSymbol eventSymbol) -> bool
Microsoft.CodeAnalysisP.SemanticModel.LookupBaseMembers(int position, string name = null) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ISymbol>
Microsoft.CodeAnalysisP.SemanticModel.LookupLabels(int position, string name = null) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ISymbol>
Microsoft.CodeAnalysisP.SemanticModel.LookupNamespacesAndTypes(int position, Microsoft.CodeAnalysisP.INamespaceOrTypeSymbol container = null, string name = null) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ISymbol>
Microsoft.CodeAnalysisP.SemanticModel.LookupStaticMembers(int position, Microsoft.CodeAnalysisP.INamespaceOrTypeSymbol container = null, string name = null) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ISymbol>
Microsoft.CodeAnalysisP.SemanticModel.LookupSymbols(int position, Microsoft.CodeAnalysisP.INamespaceOrTypeSymbol container = null, string name = null, bool includeReducedExtensionMethods = false) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ISymbol>
Microsoft.CodeAnalysisP.SemanticModel.ParentModel.get -> Microsoft.CodeAnalysisP.SemanticModel
Microsoft.CodeAnalysisP.SemanticModel.SemanticModel() -> void
Microsoft.CodeAnalysisP.SemanticModel.SyntaxTree.get -> Microsoft.CodeAnalysisP.SyntaxTree
Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>
Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>.Add(TNode node) -> Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>
Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>.AddRange(System.Collections.Generic.IEnumerable<TNode> nodes) -> Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>
Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>.Any() -> bool
Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>.Contains(TNode node) -> bool
Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>.Count.get -> int
Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>.Enumerator
Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>.Enumerator.Current.get -> TNode
Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>.Enumerator.MoveNext() -> bool
Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>.Enumerator.Reset() -> void
Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>.Equals(Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode> other) -> bool
Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>.First() -> TNode
Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>.FirstOrDefault() -> TNode
Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>.FullSpan.get -> Microsoft.CodeAnalysisP.Text.TextSpan
Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>.GetEnumerator() -> Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>.Enumerator
Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>.GetSeparator(int index) -> Microsoft.CodeAnalysisP.SyntaxToken
Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>.GetSeparators() -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxToken>
Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>.GetWithSeparators() -> Microsoft.CodeAnalysisP.SyntaxNodeOrTokenList
Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>.IndexOf(System.Func<TNode, bool> predicate) -> int
Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>.IndexOf(TNode node) -> int
Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>.Insert(int index, TNode node) -> Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>
Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>.InsertRange(int index, System.Collections.Generic.IEnumerable<TNode> nodes) -> Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>
Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>.Last() -> TNode
Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>.LastIndexOf(System.Func<TNode, bool> predicate) -> int
Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>.LastIndexOf(TNode node) -> int
Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>.LastOrDefault() -> TNode
Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>.Remove(TNode node) -> Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>
Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>.RemoveAt(int index) -> Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>
Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>.Replace(TNode nodeInList, TNode newNode) -> Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>
Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>.ReplaceRange(TNode nodeInList, System.Collections.Generic.IEnumerable<TNode> newNodes) -> Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>
Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>.ReplaceSeparator(Microsoft.CodeAnalysisP.SyntaxToken separatorToken, Microsoft.CodeAnalysisP.SyntaxToken newSeparator) -> Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>
Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>.SeparatorCount.get -> int
Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>.Span.get -> Microsoft.CodeAnalysisP.Text.TextSpan
Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>.this[int index].get -> TNode
Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>.ToFullString() -> string
Microsoft.CodeAnalysisP.SourceCodeKind
Microsoft.CodeAnalysisP.SourceCodeKind.Interactive = 2 -> Microsoft.CodeAnalysisP.SourceCodeKind
Microsoft.CodeAnalysisP.SourceCodeKind.Regular = 0 -> Microsoft.CodeAnalysisP.SourceCodeKind
Microsoft.CodeAnalysisP.SourceCodeKind.Script = 1 -> Microsoft.CodeAnalysisP.SourceCodeKind
Microsoft.CodeAnalysisP.SourceFileResolver
Microsoft.CodeAnalysisP.SourceFileResolver.BaseDirectory.get -> string
Microsoft.CodeAnalysisP.SourceFileResolver.Equals(Microsoft.CodeAnalysisP.SourceFileResolver other) -> bool
Microsoft.CodeAnalysisP.SourceFileResolver.PathMap.get -> System.Collections.Immutable.ImmutableArray<System.Collections.Generic.KeyValuePair<string, string>>
Microsoft.CodeAnalysisP.SourceFileResolver.SearchPaths.get -> System.Collections.Immutable.ImmutableArray<string>
Microsoft.CodeAnalysisP.SourceFileResolver.SourceFileResolver(System.Collections.Generic.IEnumerable<string> searchPaths, string baseDirectory) -> void
Microsoft.CodeAnalysisP.SourceFileResolver.SourceFileResolver(System.Collections.Immutable.ImmutableArray<string> searchPaths, string baseDirectory) -> void
Microsoft.CodeAnalysisP.SourceFileResolver.SourceFileResolver(System.Collections.Immutable.ImmutableArray<string> searchPaths, string baseDirectory, System.Collections.Immutable.ImmutableArray<System.Collections.Generic.KeyValuePair<string, string>> pathMap) -> void
Microsoft.CodeAnalysisP.SourceReferenceResolver
Microsoft.CodeAnalysisP.SourceReferenceResolver.SourceReferenceResolver() -> void
Microsoft.CodeAnalysisP.SpecialType
Microsoft.CodeAnalysisP.SpecialType.Count = 43 -> Microsoft.CodeAnalysisP.SpecialType
Microsoft.CodeAnalysisP.SpecialType.None = 0 -> Microsoft.CodeAnalysisP.SpecialType
Microsoft.CodeAnalysisP.SpecialType.System_ArgIterator = 37 -> Microsoft.CodeAnalysisP.SpecialType
Microsoft.CodeAnalysisP.SpecialType.System_Array = 23 -> Microsoft.CodeAnalysisP.SpecialType
Microsoft.CodeAnalysisP.SpecialType.System_AsyncCallback = 43 -> Microsoft.CodeAnalysisP.SpecialType
Microsoft.CodeAnalysisP.SpecialType.System_Boolean = 7 -> Microsoft.CodeAnalysisP.SpecialType
Microsoft.CodeAnalysisP.SpecialType.System_Byte = 10 -> Microsoft.CodeAnalysisP.SpecialType
Microsoft.CodeAnalysisP.SpecialType.System_Char = 8 -> Microsoft.CodeAnalysisP.SpecialType
Microsoft.CodeAnalysisP.SpecialType.System_Collections_Generic_ICollection_T = 27 -> Microsoft.CodeAnalysisP.SpecialType
Microsoft.CodeAnalysisP.SpecialType.System_Collections_Generic_IEnumerable_T = 25 -> Microsoft.CodeAnalysisP.SpecialType
Microsoft.CodeAnalysisP.SpecialType.System_Collections_Generic_IEnumerator_T = 29 -> Microsoft.CodeAnalysisP.SpecialType
Microsoft.CodeAnalysisP.SpecialType.System_Collections_Generic_IList_T = 26 -> Microsoft.CodeAnalysisP.SpecialType
Microsoft.CodeAnalysisP.SpecialType.System_Collections_Generic_IReadOnlyCollection_T = 31 -> Microsoft.CodeAnalysisP.SpecialType
Microsoft.CodeAnalysisP.SpecialType.System_Collections_Generic_IReadOnlyList_T = 30 -> Microsoft.CodeAnalysisP.SpecialType
Microsoft.CodeAnalysisP.SpecialType.System_Collections_IEnumerable = 24 -> Microsoft.CodeAnalysisP.SpecialType
Microsoft.CodeAnalysisP.SpecialType.System_Collections_IEnumerator = 28 -> Microsoft.CodeAnalysisP.SpecialType
Microsoft.CodeAnalysisP.SpecialType.System_DateTime = 33 -> Microsoft.CodeAnalysisP.SpecialType
Microsoft.CodeAnalysisP.SpecialType.System_Decimal = 17 -> Microsoft.CodeAnalysisP.SpecialType
Microsoft.CodeAnalysisP.SpecialType.System_Delegate = 4 -> Microsoft.CodeAnalysisP.SpecialType
Microsoft.CodeAnalysisP.SpecialType.System_Double = 19 -> Microsoft.CodeAnalysisP.SpecialType
Microsoft.CodeAnalysisP.SpecialType.System_Enum = 2 -> Microsoft.CodeAnalysisP.SpecialType
Microsoft.CodeAnalysisP.SpecialType.System_IAsyncResult = 42 -> Microsoft.CodeAnalysisP.SpecialType
Microsoft.CodeAnalysisP.SpecialType.System_IDisposable = 35 -> Microsoft.CodeAnalysisP.SpecialType
Microsoft.CodeAnalysisP.SpecialType.System_Int16 = 11 -> Microsoft.CodeAnalysisP.SpecialType
Microsoft.CodeAnalysisP.SpecialType.System_Int32 = 13 -> Microsoft.CodeAnalysisP.SpecialType
Microsoft.CodeAnalysisP.SpecialType.System_Int64 = 15 -> Microsoft.CodeAnalysisP.SpecialType
Microsoft.CodeAnalysisP.SpecialType.System_IntPtr = 21 -> Microsoft.CodeAnalysisP.SpecialType
Microsoft.CodeAnalysisP.SpecialType.System_MulticastDelegate = 3 -> Microsoft.CodeAnalysisP.SpecialType
Microsoft.CodeAnalysisP.SpecialType.System_Nullable_T = 32 -> Microsoft.CodeAnalysisP.SpecialType
Microsoft.CodeAnalysisP.SpecialType.System_Object = 1 -> Microsoft.CodeAnalysisP.SpecialType
Microsoft.CodeAnalysisP.SpecialType.System_Runtime_CompilerServices_IsVolatile = 34 -> Microsoft.CodeAnalysisP.SpecialType
Microsoft.CodeAnalysisP.SpecialType.System_RuntimeArgumentHandle = 38 -> Microsoft.CodeAnalysisP.SpecialType
Microsoft.CodeAnalysisP.SpecialType.System_RuntimeFieldHandle = 39 -> Microsoft.CodeAnalysisP.SpecialType
Microsoft.CodeAnalysisP.SpecialType.System_RuntimeMethodHandle = 40 -> Microsoft.CodeAnalysisP.SpecialType
Microsoft.CodeAnalysisP.SpecialType.System_RuntimeTypeHandle = 41 -> Microsoft.CodeAnalysisP.SpecialType
Microsoft.CodeAnalysisP.SpecialType.System_SByte = 9 -> Microsoft.CodeAnalysisP.SpecialType
Microsoft.CodeAnalysisP.SpecialType.System_Single = 18 -> Microsoft.CodeAnalysisP.SpecialType
Microsoft.CodeAnalysisP.SpecialType.System_String = 20 -> Microsoft.CodeAnalysisP.SpecialType
Microsoft.CodeAnalysisP.SpecialType.System_TypedReference = 36 -> Microsoft.CodeAnalysisP.SpecialType
Microsoft.CodeAnalysisP.SpecialType.System_UInt16 = 12 -> Microsoft.CodeAnalysisP.SpecialType
Microsoft.CodeAnalysisP.SpecialType.System_UInt32 = 14 -> Microsoft.CodeAnalysisP.SpecialType
Microsoft.CodeAnalysisP.SpecialType.System_UInt64 = 16 -> Microsoft.CodeAnalysisP.SpecialType
Microsoft.CodeAnalysisP.SpecialType.System_UIntPtr = 22 -> Microsoft.CodeAnalysisP.SpecialType
Microsoft.CodeAnalysisP.SpecialType.System_ValueType = 5 -> Microsoft.CodeAnalysisP.SpecialType
Microsoft.CodeAnalysisP.SpecialType.System_Void = 6 -> Microsoft.CodeAnalysisP.SpecialType
Microsoft.CodeAnalysisP.SpeculativeBindingOption
Microsoft.CodeAnalysisP.SpeculativeBindingOption.BindAsExpression = 0 -> Microsoft.CodeAnalysisP.SpeculativeBindingOption
Microsoft.CodeAnalysisP.SpeculativeBindingOption.BindAsTypeOrNamespace = 1 -> Microsoft.CodeAnalysisP.SpeculativeBindingOption
Microsoft.CodeAnalysisP.StrongNameProvider
Microsoft.CodeAnalysisP.StrongNameProvider.StrongNameProvider() -> void
Microsoft.CodeAnalysisP.SubsystemVersion
Microsoft.CodeAnalysisP.SubsystemVersion.Equals(Microsoft.CodeAnalysisP.SubsystemVersion other) -> bool
Microsoft.CodeAnalysisP.SubsystemVersion.IsValid.get -> bool
Microsoft.CodeAnalysisP.SubsystemVersion.Major.get -> int
Microsoft.CodeAnalysisP.SubsystemVersion.Minor.get -> int
Microsoft.CodeAnalysisP.SymbolDisplayDelegateStyle
Microsoft.CodeAnalysisP.SymbolDisplayDelegateStyle.NameAndParameters = 1 -> Microsoft.CodeAnalysisP.SymbolDisplayDelegateStyle
Microsoft.CodeAnalysisP.SymbolDisplayDelegateStyle.NameAndSignature = 2 -> Microsoft.CodeAnalysisP.SymbolDisplayDelegateStyle
Microsoft.CodeAnalysisP.SymbolDisplayDelegateStyle.NameOnly = 0 -> Microsoft.CodeAnalysisP.SymbolDisplayDelegateStyle
Microsoft.CodeAnalysisP.SymbolDisplayExtensionMethodStyle
Microsoft.CodeAnalysisP.SymbolDisplayExtensionMethodStyle.Default = 0 -> Microsoft.CodeAnalysisP.SymbolDisplayExtensionMethodStyle
Microsoft.CodeAnalysisP.SymbolDisplayExtensionMethodStyle.InstanceMethod = 1 -> Microsoft.CodeAnalysisP.SymbolDisplayExtensionMethodStyle
Microsoft.CodeAnalysisP.SymbolDisplayExtensionMethodStyle.StaticMethod = 2 -> Microsoft.CodeAnalysisP.SymbolDisplayExtensionMethodStyle
Microsoft.CodeAnalysisP.SymbolDisplayExtensions
Microsoft.CodeAnalysisP.SymbolDisplayFormat
Microsoft.CodeAnalysisP.SymbolDisplayFormat.AddGenericsOptions(Microsoft.CodeAnalysisP.SymbolDisplayGenericsOptions options) -> Microsoft.CodeAnalysisP.SymbolDisplayFormat
Microsoft.CodeAnalysisP.SymbolDisplayFormat.AddKindOptions(Microsoft.CodeAnalysisP.SymbolDisplayKindOptions options) -> Microsoft.CodeAnalysisP.SymbolDisplayFormat
Microsoft.CodeAnalysisP.SymbolDisplayFormat.AddLocalOptions(Microsoft.CodeAnalysisP.SymbolDisplayLocalOptions options) -> Microsoft.CodeAnalysisP.SymbolDisplayFormat
Microsoft.CodeAnalysisP.SymbolDisplayFormat.AddMemberOptions(Microsoft.CodeAnalysisP.SymbolDisplayMemberOptions options) -> Microsoft.CodeAnalysisP.SymbolDisplayFormat
Microsoft.CodeAnalysisP.SymbolDisplayFormat.AddMiscellaneousOptions(Microsoft.CodeAnalysisP.SymbolDisplayMiscellaneousOptions options) -> Microsoft.CodeAnalysisP.SymbolDisplayFormat
Microsoft.CodeAnalysisP.SymbolDisplayFormat.AddParameterOptions(Microsoft.CodeAnalysisP.SymbolDisplayParameterOptions options) -> Microsoft.CodeAnalysisP.SymbolDisplayFormat
Microsoft.CodeAnalysisP.SymbolDisplayFormat.DelegateStyle.get -> Microsoft.CodeAnalysisP.SymbolDisplayDelegateStyle
Microsoft.CodeAnalysisP.SymbolDisplayFormat.ExtensionMethodStyle.get -> Microsoft.CodeAnalysisP.SymbolDisplayExtensionMethodStyle
Microsoft.CodeAnalysisP.SymbolDisplayFormat.GenericsOptions.get -> Microsoft.CodeAnalysisP.SymbolDisplayGenericsOptions
Microsoft.CodeAnalysisP.SymbolDisplayFormat.GlobalNamespaceStyle.get -> Microsoft.CodeAnalysisP.SymbolDisplayGlobalNamespaceStyle
Microsoft.CodeAnalysisP.SymbolDisplayFormat.KindOptions.get -> Microsoft.CodeAnalysisP.SymbolDisplayKindOptions
Microsoft.CodeAnalysisP.SymbolDisplayFormat.LocalOptions.get -> Microsoft.CodeAnalysisP.SymbolDisplayLocalOptions
Microsoft.CodeAnalysisP.SymbolDisplayFormat.MemberOptions.get -> Microsoft.CodeAnalysisP.SymbolDisplayMemberOptions
Microsoft.CodeAnalysisP.SymbolDisplayFormat.MiscellaneousOptions.get -> Microsoft.CodeAnalysisP.SymbolDisplayMiscellaneousOptions
Microsoft.CodeAnalysisP.SymbolDisplayFormat.ParameterOptions.get -> Microsoft.CodeAnalysisP.SymbolDisplayParameterOptions
Microsoft.CodeAnalysisP.SymbolDisplayFormat.PropertyStyle.get -> Microsoft.CodeAnalysisP.SymbolDisplayPropertyStyle
Microsoft.CodeAnalysisP.SymbolDisplayFormat.RemoveGenericsOptions(Microsoft.CodeAnalysisP.SymbolDisplayGenericsOptions options) -> Microsoft.CodeAnalysisP.SymbolDisplayFormat
Microsoft.CodeAnalysisP.SymbolDisplayFormat.RemoveKindOptions(Microsoft.CodeAnalysisP.SymbolDisplayKindOptions options) -> Microsoft.CodeAnalysisP.SymbolDisplayFormat
Microsoft.CodeAnalysisP.SymbolDisplayFormat.RemoveLocalOptions(Microsoft.CodeAnalysisP.SymbolDisplayLocalOptions options) -> Microsoft.CodeAnalysisP.SymbolDisplayFormat
Microsoft.CodeAnalysisP.SymbolDisplayFormat.RemoveMemberOptions(Microsoft.CodeAnalysisP.SymbolDisplayMemberOptions options) -> Microsoft.CodeAnalysisP.SymbolDisplayFormat
Microsoft.CodeAnalysisP.SymbolDisplayFormat.RemoveMiscellaneousOptions(Microsoft.CodeAnalysisP.SymbolDisplayMiscellaneousOptions options) -> Microsoft.CodeAnalysisP.SymbolDisplayFormat
Microsoft.CodeAnalysisP.SymbolDisplayFormat.RemoveParameterOptions(Microsoft.CodeAnalysisP.SymbolDisplayParameterOptions options) -> Microsoft.CodeAnalysisP.SymbolDisplayFormat
Microsoft.CodeAnalysisP.SymbolDisplayFormat.SymbolDisplayFormat(Microsoft.CodeAnalysisP.SymbolDisplayGlobalNamespaceStyle globalNamespaceStyle = Microsoft.CodeAnalysisP.SymbolDisplayGlobalNamespaceStyle.Omitted, Microsoft.CodeAnalysisP.SymbolDisplayTypeQualificationStyle typeQualificationStyle = Microsoft.CodeAnalysisP.SymbolDisplayTypeQualificationStyle.NameOnly, Microsoft.CodeAnalysisP.SymbolDisplayGenericsOptions genericsOptions = Microsoft.CodeAnalysisP.SymbolDisplayGenericsOptions.None, Microsoft.CodeAnalysisP.SymbolDisplayMemberOptions memberOptions = Microsoft.CodeAnalysisP.SymbolDisplayMemberOptions.None, Microsoft.CodeAnalysisP.SymbolDisplayDelegateStyle delegateStyle = Microsoft.CodeAnalysisP.SymbolDisplayDelegateStyle.NameOnly, Microsoft.CodeAnalysisP.SymbolDisplayExtensionMethodStyle extensionMethodStyle = Microsoft.CodeAnalysisP.SymbolDisplayExtensionMethodStyle.Default, Microsoft.CodeAnalysisP.SymbolDisplayParameterOptions parameterOptions = Microsoft.CodeAnalysisP.SymbolDisplayParameterOptions.None, Microsoft.CodeAnalysisP.SymbolDisplayPropertyStyle propertyStyle = Microsoft.CodeAnalysisP.SymbolDisplayPropertyStyle.NameOnly, Microsoft.CodeAnalysisP.SymbolDisplayLocalOptions localOptions = Microsoft.CodeAnalysisP.SymbolDisplayLocalOptions.None, Microsoft.CodeAnalysisP.SymbolDisplayKindOptions kindOptions = Microsoft.CodeAnalysisP.SymbolDisplayKindOptions.None, Microsoft.CodeAnalysisP.SymbolDisplayMiscellaneousOptions miscellaneousOptions = Microsoft.CodeAnalysisP.SymbolDisplayMiscellaneousOptions.None) -> void
Microsoft.CodeAnalysisP.SymbolDisplayFormat.TypeQualificationStyle.get -> Microsoft.CodeAnalysisP.SymbolDisplayTypeQualificationStyle
Microsoft.CodeAnalysisP.SymbolDisplayFormat.WithGenericsOptions(Microsoft.CodeAnalysisP.SymbolDisplayGenericsOptions options) -> Microsoft.CodeAnalysisP.SymbolDisplayFormat
Microsoft.CodeAnalysisP.SymbolDisplayFormat.WithGlobalNamespaceStyle(Microsoft.CodeAnalysisP.SymbolDisplayGlobalNamespaceStyle style) -> Microsoft.CodeAnalysisP.SymbolDisplayFormat
Microsoft.CodeAnalysisP.SymbolDisplayFormat.WithKindOptions(Microsoft.CodeAnalysisP.SymbolDisplayKindOptions options) -> Microsoft.CodeAnalysisP.SymbolDisplayFormat
Microsoft.CodeAnalysisP.SymbolDisplayFormat.WithLocalOptions(Microsoft.CodeAnalysisP.SymbolDisplayLocalOptions options) -> Microsoft.CodeAnalysisP.SymbolDisplayFormat
Microsoft.CodeAnalysisP.SymbolDisplayFormat.WithMemberOptions(Microsoft.CodeAnalysisP.SymbolDisplayMemberOptions options) -> Microsoft.CodeAnalysisP.SymbolDisplayFormat
Microsoft.CodeAnalysisP.SymbolDisplayFormat.WithMiscellaneousOptions(Microsoft.CodeAnalysisP.SymbolDisplayMiscellaneousOptions options) -> Microsoft.CodeAnalysisP.SymbolDisplayFormat
Microsoft.CodeAnalysisP.SymbolDisplayFormat.WithParameterOptions(Microsoft.CodeAnalysisP.SymbolDisplayParameterOptions options) -> Microsoft.CodeAnalysisP.SymbolDisplayFormat
Microsoft.CodeAnalysisP.SymbolDisplayGenericsOptions
Microsoft.CodeAnalysisP.SymbolDisplayGenericsOptions.IncludeTypeConstraints = 2 -> Microsoft.CodeAnalysisP.SymbolDisplayGenericsOptions
Microsoft.CodeAnalysisP.SymbolDisplayGenericsOptions.IncludeTypeParameters = 1 -> Microsoft.CodeAnalysisP.SymbolDisplayGenericsOptions
Microsoft.CodeAnalysisP.SymbolDisplayGenericsOptions.IncludeVariance = 4 -> Microsoft.CodeAnalysisP.SymbolDisplayGenericsOptions
Microsoft.CodeAnalysisP.SymbolDisplayGenericsOptions.None = 0 -> Microsoft.CodeAnalysisP.SymbolDisplayGenericsOptions
Microsoft.CodeAnalysisP.SymbolDisplayGlobalNamespaceStyle
Microsoft.CodeAnalysisP.SymbolDisplayGlobalNamespaceStyle.Included = 2 -> Microsoft.CodeAnalysisP.SymbolDisplayGlobalNamespaceStyle
Microsoft.CodeAnalysisP.SymbolDisplayGlobalNamespaceStyle.Omitted = 0 -> Microsoft.CodeAnalysisP.SymbolDisplayGlobalNamespaceStyle
Microsoft.CodeAnalysisP.SymbolDisplayGlobalNamespaceStyle.OmittedAsContaining = 1 -> Microsoft.CodeAnalysisP.SymbolDisplayGlobalNamespaceStyle
Microsoft.CodeAnalysisP.SymbolDisplayKindOptions
Microsoft.CodeAnalysisP.SymbolDisplayKindOptions.IncludeMemberKeyword = 4 -> Microsoft.CodeAnalysisP.SymbolDisplayKindOptions
Microsoft.CodeAnalysisP.SymbolDisplayKindOptions.IncludeNamespaceKeyword = 1 -> Microsoft.CodeAnalysisP.SymbolDisplayKindOptions
Microsoft.CodeAnalysisP.SymbolDisplayKindOptions.IncludeTypeKeyword = 2 -> Microsoft.CodeAnalysisP.SymbolDisplayKindOptions
Microsoft.CodeAnalysisP.SymbolDisplayKindOptions.None = 0 -> Microsoft.CodeAnalysisP.SymbolDisplayKindOptions
Microsoft.CodeAnalysisP.SymbolDisplayLocalOptions
Microsoft.CodeAnalysisP.SymbolDisplayLocalOptions.IncludeConstantValue = 2 -> Microsoft.CodeAnalysisP.SymbolDisplayLocalOptions
Microsoft.CodeAnalysisP.SymbolDisplayLocalOptions.IncludeRef = 4 -> Microsoft.CodeAnalysisP.SymbolDisplayLocalOptions
Microsoft.CodeAnalysisP.SymbolDisplayLocalOptions.IncludeType = 1 -> Microsoft.CodeAnalysisP.SymbolDisplayLocalOptions
Microsoft.CodeAnalysisP.SymbolDisplayLocalOptions.None = 0 -> Microsoft.CodeAnalysisP.SymbolDisplayLocalOptions
Microsoft.CodeAnalysisP.SymbolDisplayMemberOptions
Microsoft.CodeAnalysisP.SymbolDisplayMemberOptions.IncludeAccessibility = 4 -> Microsoft.CodeAnalysisP.SymbolDisplayMemberOptions
Microsoft.CodeAnalysisP.SymbolDisplayMemberOptions.IncludeConstantValue = 64 -> Microsoft.CodeAnalysisP.SymbolDisplayMemberOptions
Microsoft.CodeAnalysisP.SymbolDisplayMemberOptions.IncludeContainingType = 32 -> Microsoft.CodeAnalysisP.SymbolDisplayMemberOptions
Microsoft.CodeAnalysisP.SymbolDisplayMemberOptions.IncludeExplicitInterface = 8 -> Microsoft.CodeAnalysisP.SymbolDisplayMemberOptions
Microsoft.CodeAnalysisP.SymbolDisplayMemberOptions.IncludeModifiers = 2 -> Microsoft.CodeAnalysisP.SymbolDisplayMemberOptions
Microsoft.CodeAnalysisP.SymbolDisplayMemberOptions.IncludeParameters = 16 -> Microsoft.CodeAnalysisP.SymbolDisplayMemberOptions
Microsoft.CodeAnalysisP.SymbolDisplayMemberOptions.IncludeRef = 128 -> Microsoft.CodeAnalysisP.SymbolDisplayMemberOptions
Microsoft.CodeAnalysisP.SymbolDisplayMemberOptions.IncludeType = 1 -> Microsoft.CodeAnalysisP.SymbolDisplayMemberOptions
Microsoft.CodeAnalysisP.SymbolDisplayMemberOptions.None = 0 -> Microsoft.CodeAnalysisP.SymbolDisplayMemberOptions
Microsoft.CodeAnalysisP.SymbolDisplayMiscellaneousOptions
Microsoft.CodeAnalysisP.SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers = 2 -> Microsoft.CodeAnalysisP.SymbolDisplayMiscellaneousOptions
Microsoft.CodeAnalysisP.SymbolDisplayMiscellaneousOptions.ExpandNullable = 32 -> Microsoft.CodeAnalysisP.SymbolDisplayMiscellaneousOptions
Microsoft.CodeAnalysisP.SymbolDisplayMiscellaneousOptions.None = 0 -> Microsoft.CodeAnalysisP.SymbolDisplayMiscellaneousOptions
Microsoft.CodeAnalysisP.SymbolDisplayMiscellaneousOptions.RemoveAttributeSuffix = 16 -> Microsoft.CodeAnalysisP.SymbolDisplayMiscellaneousOptions
Microsoft.CodeAnalysisP.SymbolDisplayMiscellaneousOptions.UseAsterisksInMultiDimensionalArrays = 4 -> Microsoft.CodeAnalysisP.SymbolDisplayMiscellaneousOptions
Microsoft.CodeAnalysisP.SymbolDisplayMiscellaneousOptions.UseErrorTypeSymbolName = 8 -> Microsoft.CodeAnalysisP.SymbolDisplayMiscellaneousOptions
Microsoft.CodeAnalysisP.SymbolDisplayMiscellaneousOptions.UseSpecialTypes = 1 -> Microsoft.CodeAnalysisP.SymbolDisplayMiscellaneousOptions
Microsoft.CodeAnalysisP.SymbolDisplayParameterOptions
Microsoft.CodeAnalysisP.SymbolDisplayParameterOptions.IncludeDefaultValue = 16 -> Microsoft.CodeAnalysisP.SymbolDisplayParameterOptions
Microsoft.CodeAnalysisP.SymbolDisplayParameterOptions.IncludeExtensionThis = 1 -> Microsoft.CodeAnalysisP.SymbolDisplayParameterOptions
Microsoft.CodeAnalysisP.SymbolDisplayParameterOptions.IncludeName = 8 -> Microsoft.CodeAnalysisP.SymbolDisplayParameterOptions
Microsoft.CodeAnalysisP.SymbolDisplayParameterOptions.IncludeOptionalBrackets = 32 -> Microsoft.CodeAnalysisP.SymbolDisplayParameterOptions
Microsoft.CodeAnalysisP.SymbolDisplayParameterOptions.IncludeParamsRefOut = 2 -> Microsoft.CodeAnalysisP.SymbolDisplayParameterOptions
Microsoft.CodeAnalysisP.SymbolDisplayParameterOptions.IncludeType = 4 -> Microsoft.CodeAnalysisP.SymbolDisplayParameterOptions
Microsoft.CodeAnalysisP.SymbolDisplayParameterOptions.None = 0 -> Microsoft.CodeAnalysisP.SymbolDisplayParameterOptions
Microsoft.CodeAnalysisP.SymbolDisplayPart
Microsoft.CodeAnalysisP.SymbolDisplayPart.Kind.get -> Microsoft.CodeAnalysisP.SymbolDisplayPartKind
Microsoft.CodeAnalysisP.SymbolDisplayPart.Symbol.get -> Microsoft.CodeAnalysisP.ISymbol
Microsoft.CodeAnalysisP.SymbolDisplayPart.SymbolDisplayPart(Microsoft.CodeAnalysisP.SymbolDisplayPartKind kind, Microsoft.CodeAnalysisP.ISymbol symbol, string text) -> void
Microsoft.CodeAnalysisP.SymbolDisplayPartKind
Microsoft.CodeAnalysisP.SymbolDisplayPartKind.AliasName = 0 -> Microsoft.CodeAnalysisP.SymbolDisplayPartKind
Microsoft.CodeAnalysisP.SymbolDisplayPartKind.AnonymousTypeIndicator = 24 -> Microsoft.CodeAnalysisP.SymbolDisplayPartKind
Microsoft.CodeAnalysisP.SymbolDisplayPartKind.AssemblyName = 1 -> Microsoft.CodeAnalysisP.SymbolDisplayPartKind
Microsoft.CodeAnalysisP.SymbolDisplayPartKind.ClassName = 2 -> Microsoft.CodeAnalysisP.SymbolDisplayPartKind
Microsoft.CodeAnalysisP.SymbolDisplayPartKind.DelegateName = 3 -> Microsoft.CodeAnalysisP.SymbolDisplayPartKind
Microsoft.CodeAnalysisP.SymbolDisplayPartKind.EnumName = 4 -> Microsoft.CodeAnalysisP.SymbolDisplayPartKind
Microsoft.CodeAnalysisP.SymbolDisplayPartKind.ErrorTypeName = 5 -> Microsoft.CodeAnalysisP.SymbolDisplayPartKind
Microsoft.CodeAnalysisP.SymbolDisplayPartKind.EventName = 6 -> Microsoft.CodeAnalysisP.SymbolDisplayPartKind
Microsoft.CodeAnalysisP.SymbolDisplayPartKind.FieldName = 7 -> Microsoft.CodeAnalysisP.SymbolDisplayPartKind
Microsoft.CodeAnalysisP.SymbolDisplayPartKind.InterfaceName = 8 -> Microsoft.CodeAnalysisP.SymbolDisplayPartKind
Microsoft.CodeAnalysisP.SymbolDisplayPartKind.Keyword = 9 -> Microsoft.CodeAnalysisP.SymbolDisplayPartKind
Microsoft.CodeAnalysisP.SymbolDisplayPartKind.LabelName = 10 -> Microsoft.CodeAnalysisP.SymbolDisplayPartKind
Microsoft.CodeAnalysisP.SymbolDisplayPartKind.LineBreak = 11 -> Microsoft.CodeAnalysisP.SymbolDisplayPartKind
Microsoft.CodeAnalysisP.SymbolDisplayPartKind.LocalName = 14 -> Microsoft.CodeAnalysisP.SymbolDisplayPartKind
Microsoft.CodeAnalysisP.SymbolDisplayPartKind.MethodName = 15 -> Microsoft.CodeAnalysisP.SymbolDisplayPartKind
Microsoft.CodeAnalysisP.SymbolDisplayPartKind.ModuleName = 16 -> Microsoft.CodeAnalysisP.SymbolDisplayPartKind
Microsoft.CodeAnalysisP.SymbolDisplayPartKind.NamespaceName = 17 -> Microsoft.CodeAnalysisP.SymbolDisplayPartKind
Microsoft.CodeAnalysisP.SymbolDisplayPartKind.NumericLiteral = 12 -> Microsoft.CodeAnalysisP.SymbolDisplayPartKind
Microsoft.CodeAnalysisP.SymbolDisplayPartKind.Operator = 18 -> Microsoft.CodeAnalysisP.SymbolDisplayPartKind
Microsoft.CodeAnalysisP.SymbolDisplayPartKind.ParameterName = 19 -> Microsoft.CodeAnalysisP.SymbolDisplayPartKind
Microsoft.CodeAnalysisP.SymbolDisplayPartKind.PropertyName = 20 -> Microsoft.CodeAnalysisP.SymbolDisplayPartKind
Microsoft.CodeAnalysisP.SymbolDisplayPartKind.Punctuation = 21 -> Microsoft.CodeAnalysisP.SymbolDisplayPartKind
Microsoft.CodeAnalysisP.SymbolDisplayPartKind.RangeVariableName = 27 -> Microsoft.CodeAnalysisP.SymbolDisplayPartKind
Microsoft.CodeAnalysisP.SymbolDisplayPartKind.Space = 22 -> Microsoft.CodeAnalysisP.SymbolDisplayPartKind
Microsoft.CodeAnalysisP.SymbolDisplayPartKind.StringLiteral = 13 -> Microsoft.CodeAnalysisP.SymbolDisplayPartKind
Microsoft.CodeAnalysisP.SymbolDisplayPartKind.StructName = 23 -> Microsoft.CodeAnalysisP.SymbolDisplayPartKind
Microsoft.CodeAnalysisP.SymbolDisplayPartKind.Text = 25 -> Microsoft.CodeAnalysisP.SymbolDisplayPartKind
Microsoft.CodeAnalysisP.SymbolDisplayPartKind.TypeParameterName = 26 -> Microsoft.CodeAnalysisP.SymbolDisplayPartKind
Microsoft.CodeAnalysisP.SymbolDisplayPropertyStyle
Microsoft.CodeAnalysisP.SymbolDisplayPropertyStyle.NameOnly = 0 -> Microsoft.CodeAnalysisP.SymbolDisplayPropertyStyle
Microsoft.CodeAnalysisP.SymbolDisplayPropertyStyle.ShowReadWriteDescriptor = 1 -> Microsoft.CodeAnalysisP.SymbolDisplayPropertyStyle
Microsoft.CodeAnalysisP.SymbolDisplayTypeQualificationStyle
Microsoft.CodeAnalysisP.SymbolDisplayTypeQualificationStyle.NameAndContainingTypes = 1 -> Microsoft.CodeAnalysisP.SymbolDisplayTypeQualificationStyle
Microsoft.CodeAnalysisP.SymbolDisplayTypeQualificationStyle.NameAndContainingTypesAndNamespaces = 2 -> Microsoft.CodeAnalysisP.SymbolDisplayTypeQualificationStyle
Microsoft.CodeAnalysisP.SymbolDisplayTypeQualificationStyle.NameOnly = 0 -> Microsoft.CodeAnalysisP.SymbolDisplayTypeQualificationStyle
Microsoft.CodeAnalysisP.SymbolFilter
Microsoft.CodeAnalysisP.SymbolFilter.All = Microsoft.CodeAnalysisP.SymbolFilter.Namespace | Microsoft.CodeAnalysisP.SymbolFilter.TypeAndMember -> Microsoft.CodeAnalysisP.SymbolFilter
Microsoft.CodeAnalysisP.SymbolFilter.Member = 4 -> Microsoft.CodeAnalysisP.SymbolFilter
Microsoft.CodeAnalysisP.SymbolFilter.Namespace = 1 -> Microsoft.CodeAnalysisP.SymbolFilter
Microsoft.CodeAnalysisP.SymbolFilter.None = 0 -> Microsoft.CodeAnalysisP.SymbolFilter
Microsoft.CodeAnalysisP.SymbolFilter.Type = 2 -> Microsoft.CodeAnalysisP.SymbolFilter
Microsoft.CodeAnalysisP.SymbolFilter.TypeAndMember = Microsoft.CodeAnalysisP.SymbolFilter.Type | Microsoft.CodeAnalysisP.SymbolFilter.Member -> Microsoft.CodeAnalysisP.SymbolFilter
Microsoft.CodeAnalysisP.SymbolInfo
Microsoft.CodeAnalysisP.SymbolInfo.CandidateReason.get -> Microsoft.CodeAnalysisP.CandidateReason
Microsoft.CodeAnalysisP.SymbolInfo.CandidateSymbols.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ISymbol>
Microsoft.CodeAnalysisP.SymbolInfo.Equals(Microsoft.CodeAnalysisP.SymbolInfo other) -> bool
Microsoft.CodeAnalysisP.SymbolInfo.Symbol.get -> Microsoft.CodeAnalysisP.ISymbol
Microsoft.CodeAnalysisP.SymbolKind
Microsoft.CodeAnalysisP.SymbolKind.Alias = 0 -> Microsoft.CodeAnalysisP.SymbolKind
Microsoft.CodeAnalysisP.SymbolKind.ArrayType = 1 -> Microsoft.CodeAnalysisP.SymbolKind
Microsoft.CodeAnalysisP.SymbolKind.Assembly = 2 -> Microsoft.CodeAnalysisP.SymbolKind
Microsoft.CodeAnalysisP.SymbolKind.Discard = 19 -> Microsoft.CodeAnalysisP.SymbolKind
Microsoft.CodeAnalysisP.SymbolKind.DynamicType = 3 -> Microsoft.CodeAnalysisP.SymbolKind
Microsoft.CodeAnalysisP.SymbolKind.ErrorType = 4 -> Microsoft.CodeAnalysisP.SymbolKind
Microsoft.CodeAnalysisP.SymbolKind.Event = 5 -> Microsoft.CodeAnalysisP.SymbolKind
Microsoft.CodeAnalysisP.SymbolKind.Field = 6 -> Microsoft.CodeAnalysisP.SymbolKind
Microsoft.CodeAnalysisP.SymbolKind.Label = 7 -> Microsoft.CodeAnalysisP.SymbolKind
Microsoft.CodeAnalysisP.SymbolKind.Local = 8 -> Microsoft.CodeAnalysisP.SymbolKind
Microsoft.CodeAnalysisP.SymbolKind.Method = 9 -> Microsoft.CodeAnalysisP.SymbolKind
Microsoft.CodeAnalysisP.SymbolKind.NamedType = 11 -> Microsoft.CodeAnalysisP.SymbolKind
Microsoft.CodeAnalysisP.SymbolKind.Namespace = 12 -> Microsoft.CodeAnalysisP.SymbolKind
Microsoft.CodeAnalysisP.SymbolKind.NetModule = 10 -> Microsoft.CodeAnalysisP.SymbolKind
Microsoft.CodeAnalysisP.SymbolKind.Parameter = 13 -> Microsoft.CodeAnalysisP.SymbolKind
Microsoft.CodeAnalysisP.SymbolKind.PointerType = 14 -> Microsoft.CodeAnalysisP.SymbolKind
Microsoft.CodeAnalysisP.SymbolKind.Preprocessing = 18 -> Microsoft.CodeAnalysisP.SymbolKind
Microsoft.CodeAnalysisP.SymbolKind.Property = 15 -> Microsoft.CodeAnalysisP.SymbolKind
Microsoft.CodeAnalysisP.SymbolKind.RangeVariable = 16 -> Microsoft.CodeAnalysisP.SymbolKind
Microsoft.CodeAnalysisP.SymbolKind.TypeParameter = 17 -> Microsoft.CodeAnalysisP.SymbolKind
Microsoft.CodeAnalysisP.SymbolVisitor
Microsoft.CodeAnalysisP.SymbolVisitor.SymbolVisitor() -> void
Microsoft.CodeAnalysisP.SymbolVisitor<TResult>
Microsoft.CodeAnalysisP.SymbolVisitor<TResult>.SymbolVisitor() -> void
Microsoft.CodeAnalysisP.SyntaxAnnotation
Microsoft.CodeAnalysisP.SyntaxAnnotation.Data.get -> string
Microsoft.CodeAnalysisP.SyntaxAnnotation.Equals(Microsoft.CodeAnalysisP.SyntaxAnnotation other) -> bool
Microsoft.CodeAnalysisP.SyntaxAnnotation.Kind.get -> string
Microsoft.CodeAnalysisP.SyntaxAnnotation.SyntaxAnnotation() -> void
Microsoft.CodeAnalysisP.SyntaxAnnotation.SyntaxAnnotation(string kind) -> void
Microsoft.CodeAnalysisP.SyntaxAnnotation.SyntaxAnnotation(string kind, string data) -> void
Microsoft.CodeAnalysisP.SyntaxList<TNode>
Microsoft.CodeAnalysisP.SyntaxList<TNode>.Add(TNode node) -> Microsoft.CodeAnalysisP.SyntaxList<TNode>
Microsoft.CodeAnalysisP.SyntaxList<TNode>.AddRange(System.Collections.Generic.IEnumerable<TNode> nodes) -> Microsoft.CodeAnalysisP.SyntaxList<TNode>
Microsoft.CodeAnalysisP.SyntaxList<TNode>.Any() -> bool
Microsoft.CodeAnalysisP.SyntaxList<TNode>.Count.get -> int
Microsoft.CodeAnalysisP.SyntaxList<TNode>.Enumerator
Microsoft.CodeAnalysisP.SyntaxList<TNode>.Enumerator.Current.get -> TNode
Microsoft.CodeAnalysisP.SyntaxList<TNode>.Enumerator.MoveNext() -> bool
Microsoft.CodeAnalysisP.SyntaxList<TNode>.Enumerator.Reset() -> void
Microsoft.CodeAnalysisP.SyntaxList<TNode>.Equals(Microsoft.CodeAnalysisP.SyntaxList<TNode> other) -> bool
Microsoft.CodeAnalysisP.SyntaxList<TNode>.First() -> TNode
Microsoft.CodeAnalysisP.SyntaxList<TNode>.FirstOrDefault() -> TNode
Microsoft.CodeAnalysisP.SyntaxList<TNode>.FullSpan.get -> Microsoft.CodeAnalysisP.Text.TextSpan
Microsoft.CodeAnalysisP.SyntaxList<TNode>.GetEnumerator() -> Microsoft.CodeAnalysisP.SyntaxList<TNode>.Enumerator
Microsoft.CodeAnalysisP.SyntaxList<TNode>.IndexOf(System.Func<TNode, bool> predicate) -> int
Microsoft.CodeAnalysisP.SyntaxList<TNode>.IndexOf(TNode node) -> int
Microsoft.CodeAnalysisP.SyntaxList<TNode>.Insert(int index, TNode node) -> Microsoft.CodeAnalysisP.SyntaxList<TNode>
Microsoft.CodeAnalysisP.SyntaxList<TNode>.InsertRange(int index, System.Collections.Generic.IEnumerable<TNode> nodes) -> Microsoft.CodeAnalysisP.SyntaxList<TNode>
Microsoft.CodeAnalysisP.SyntaxList<TNode>.Last() -> TNode
Microsoft.CodeAnalysisP.SyntaxList<TNode>.LastIndexOf(System.Func<TNode, bool> predicate) -> int
Microsoft.CodeAnalysisP.SyntaxList<TNode>.LastIndexOf(TNode node) -> int
Microsoft.CodeAnalysisP.SyntaxList<TNode>.LastOrDefault() -> TNode
Microsoft.CodeAnalysisP.SyntaxList<TNode>.Remove(TNode node) -> Microsoft.CodeAnalysisP.SyntaxList<TNode>
Microsoft.CodeAnalysisP.SyntaxList<TNode>.RemoveAt(int index) -> Microsoft.CodeAnalysisP.SyntaxList<TNode>
Microsoft.CodeAnalysisP.SyntaxList<TNode>.Replace(TNode nodeInList, TNode newNode) -> Microsoft.CodeAnalysisP.SyntaxList<TNode>
Microsoft.CodeAnalysisP.SyntaxList<TNode>.ReplaceRange(TNode nodeInList, System.Collections.Generic.IEnumerable<TNode> newNodes) -> Microsoft.CodeAnalysisP.SyntaxList<TNode>
Microsoft.CodeAnalysisP.SyntaxList<TNode>.Span.get -> Microsoft.CodeAnalysisP.Text.TextSpan
Microsoft.CodeAnalysisP.SyntaxList<TNode>.SyntaxList(System.Collections.Generic.IEnumerable<TNode> nodes) -> void
Microsoft.CodeAnalysisP.SyntaxList<TNode>.SyntaxList(TNode node) -> void
Microsoft.CodeAnalysisP.SyntaxList<TNode>.this[int index].get -> TNode
Microsoft.CodeAnalysisP.SyntaxList<TNode>.ToFullString() -> string
Microsoft.CodeAnalysisP.SyntaxNode
Microsoft.CodeAnalysisP.SyntaxNode.Ancestors(bool ascendOutOfTrivia = true) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxNode>
Microsoft.CodeAnalysisP.SyntaxNode.AncestorsAndSelf(bool ascendOutOfTrivia = true) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxNode>
Microsoft.CodeAnalysisP.SyntaxNode.ChildNodes() -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxNode>
Microsoft.CodeAnalysisP.SyntaxNode.ChildNodesAndTokens() -> Microsoft.CodeAnalysisP.ChildSyntaxList
Microsoft.CodeAnalysisP.SyntaxNode.ChildTokens() -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxToken>
Microsoft.CodeAnalysisP.SyntaxNode.Contains(Microsoft.CodeAnalysisP.SyntaxNode node) -> bool
Microsoft.CodeAnalysisP.SyntaxNode.ContainsAnnotations.get -> bool
Microsoft.CodeAnalysisP.SyntaxNode.ContainsDiagnostics.get -> bool
Microsoft.CodeAnalysisP.SyntaxNode.ContainsDirectives.get -> bool
Microsoft.CodeAnalysisP.SyntaxNode.ContainsSkippedText.get -> bool
Microsoft.CodeAnalysisP.SyntaxNode.CopyAnnotationsTo<T>(T node) -> T
Microsoft.CodeAnalysisP.SyntaxNode.DescendantNodes(Microsoft.CodeAnalysisP.Text.TextSpan span, System.Func<Microsoft.CodeAnalysisP.SyntaxNode, bool> descendIntoChildren = null, bool descendIntoTrivia = false) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxNode>
Microsoft.CodeAnalysisP.SyntaxNode.DescendantNodes(System.Func<Microsoft.CodeAnalysisP.SyntaxNode, bool> descendIntoChildren = null, bool descendIntoTrivia = false) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxNode>
Microsoft.CodeAnalysisP.SyntaxNode.DescendantNodesAndSelf(Microsoft.CodeAnalysisP.Text.TextSpan span, System.Func<Microsoft.CodeAnalysisP.SyntaxNode, bool> descendIntoChildren = null, bool descendIntoTrivia = false) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxNode>
Microsoft.CodeAnalysisP.SyntaxNode.DescendantNodesAndSelf(System.Func<Microsoft.CodeAnalysisP.SyntaxNode, bool> descendIntoChildren = null, bool descendIntoTrivia = false) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxNode>
Microsoft.CodeAnalysisP.SyntaxNode.DescendantNodesAndTokens(Microsoft.CodeAnalysisP.Text.TextSpan span, System.Func<Microsoft.CodeAnalysisP.SyntaxNode, bool> descendIntoChildren = null, bool descendIntoTrivia = false) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxNodeOrToken>
Microsoft.CodeAnalysisP.SyntaxNode.DescendantNodesAndTokens(System.Func<Microsoft.CodeAnalysisP.SyntaxNode, bool> descendIntoChildren = null, bool descendIntoTrivia = false) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxNodeOrToken>
Microsoft.CodeAnalysisP.SyntaxNode.DescendantNodesAndTokensAndSelf(Microsoft.CodeAnalysisP.Text.TextSpan span, System.Func<Microsoft.CodeAnalysisP.SyntaxNode, bool> descendIntoChildren = null, bool descendIntoTrivia = false) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxNodeOrToken>
Microsoft.CodeAnalysisP.SyntaxNode.DescendantNodesAndTokensAndSelf(System.Func<Microsoft.CodeAnalysisP.SyntaxNode, bool> descendIntoChildren = null, bool descendIntoTrivia = false) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxNodeOrToken>
Microsoft.CodeAnalysisP.SyntaxNode.DescendantTokens(Microsoft.CodeAnalysisP.Text.TextSpan span, System.Func<Microsoft.CodeAnalysisP.SyntaxNode, bool> descendIntoChildren = null, bool descendIntoTrivia = false) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxToken>
Microsoft.CodeAnalysisP.SyntaxNode.DescendantTokens(System.Func<Microsoft.CodeAnalysisP.SyntaxNode, bool> descendIntoChildren = null, bool descendIntoTrivia = false) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxToken>
Microsoft.CodeAnalysisP.SyntaxNode.DescendantTrivia(Microsoft.CodeAnalysisP.Text.TextSpan span, System.Func<Microsoft.CodeAnalysisP.SyntaxNode, bool> descendIntoChildren = null, bool descendIntoTrivia = false) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxTrivia>
Microsoft.CodeAnalysisP.SyntaxNode.DescendantTrivia(System.Func<Microsoft.CodeAnalysisP.SyntaxNode, bool> descendIntoChildren = null, bool descendIntoTrivia = false) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxTrivia>
Microsoft.CodeAnalysisP.SyntaxNode.FindNode(Microsoft.CodeAnalysisP.Text.TextSpan span, bool findInsideTrivia = false, bool getInnermostNodeForTie = false) -> Microsoft.CodeAnalysisP.SyntaxNode
Microsoft.CodeAnalysisP.SyntaxNode.FindToken(int position, bool findInsideTrivia = false) -> Microsoft.CodeAnalysisP.SyntaxToken
Microsoft.CodeAnalysisP.SyntaxNode.FindTrivia(int position, bool findInsideTrivia = false) -> Microsoft.CodeAnalysisP.SyntaxTrivia
Microsoft.CodeAnalysisP.SyntaxNode.FindTrivia(int position, System.Func<Microsoft.CodeAnalysisP.SyntaxTrivia, bool> stepInto) -> Microsoft.CodeAnalysisP.SyntaxTrivia
Microsoft.CodeAnalysisP.SyntaxNode.FirstAncestorOrSelf<TNode>(System.Func<TNode, bool> predicate = null, bool ascendOutOfTrivia = true) -> TNode
Microsoft.CodeAnalysisP.SyntaxNode.FullSpan.get -> Microsoft.CodeAnalysisP.Text.TextSpan
Microsoft.CodeAnalysisP.SyntaxNode.GetAnnotatedNodes(Microsoft.CodeAnalysisP.SyntaxAnnotation syntaxAnnotation) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxNode>
Microsoft.CodeAnalysisP.SyntaxNode.GetAnnotatedNodes(string annotationKind) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxNode>
Microsoft.CodeAnalysisP.SyntaxNode.GetAnnotatedNodesAndTokens(Microsoft.CodeAnalysisP.SyntaxAnnotation annotation) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxNodeOrToken>
Microsoft.CodeAnalysisP.SyntaxNode.GetAnnotatedNodesAndTokens(params string[] annotationKinds) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxNodeOrToken>
Microsoft.CodeAnalysisP.SyntaxNode.GetAnnotatedNodesAndTokens(string annotationKind) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxNodeOrToken>
Microsoft.CodeAnalysisP.SyntaxNode.GetAnnotatedTokens(Microsoft.CodeAnalysisP.SyntaxAnnotation syntaxAnnotation) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxToken>
Microsoft.CodeAnalysisP.SyntaxNode.GetAnnotatedTokens(string annotationKind) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxToken>
Microsoft.CodeAnalysisP.SyntaxNode.GetAnnotatedTrivia(Microsoft.CodeAnalysisP.SyntaxAnnotation annotation) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxTrivia>
Microsoft.CodeAnalysisP.SyntaxNode.GetAnnotatedTrivia(params string[] annotationKinds) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxTrivia>
Microsoft.CodeAnalysisP.SyntaxNode.GetAnnotatedTrivia(string annotationKind) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxTrivia>
Microsoft.CodeAnalysisP.SyntaxNode.GetAnnotations(string annotationKind) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxAnnotation>
Microsoft.CodeAnalysisP.SyntaxNode.GetAnnotations(System.Collections.Generic.IEnumerable<string> annotationKinds) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxAnnotation>
Microsoft.CodeAnalysisP.SyntaxNode.GetDiagnostics() -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.Diagnostic>
Microsoft.CodeAnalysisP.SyntaxNode.GetFirstToken(bool includeZeroWidth = false, bool includeSkipped = false, bool includeDirectives = false, bool includeDocumentationComments = false) -> Microsoft.CodeAnalysisP.SyntaxToken
Microsoft.CodeAnalysisP.SyntaxNode.GetLastToken(bool includeZeroWidth = false, bool includeSkipped = false, bool includeDirectives = false, bool includeDocumentationComments = false) -> Microsoft.CodeAnalysisP.SyntaxToken
Microsoft.CodeAnalysisP.SyntaxNode.GetLeadingTrivia() -> Microsoft.CodeAnalysisP.SyntaxTriviaList
Microsoft.CodeAnalysisP.SyntaxNode.GetLocation() -> Microsoft.CodeAnalysisP.Location
Microsoft.CodeAnalysisP.SyntaxNode.GetReference() -> Microsoft.CodeAnalysisP.SyntaxReference
Microsoft.CodeAnalysisP.SyntaxNode.GetText(System.Text.Encoding encoding = null, Microsoft.CodeAnalysisP.Text.SourceHashAlgorithm checksumAlgorithm = Microsoft.CodeAnalysisP.Text.SourceHashAlgorithm.Sha1) -> Microsoft.CodeAnalysisP.Text.SourceText
Microsoft.CodeAnalysisP.SyntaxNode.GetTrailingTrivia() -> Microsoft.CodeAnalysisP.SyntaxTriviaList
Microsoft.CodeAnalysisP.SyntaxNode.HasAnnotation(Microsoft.CodeAnalysisP.SyntaxAnnotation annotation) -> bool
Microsoft.CodeAnalysisP.SyntaxNode.HasAnnotations(string annotationKind) -> bool
Microsoft.CodeAnalysisP.SyntaxNode.HasAnnotations(System.Collections.Generic.IEnumerable<string> annotationKinds) -> bool
Microsoft.CodeAnalysisP.SyntaxNode.HasLeadingTrivia.get -> bool
Microsoft.CodeAnalysisP.SyntaxNode.HasStructuredTrivia.get -> bool
Microsoft.CodeAnalysisP.SyntaxNode.HasTrailingTrivia.get -> bool
Microsoft.CodeAnalysisP.SyntaxNode.IsEquivalentTo(Microsoft.CodeAnalysisP.SyntaxNode node, bool topLevel = false) -> bool
Microsoft.CodeAnalysisP.SyntaxNode.IsEquivalentTo(Microsoft.CodeAnalysisP.SyntaxNode other) -> bool
Microsoft.CodeAnalysisP.SyntaxNode.IsMissing.get -> bool
Microsoft.CodeAnalysisP.SyntaxNode.IsPartOfStructuredTrivia() -> bool
Microsoft.CodeAnalysisP.SyntaxNode.IsStructuredTrivia.get -> bool
Microsoft.CodeAnalysisP.SyntaxNode.Parent.get -> Microsoft.CodeAnalysisP.SyntaxNode
Microsoft.CodeAnalysisP.SyntaxNode.RawKind.get -> int
Microsoft.CodeAnalysisP.SyntaxNode.Span.get -> Microsoft.CodeAnalysisP.Text.TextSpan
Microsoft.CodeAnalysisP.SyntaxNode.SpanStart.get -> int
Microsoft.CodeAnalysisP.SyntaxNode.SyntaxTree.get -> Microsoft.CodeAnalysisP.SyntaxTree
Microsoft.CodeAnalysisP.SyntaxNodeExtensions
Microsoft.CodeAnalysisP.SyntaxNodeOrToken
Microsoft.CodeAnalysisP.SyntaxNodeOrToken.AsNode() -> Microsoft.CodeAnalysisP.SyntaxNode
Microsoft.CodeAnalysisP.SyntaxNodeOrToken.AsToken() -> Microsoft.CodeAnalysisP.SyntaxToken
Microsoft.CodeAnalysisP.SyntaxNodeOrToken.ChildNodesAndTokens() -> Microsoft.CodeAnalysisP.ChildSyntaxList
Microsoft.CodeAnalysisP.SyntaxNodeOrToken.ContainsAnnotations.get -> bool
Microsoft.CodeAnalysisP.SyntaxNodeOrToken.ContainsDiagnostics.get -> bool
Microsoft.CodeAnalysisP.SyntaxNodeOrToken.ContainsDirectives.get -> bool
Microsoft.CodeAnalysisP.SyntaxNodeOrToken.Equals(Microsoft.CodeAnalysisP.SyntaxNodeOrToken other) -> bool
Microsoft.CodeAnalysisP.SyntaxNodeOrToken.FullSpan.get -> Microsoft.CodeAnalysisP.Text.TextSpan
Microsoft.CodeAnalysisP.SyntaxNodeOrToken.GetAnnotations(string annotationKind) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxAnnotation>
Microsoft.CodeAnalysisP.SyntaxNodeOrToken.GetAnnotations(System.Collections.Generic.IEnumerable<string> annotationKinds) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxAnnotation>
Microsoft.CodeAnalysisP.SyntaxNodeOrToken.GetDiagnostics() -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.Diagnostic>
Microsoft.CodeAnalysisP.SyntaxNodeOrToken.GetLeadingTrivia() -> Microsoft.CodeAnalysisP.SyntaxTriviaList
Microsoft.CodeAnalysisP.SyntaxNodeOrToken.GetLocation() -> Microsoft.CodeAnalysisP.Location
Microsoft.CodeAnalysisP.SyntaxNodeOrToken.GetNextSibling() -> Microsoft.CodeAnalysisP.SyntaxNodeOrToken
Microsoft.CodeAnalysisP.SyntaxNodeOrToken.GetPreviousSibling() -> Microsoft.CodeAnalysisP.SyntaxNodeOrToken
Microsoft.CodeAnalysisP.SyntaxNodeOrToken.GetTrailingTrivia() -> Microsoft.CodeAnalysisP.SyntaxTriviaList
Microsoft.CodeAnalysisP.SyntaxNodeOrToken.HasAnnotation(Microsoft.CodeAnalysisP.SyntaxAnnotation annotation) -> bool
Microsoft.CodeAnalysisP.SyntaxNodeOrToken.HasAnnotations(string annotationKind) -> bool
Microsoft.CodeAnalysisP.SyntaxNodeOrToken.HasAnnotations(System.Collections.Generic.IEnumerable<string> annotationKinds) -> bool
Microsoft.CodeAnalysisP.SyntaxNodeOrToken.HasLeadingTrivia.get -> bool
Microsoft.CodeAnalysisP.SyntaxNodeOrToken.HasTrailingTrivia.get -> bool
Microsoft.CodeAnalysisP.SyntaxNodeOrToken.IsEquivalentTo(Microsoft.CodeAnalysisP.SyntaxNodeOrToken other) -> bool
Microsoft.CodeAnalysisP.SyntaxNodeOrToken.IsMissing.get -> bool
Microsoft.CodeAnalysisP.SyntaxNodeOrToken.IsNode.get -> bool
Microsoft.CodeAnalysisP.SyntaxNodeOrToken.IsToken.get -> bool
Microsoft.CodeAnalysisP.SyntaxNodeOrToken.Language.get -> string
Microsoft.CodeAnalysisP.SyntaxNodeOrToken.Parent.get -> Microsoft.CodeAnalysisP.SyntaxNode
Microsoft.CodeAnalysisP.SyntaxNodeOrToken.RawKind.get -> int
Microsoft.CodeAnalysisP.SyntaxNodeOrToken.Span.get -> Microsoft.CodeAnalysisP.Text.TextSpan
Microsoft.CodeAnalysisP.SyntaxNodeOrToken.SpanStart.get -> int
Microsoft.CodeAnalysisP.SyntaxNodeOrToken.SyntaxTree.get -> Microsoft.CodeAnalysisP.SyntaxTree
Microsoft.CodeAnalysisP.SyntaxNodeOrToken.ToFullString() -> string
Microsoft.CodeAnalysisP.SyntaxNodeOrToken.WithAdditionalAnnotations(params Microsoft.CodeAnalysisP.SyntaxAnnotation[] annotations) -> Microsoft.CodeAnalysisP.SyntaxNodeOrToken
Microsoft.CodeAnalysisP.SyntaxNodeOrToken.WithAdditionalAnnotations(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxAnnotation> annotations) -> Microsoft.CodeAnalysisP.SyntaxNodeOrToken
Microsoft.CodeAnalysisP.SyntaxNodeOrToken.WithLeadingTrivia(params Microsoft.CodeAnalysisP.SyntaxTrivia[] trivia) -> Microsoft.CodeAnalysisP.SyntaxNodeOrToken
Microsoft.CodeAnalysisP.SyntaxNodeOrToken.WithLeadingTrivia(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxTrivia> trivia) -> Microsoft.CodeAnalysisP.SyntaxNodeOrToken
Microsoft.CodeAnalysisP.SyntaxNodeOrToken.WithoutAnnotations(params Microsoft.CodeAnalysisP.SyntaxAnnotation[] annotations) -> Microsoft.CodeAnalysisP.SyntaxNodeOrToken
Microsoft.CodeAnalysisP.SyntaxNodeOrToken.WithoutAnnotations(string annotationKind) -> Microsoft.CodeAnalysisP.SyntaxNodeOrToken
Microsoft.CodeAnalysisP.SyntaxNodeOrToken.WithoutAnnotations(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxAnnotation> annotations) -> Microsoft.CodeAnalysisP.SyntaxNodeOrToken
Microsoft.CodeAnalysisP.SyntaxNodeOrToken.WithTrailingTrivia(params Microsoft.CodeAnalysisP.SyntaxTrivia[] trivia) -> Microsoft.CodeAnalysisP.SyntaxNodeOrToken
Microsoft.CodeAnalysisP.SyntaxNodeOrToken.WithTrailingTrivia(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxTrivia> trivia) -> Microsoft.CodeAnalysisP.SyntaxNodeOrToken
Microsoft.CodeAnalysisP.SyntaxNodeOrToken.WriteTo(System.IO.TextWriter writer) -> void
Microsoft.CodeAnalysisP.SyntaxNodeOrTokenList
Microsoft.CodeAnalysisP.SyntaxNodeOrTokenList.Add(Microsoft.CodeAnalysisP.SyntaxNodeOrToken nodeOrToken) -> Microsoft.CodeAnalysisP.SyntaxNodeOrTokenList
Microsoft.CodeAnalysisP.SyntaxNodeOrTokenList.AddRange(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxNodeOrToken> nodesOrTokens) -> Microsoft.CodeAnalysisP.SyntaxNodeOrTokenList
Microsoft.CodeAnalysisP.SyntaxNodeOrTokenList.Any() -> bool
Microsoft.CodeAnalysisP.SyntaxNodeOrTokenList.Count.get -> int
Microsoft.CodeAnalysisP.SyntaxNodeOrTokenList.Enumerator
Microsoft.CodeAnalysisP.SyntaxNodeOrTokenList.Enumerator.Current.get -> Microsoft.CodeAnalysisP.SyntaxNodeOrToken
Microsoft.CodeAnalysisP.SyntaxNodeOrTokenList.Enumerator.MoveNext() -> bool
Microsoft.CodeAnalysisP.SyntaxNodeOrTokenList.Equals(Microsoft.CodeAnalysisP.SyntaxNodeOrTokenList other) -> bool
Microsoft.CodeAnalysisP.SyntaxNodeOrTokenList.First() -> Microsoft.CodeAnalysisP.SyntaxNodeOrToken
Microsoft.CodeAnalysisP.SyntaxNodeOrTokenList.FirstOrDefault() -> Microsoft.CodeAnalysisP.SyntaxNodeOrToken
Microsoft.CodeAnalysisP.SyntaxNodeOrTokenList.FullSpan.get -> Microsoft.CodeAnalysisP.Text.TextSpan
Microsoft.CodeAnalysisP.SyntaxNodeOrTokenList.GetEnumerator() -> Microsoft.CodeAnalysisP.SyntaxNodeOrTokenList.Enumerator
Microsoft.CodeAnalysisP.SyntaxNodeOrTokenList.IndexOf(Microsoft.CodeAnalysisP.SyntaxNodeOrToken nodeOrToken) -> int
Microsoft.CodeAnalysisP.SyntaxNodeOrTokenList.Insert(int index, Microsoft.CodeAnalysisP.SyntaxNodeOrToken nodeOrToken) -> Microsoft.CodeAnalysisP.SyntaxNodeOrTokenList
Microsoft.CodeAnalysisP.SyntaxNodeOrTokenList.InsertRange(int index, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxNodeOrToken> nodesAndTokens) -> Microsoft.CodeAnalysisP.SyntaxNodeOrTokenList
Microsoft.CodeAnalysisP.SyntaxNodeOrTokenList.Last() -> Microsoft.CodeAnalysisP.SyntaxNodeOrToken
Microsoft.CodeAnalysisP.SyntaxNodeOrTokenList.LastOrDefault() -> Microsoft.CodeAnalysisP.SyntaxNodeOrToken
Microsoft.CodeAnalysisP.SyntaxNodeOrTokenList.Remove(Microsoft.CodeAnalysisP.SyntaxNodeOrToken nodeOrTokenInList) -> Microsoft.CodeAnalysisP.SyntaxNodeOrTokenList
Microsoft.CodeAnalysisP.SyntaxNodeOrTokenList.RemoveAt(int index) -> Microsoft.CodeAnalysisP.SyntaxNodeOrTokenList
Microsoft.CodeAnalysisP.SyntaxNodeOrTokenList.Replace(Microsoft.CodeAnalysisP.SyntaxNodeOrToken nodeOrTokenInList, Microsoft.CodeAnalysisP.SyntaxNodeOrToken newNodeOrToken) -> Microsoft.CodeAnalysisP.SyntaxNodeOrTokenList
Microsoft.CodeAnalysisP.SyntaxNodeOrTokenList.ReplaceRange(Microsoft.CodeAnalysisP.SyntaxNodeOrToken nodeOrTokenInList, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxNodeOrToken> newNodesAndTokens) -> Microsoft.CodeAnalysisP.SyntaxNodeOrTokenList
Microsoft.CodeAnalysisP.SyntaxNodeOrTokenList.Span.get -> Microsoft.CodeAnalysisP.Text.TextSpan
Microsoft.CodeAnalysisP.SyntaxNodeOrTokenList.SyntaxNodeOrTokenList(params Microsoft.CodeAnalysisP.SyntaxNodeOrToken[] nodesAndTokens) -> void
Microsoft.CodeAnalysisP.SyntaxNodeOrTokenList.SyntaxNodeOrTokenList(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxNodeOrToken> nodesAndTokens) -> void
Microsoft.CodeAnalysisP.SyntaxNodeOrTokenList.this[int index].get -> Microsoft.CodeAnalysisP.SyntaxNodeOrToken
Microsoft.CodeAnalysisP.SyntaxNodeOrTokenList.ToFullString() -> string
Microsoft.CodeAnalysisP.SyntaxReference
Microsoft.CodeAnalysisP.SyntaxReference.SyntaxReference() -> void
Microsoft.CodeAnalysisP.SyntaxRemoveOptions
Microsoft.CodeAnalysisP.SyntaxRemoveOptions.AddElasticMarker = 32 -> Microsoft.CodeAnalysisP.SyntaxRemoveOptions
Microsoft.CodeAnalysisP.SyntaxRemoveOptions.KeepDirectives = 8 -> Microsoft.CodeAnalysisP.SyntaxRemoveOptions
Microsoft.CodeAnalysisP.SyntaxRemoveOptions.KeepEndOfLine = 16 -> Microsoft.CodeAnalysisP.SyntaxRemoveOptions
Microsoft.CodeAnalysisP.SyntaxRemoveOptions.KeepExteriorTrivia = Microsoft.CodeAnalysisP.SyntaxRemoveOptions.KeepLeadingTrivia | Microsoft.CodeAnalysisP.SyntaxRemoveOptions.KeepTrailingTrivia -> Microsoft.CodeAnalysisP.SyntaxRemoveOptions
Microsoft.CodeAnalysisP.SyntaxRemoveOptions.KeepLeadingTrivia = 1 -> Microsoft.CodeAnalysisP.SyntaxRemoveOptions
Microsoft.CodeAnalysisP.SyntaxRemoveOptions.KeepNoTrivia = 0 -> Microsoft.CodeAnalysisP.SyntaxRemoveOptions
Microsoft.CodeAnalysisP.SyntaxRemoveOptions.KeepTrailingTrivia = 2 -> Microsoft.CodeAnalysisP.SyntaxRemoveOptions
Microsoft.CodeAnalysisP.SyntaxRemoveOptions.KeepUnbalancedDirectives = 4 -> Microsoft.CodeAnalysisP.SyntaxRemoveOptions
Microsoft.CodeAnalysisP.SyntaxToken
Microsoft.CodeAnalysisP.SyntaxToken.ContainsAnnotations.get -> bool
Microsoft.CodeAnalysisP.SyntaxToken.ContainsDiagnostics.get -> bool
Microsoft.CodeAnalysisP.SyntaxToken.ContainsDirectives.get -> bool
Microsoft.CodeAnalysisP.SyntaxToken.CopyAnnotationsTo(Microsoft.CodeAnalysisP.SyntaxToken token) -> Microsoft.CodeAnalysisP.SyntaxToken
Microsoft.CodeAnalysisP.SyntaxToken.Equals(Microsoft.CodeAnalysisP.SyntaxToken other) -> bool
Microsoft.CodeAnalysisP.SyntaxToken.FullSpan.get -> Microsoft.CodeAnalysisP.Text.TextSpan
Microsoft.CodeAnalysisP.SyntaxToken.GetAllTrivia() -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxTrivia>
Microsoft.CodeAnalysisP.SyntaxToken.GetAnnotations(params string[] annotationKinds) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxAnnotation>
Microsoft.CodeAnalysisP.SyntaxToken.GetAnnotations(string annotationKind) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxAnnotation>
Microsoft.CodeAnalysisP.SyntaxToken.GetAnnotations(System.Collections.Generic.IEnumerable<string> annotationKinds) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxAnnotation>
Microsoft.CodeAnalysisP.SyntaxToken.GetDiagnostics() -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.Diagnostic>
Microsoft.CodeAnalysisP.SyntaxToken.GetLocation() -> Microsoft.CodeAnalysisP.Location
Microsoft.CodeAnalysisP.SyntaxToken.GetNextToken(bool includeZeroWidth = false, bool includeSkipped = false, bool includeDirectives = false, bool includeDocumentationComments = false) -> Microsoft.CodeAnalysisP.SyntaxToken
Microsoft.CodeAnalysisP.SyntaxToken.GetPreviousToken(bool includeZeroWidth = false, bool includeSkipped = false, bool includeDirectives = false, bool includeDocumentationComments = false) -> Microsoft.CodeAnalysisP.SyntaxToken
Microsoft.CodeAnalysisP.SyntaxToken.HasAnnotation(Microsoft.CodeAnalysisP.SyntaxAnnotation annotation) -> bool
Microsoft.CodeAnalysisP.SyntaxToken.HasAnnotations(params string[] annotationKinds) -> bool
Microsoft.CodeAnalysisP.SyntaxToken.HasAnnotations(string annotationKind) -> bool
Microsoft.CodeAnalysisP.SyntaxToken.HasLeadingTrivia.get -> bool
Microsoft.CodeAnalysisP.SyntaxToken.HasStructuredTrivia.get -> bool
Microsoft.CodeAnalysisP.SyntaxToken.HasTrailingTrivia.get -> bool
Microsoft.CodeAnalysisP.SyntaxToken.IsEquivalentTo(Microsoft.CodeAnalysisP.SyntaxToken token) -> bool
Microsoft.CodeAnalysisP.SyntaxToken.IsMissing.get -> bool
Microsoft.CodeAnalysisP.SyntaxToken.IsPartOfStructuredTrivia() -> bool
Microsoft.CodeAnalysisP.SyntaxToken.Language.get -> string
Microsoft.CodeAnalysisP.SyntaxToken.LeadingTrivia.get -> Microsoft.CodeAnalysisP.SyntaxTriviaList
Microsoft.CodeAnalysisP.SyntaxToken.Parent.get -> Microsoft.CodeAnalysisP.SyntaxNode
Microsoft.CodeAnalysisP.SyntaxToken.RawKind.get -> int
Microsoft.CodeAnalysisP.SyntaxToken.Span.get -> Microsoft.CodeAnalysisP.Text.TextSpan
Microsoft.CodeAnalysisP.SyntaxToken.SpanStart.get -> int
Microsoft.CodeAnalysisP.SyntaxToken.SyntaxTree.get -> Microsoft.CodeAnalysisP.SyntaxTree
Microsoft.CodeAnalysisP.SyntaxToken.Text.get -> string
Microsoft.CodeAnalysisP.SyntaxToken.ToFullString() -> string
Microsoft.CodeAnalysisP.SyntaxToken.TrailingTrivia.get -> Microsoft.CodeAnalysisP.SyntaxTriviaList
Microsoft.CodeAnalysisP.SyntaxToken.Value.get -> object
Microsoft.CodeAnalysisP.SyntaxToken.ValueText.get -> string
Microsoft.CodeAnalysisP.SyntaxToken.WithAdditionalAnnotations(params Microsoft.CodeAnalysisP.SyntaxAnnotation[] annotations) -> Microsoft.CodeAnalysisP.SyntaxToken
Microsoft.CodeAnalysisP.SyntaxToken.WithAdditionalAnnotations(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxAnnotation> annotations) -> Microsoft.CodeAnalysisP.SyntaxToken
Microsoft.CodeAnalysisP.SyntaxToken.WithLeadingTrivia(Microsoft.CodeAnalysisP.SyntaxTriviaList trivia) -> Microsoft.CodeAnalysisP.SyntaxToken
Microsoft.CodeAnalysisP.SyntaxToken.WithLeadingTrivia(params Microsoft.CodeAnalysisP.SyntaxTrivia[] trivia) -> Microsoft.CodeAnalysisP.SyntaxToken
Microsoft.CodeAnalysisP.SyntaxToken.WithLeadingTrivia(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxTrivia> trivia) -> Microsoft.CodeAnalysisP.SyntaxToken
Microsoft.CodeAnalysisP.SyntaxToken.WithoutAnnotations(params Microsoft.CodeAnalysisP.SyntaxAnnotation[] annotations) -> Microsoft.CodeAnalysisP.SyntaxToken
Microsoft.CodeAnalysisP.SyntaxToken.WithoutAnnotations(string annotationKind) -> Microsoft.CodeAnalysisP.SyntaxToken
Microsoft.CodeAnalysisP.SyntaxToken.WithoutAnnotations(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxAnnotation> annotations) -> Microsoft.CodeAnalysisP.SyntaxToken
Microsoft.CodeAnalysisP.SyntaxToken.WithTrailingTrivia(Microsoft.CodeAnalysisP.SyntaxTriviaList trivia) -> Microsoft.CodeAnalysisP.SyntaxToken
Microsoft.CodeAnalysisP.SyntaxToken.WithTrailingTrivia(params Microsoft.CodeAnalysisP.SyntaxTrivia[] trivia) -> Microsoft.CodeAnalysisP.SyntaxToken
Microsoft.CodeAnalysisP.SyntaxToken.WithTrailingTrivia(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxTrivia> trivia) -> Microsoft.CodeAnalysisP.SyntaxToken
Microsoft.CodeAnalysisP.SyntaxToken.WithTriviaFrom(Microsoft.CodeAnalysisP.SyntaxToken token) -> Microsoft.CodeAnalysisP.SyntaxToken
Microsoft.CodeAnalysisP.SyntaxToken.WriteTo(System.IO.TextWriter writer) -> void
Microsoft.CodeAnalysisP.SyntaxTokenList
Microsoft.CodeAnalysisP.SyntaxTokenList.Add(Microsoft.CodeAnalysisP.SyntaxToken token) -> Microsoft.CodeAnalysisP.SyntaxTokenList
Microsoft.CodeAnalysisP.SyntaxTokenList.AddRange(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxToken> tokens) -> Microsoft.CodeAnalysisP.SyntaxTokenList
Microsoft.CodeAnalysisP.SyntaxTokenList.Any() -> bool
Microsoft.CodeAnalysisP.SyntaxTokenList.Count.get -> int
Microsoft.CodeAnalysisP.SyntaxTokenList.Enumerator
Microsoft.CodeAnalysisP.SyntaxTokenList.Enumerator.Current.get -> Microsoft.CodeAnalysisP.SyntaxToken
Microsoft.CodeAnalysisP.SyntaxTokenList.Enumerator.MoveNext() -> bool
Microsoft.CodeAnalysisP.SyntaxTokenList.Equals(Microsoft.CodeAnalysisP.SyntaxTokenList other) -> bool
Microsoft.CodeAnalysisP.SyntaxTokenList.First() -> Microsoft.CodeAnalysisP.SyntaxToken
Microsoft.CodeAnalysisP.SyntaxTokenList.FullSpan.get -> Microsoft.CodeAnalysisP.Text.TextSpan
Microsoft.CodeAnalysisP.SyntaxTokenList.GetEnumerator() -> Microsoft.CodeAnalysisP.SyntaxTokenList.Enumerator
Microsoft.CodeAnalysisP.SyntaxTokenList.IndexOf(Microsoft.CodeAnalysisP.SyntaxToken tokenInList) -> int
Microsoft.CodeAnalysisP.SyntaxTokenList.Insert(int index, Microsoft.CodeAnalysisP.SyntaxToken token) -> Microsoft.CodeAnalysisP.SyntaxTokenList
Microsoft.CodeAnalysisP.SyntaxTokenList.InsertRange(int index, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxToken> tokens) -> Microsoft.CodeAnalysisP.SyntaxTokenList
Microsoft.CodeAnalysisP.SyntaxTokenList.Last() -> Microsoft.CodeAnalysisP.SyntaxToken
Microsoft.CodeAnalysisP.SyntaxTokenList.Remove(Microsoft.CodeAnalysisP.SyntaxToken tokenInList) -> Microsoft.CodeAnalysisP.SyntaxTokenList
Microsoft.CodeAnalysisP.SyntaxTokenList.RemoveAt(int index) -> Microsoft.CodeAnalysisP.SyntaxTokenList
Microsoft.CodeAnalysisP.SyntaxTokenList.Replace(Microsoft.CodeAnalysisP.SyntaxToken tokenInList, Microsoft.CodeAnalysisP.SyntaxToken newToken) -> Microsoft.CodeAnalysisP.SyntaxTokenList
Microsoft.CodeAnalysisP.SyntaxTokenList.ReplaceRange(Microsoft.CodeAnalysisP.SyntaxToken tokenInList, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxToken> newTokens) -> Microsoft.CodeAnalysisP.SyntaxTokenList
Microsoft.CodeAnalysisP.SyntaxTokenList.Reverse() -> Microsoft.CodeAnalysisP.SyntaxTokenList.Reversed
Microsoft.CodeAnalysisP.SyntaxTokenList.Reversed
Microsoft.CodeAnalysisP.SyntaxTokenList.Reversed.Enumerator
Microsoft.CodeAnalysisP.SyntaxTokenList.Reversed.Enumerator.Current.get -> Microsoft.CodeAnalysisP.SyntaxToken
Microsoft.CodeAnalysisP.SyntaxTokenList.Reversed.Enumerator.MoveNext() -> bool
Microsoft.CodeAnalysisP.SyntaxTokenList.Reversed.Equals(Microsoft.CodeAnalysisP.SyntaxTokenList.Reversed other) -> bool
Microsoft.CodeAnalysisP.SyntaxTokenList.Reversed.GetEnumerator() -> Microsoft.CodeAnalysisP.SyntaxTokenList.Reversed.Enumerator
Microsoft.CodeAnalysisP.SyntaxTokenList.Reversed.Reversed(Microsoft.CodeAnalysisP.SyntaxTokenList list) -> void
Microsoft.CodeAnalysisP.SyntaxTokenList.Span.get -> Microsoft.CodeAnalysisP.Text.TextSpan
Microsoft.CodeAnalysisP.SyntaxTokenList.SyntaxTokenList(Microsoft.CodeAnalysisP.SyntaxToken token) -> void
Microsoft.CodeAnalysisP.SyntaxTokenList.SyntaxTokenList(params Microsoft.CodeAnalysisP.SyntaxToken[] tokens) -> void
Microsoft.CodeAnalysisP.SyntaxTokenList.SyntaxTokenList(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxToken> tokens) -> void
Microsoft.CodeAnalysisP.SyntaxTokenList.this[int index].get -> Microsoft.CodeAnalysisP.SyntaxToken
Microsoft.CodeAnalysisP.SyntaxTokenList.ToFullString() -> string
Microsoft.CodeAnalysisP.SyntaxTree
Microsoft.CodeAnalysisP.SyntaxTree.GetRoot(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysisP.SyntaxNode
Microsoft.CodeAnalysisP.SyntaxTree.GetRootAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.CodeAnalysisP.SyntaxNode>
Microsoft.CodeAnalysisP.SyntaxTree.Options.get -> Microsoft.CodeAnalysisP.ParseOptions
Microsoft.CodeAnalysisP.SyntaxTree.SyntaxTree() -> void
Microsoft.CodeAnalysisP.SyntaxTree.TryGetRoot(out Microsoft.CodeAnalysisP.SyntaxNode root) -> bool
Microsoft.CodeAnalysisP.SyntaxTrivia
Microsoft.CodeAnalysisP.SyntaxTrivia.ContainsDiagnostics.get -> bool
Microsoft.CodeAnalysisP.SyntaxTrivia.CopyAnnotationsTo(Microsoft.CodeAnalysisP.SyntaxTrivia trivia) -> Microsoft.CodeAnalysisP.SyntaxTrivia
Microsoft.CodeAnalysisP.SyntaxTrivia.Equals(Microsoft.CodeAnalysisP.SyntaxTrivia other) -> bool
Microsoft.CodeAnalysisP.SyntaxTrivia.FullSpan.get -> Microsoft.CodeAnalysisP.Text.TextSpan
Microsoft.CodeAnalysisP.SyntaxTrivia.GetAnnotations(params string[] annotationKinds) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxAnnotation>
Microsoft.CodeAnalysisP.SyntaxTrivia.GetAnnotations(string annotationKind) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxAnnotation>
Microsoft.CodeAnalysisP.SyntaxTrivia.GetDiagnostics() -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.Diagnostic>
Microsoft.CodeAnalysisP.SyntaxTrivia.GetLocation() -> Microsoft.CodeAnalysisP.Location
Microsoft.CodeAnalysisP.SyntaxTrivia.GetStructure() -> Microsoft.CodeAnalysisP.SyntaxNode
Microsoft.CodeAnalysisP.SyntaxTrivia.HasAnnotation(Microsoft.CodeAnalysisP.SyntaxAnnotation annotation) -> bool
Microsoft.CodeAnalysisP.SyntaxTrivia.HasAnnotations(params string[] annotationKinds) -> bool
Microsoft.CodeAnalysisP.SyntaxTrivia.HasAnnotations(string annotationKind) -> bool
Microsoft.CodeAnalysisP.SyntaxTrivia.HasStructure.get -> bool
Microsoft.CodeAnalysisP.SyntaxTrivia.IsDirective.get -> bool
Microsoft.CodeAnalysisP.SyntaxTrivia.IsEquivalentTo(Microsoft.CodeAnalysisP.SyntaxTrivia trivia) -> bool
Microsoft.CodeAnalysisP.SyntaxTrivia.IsPartOfStructuredTrivia() -> bool
Microsoft.CodeAnalysisP.SyntaxTrivia.Language.get -> string
Microsoft.CodeAnalysisP.SyntaxTrivia.RawKind.get -> int
Microsoft.CodeAnalysisP.SyntaxTrivia.Span.get -> Microsoft.CodeAnalysisP.Text.TextSpan
Microsoft.CodeAnalysisP.SyntaxTrivia.SpanStart.get -> int
Microsoft.CodeAnalysisP.SyntaxTrivia.SyntaxTree.get -> Microsoft.CodeAnalysisP.SyntaxTree
Microsoft.CodeAnalysisP.SyntaxTrivia.ToFullString() -> string
Microsoft.CodeAnalysisP.SyntaxTrivia.Token.get -> Microsoft.CodeAnalysisP.SyntaxToken
Microsoft.CodeAnalysisP.SyntaxTrivia.WithAdditionalAnnotations(params Microsoft.CodeAnalysisP.SyntaxAnnotation[] annotations) -> Microsoft.CodeAnalysisP.SyntaxTrivia
Microsoft.CodeAnalysisP.SyntaxTrivia.WithAdditionalAnnotations(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxAnnotation> annotations) -> Microsoft.CodeAnalysisP.SyntaxTrivia
Microsoft.CodeAnalysisP.SyntaxTrivia.WithoutAnnotations(params Microsoft.CodeAnalysisP.SyntaxAnnotation[] annotations) -> Microsoft.CodeAnalysisP.SyntaxTrivia
Microsoft.CodeAnalysisP.SyntaxTrivia.WithoutAnnotations(string annotationKind) -> Microsoft.CodeAnalysisP.SyntaxTrivia
Microsoft.CodeAnalysisP.SyntaxTrivia.WithoutAnnotations(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxAnnotation> annotations) -> Microsoft.CodeAnalysisP.SyntaxTrivia
Microsoft.CodeAnalysisP.SyntaxTrivia.WriteTo(System.IO.TextWriter writer) -> void
Microsoft.CodeAnalysisP.SyntaxTriviaList
Microsoft.CodeAnalysisP.SyntaxTriviaList.Add(Microsoft.CodeAnalysisP.SyntaxTrivia trivia) -> Microsoft.CodeAnalysisP.SyntaxTriviaList
Microsoft.CodeAnalysisP.SyntaxTriviaList.AddRange(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxTrivia> trivia) -> Microsoft.CodeAnalysisP.SyntaxTriviaList
Microsoft.CodeAnalysisP.SyntaxTriviaList.Any() -> bool
Microsoft.CodeAnalysisP.SyntaxTriviaList.Count.get -> int
Microsoft.CodeAnalysisP.SyntaxTriviaList.ElementAt(int index) -> Microsoft.CodeAnalysisP.SyntaxTrivia
Microsoft.CodeAnalysisP.SyntaxTriviaList.Enumerator
Microsoft.CodeAnalysisP.SyntaxTriviaList.Enumerator.Current.get -> Microsoft.CodeAnalysisP.SyntaxTrivia
Microsoft.CodeAnalysisP.SyntaxTriviaList.Enumerator.MoveNext() -> bool
Microsoft.CodeAnalysisP.SyntaxTriviaList.Equals(Microsoft.CodeAnalysisP.SyntaxTriviaList other) -> bool
Microsoft.CodeAnalysisP.SyntaxTriviaList.First() -> Microsoft.CodeAnalysisP.SyntaxTrivia
Microsoft.CodeAnalysisP.SyntaxTriviaList.FullSpan.get -> Microsoft.CodeAnalysisP.Text.TextSpan
Microsoft.CodeAnalysisP.SyntaxTriviaList.GetEnumerator() -> Microsoft.CodeAnalysisP.SyntaxTriviaList.Enumerator
Microsoft.CodeAnalysisP.SyntaxTriviaList.IndexOf(Microsoft.CodeAnalysisP.SyntaxTrivia triviaInList) -> int
Microsoft.CodeAnalysisP.SyntaxTriviaList.Insert(int index, Microsoft.CodeAnalysisP.SyntaxTrivia trivia) -> Microsoft.CodeAnalysisP.SyntaxTriviaList
Microsoft.CodeAnalysisP.SyntaxTriviaList.InsertRange(int index, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxTrivia> trivia) -> Microsoft.CodeAnalysisP.SyntaxTriviaList
Microsoft.CodeAnalysisP.SyntaxTriviaList.Last() -> Microsoft.CodeAnalysisP.SyntaxTrivia
Microsoft.CodeAnalysisP.SyntaxTriviaList.Remove(Microsoft.CodeAnalysisP.SyntaxTrivia triviaInList) -> Microsoft.CodeAnalysisP.SyntaxTriviaList
Microsoft.CodeAnalysisP.SyntaxTriviaList.RemoveAt(int index) -> Microsoft.CodeAnalysisP.SyntaxTriviaList
Microsoft.CodeAnalysisP.SyntaxTriviaList.Replace(Microsoft.CodeAnalysisP.SyntaxTrivia triviaInList, Microsoft.CodeAnalysisP.SyntaxTrivia newTrivia) -> Microsoft.CodeAnalysisP.SyntaxTriviaList
Microsoft.CodeAnalysisP.SyntaxTriviaList.ReplaceRange(Microsoft.CodeAnalysisP.SyntaxTrivia triviaInList, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxTrivia> newTrivia) -> Microsoft.CodeAnalysisP.SyntaxTriviaList
Microsoft.CodeAnalysisP.SyntaxTriviaList.Reverse() -> Microsoft.CodeAnalysisP.SyntaxTriviaList.Reversed
Microsoft.CodeAnalysisP.SyntaxTriviaList.Reversed
Microsoft.CodeAnalysisP.SyntaxTriviaList.Reversed.Enumerator
Microsoft.CodeAnalysisP.SyntaxTriviaList.Reversed.Enumerator.Current.get -> Microsoft.CodeAnalysisP.SyntaxTrivia
Microsoft.CodeAnalysisP.SyntaxTriviaList.Reversed.Enumerator.MoveNext() -> bool
Microsoft.CodeAnalysisP.SyntaxTriviaList.Reversed.Equals(Microsoft.CodeAnalysisP.SyntaxTriviaList.Reversed other) -> bool
Microsoft.CodeAnalysisP.SyntaxTriviaList.Reversed.GetEnumerator() -> Microsoft.CodeAnalysisP.SyntaxTriviaList.Reversed.Enumerator
Microsoft.CodeAnalysisP.SyntaxTriviaList.Reversed.Reversed(Microsoft.CodeAnalysisP.SyntaxTriviaList list) -> void
Microsoft.CodeAnalysisP.SyntaxTriviaList.Span.get -> Microsoft.CodeAnalysisP.Text.TextSpan
Microsoft.CodeAnalysisP.SyntaxTriviaList.SyntaxTriviaList(Microsoft.CodeAnalysisP.SyntaxTrivia trivia) -> void
Microsoft.CodeAnalysisP.SyntaxTriviaList.SyntaxTriviaList(params Microsoft.CodeAnalysisP.SyntaxTrivia[] trivias) -> void
Microsoft.CodeAnalysisP.SyntaxTriviaList.SyntaxTriviaList(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxTrivia> trivias) -> void
Microsoft.CodeAnalysisP.SyntaxTriviaList.this[int index].get -> Microsoft.CodeAnalysisP.SyntaxTrivia
Microsoft.CodeAnalysisP.SyntaxTriviaList.ToFullString() -> string
Microsoft.CodeAnalysisP.SyntaxWalker
Microsoft.CodeAnalysisP.SyntaxWalker.Depth.get -> Microsoft.CodeAnalysisP.SyntaxWalkerDepth
Microsoft.CodeAnalysisP.SyntaxWalker.SyntaxWalker(Microsoft.CodeAnalysisP.SyntaxWalkerDepth depth = Microsoft.CodeAnalysisP.SyntaxWalkerDepth.Node) -> void
Microsoft.CodeAnalysisP.SyntaxWalkerDepth
Microsoft.CodeAnalysisP.SyntaxWalkerDepth.Node = 0 -> Microsoft.CodeAnalysisP.SyntaxWalkerDepth
Microsoft.CodeAnalysisP.SyntaxWalkerDepth.StructuredTrivia = 3 -> Microsoft.CodeAnalysisP.SyntaxWalkerDepth
Microsoft.CodeAnalysisP.SyntaxWalkerDepth.Token = 1 -> Microsoft.CodeAnalysisP.SyntaxWalkerDepth
Microsoft.CodeAnalysisP.SyntaxWalkerDepth.Trivia = 2 -> Microsoft.CodeAnalysisP.SyntaxWalkerDepth
Microsoft.CodeAnalysisP.Text.LinePosition
Microsoft.CodeAnalysisP.Text.LinePosition.Character.get -> int
Microsoft.CodeAnalysisP.Text.LinePosition.CompareTo(Microsoft.CodeAnalysisP.Text.LinePosition other) -> int
Microsoft.CodeAnalysisP.Text.LinePosition.Equals(Microsoft.CodeAnalysisP.Text.LinePosition other) -> bool
Microsoft.CodeAnalysisP.Text.LinePosition.Line.get -> int
Microsoft.CodeAnalysisP.Text.LinePosition.LinePosition(int line, int character) -> void
Microsoft.CodeAnalysisP.Text.LinePositionSpan
Microsoft.CodeAnalysisP.Text.LinePositionSpan.End.get -> Microsoft.CodeAnalysisP.Text.LinePosition
Microsoft.CodeAnalysisP.Text.LinePositionSpan.Equals(Microsoft.CodeAnalysisP.Text.LinePositionSpan other) -> bool
Microsoft.CodeAnalysisP.Text.LinePositionSpan.LinePositionSpan(Microsoft.CodeAnalysisP.Text.LinePosition start, Microsoft.CodeAnalysisP.Text.LinePosition end) -> void
Microsoft.CodeAnalysisP.Text.LinePositionSpan.Start.get -> Microsoft.CodeAnalysisP.Text.LinePosition
Microsoft.CodeAnalysisP.Text.SourceHashAlgorithm
Microsoft.CodeAnalysisP.Text.SourceHashAlgorithm.None = 0 -> Microsoft.CodeAnalysisP.Text.SourceHashAlgorithm
Microsoft.CodeAnalysisP.Text.SourceHashAlgorithm.Sha1 = 1 -> Microsoft.CodeAnalysisP.Text.SourceHashAlgorithm
Microsoft.CodeAnalysisP.Text.SourceHashAlgorithm.Sha256 = 2 -> Microsoft.CodeAnalysisP.Text.SourceHashAlgorithm
Microsoft.CodeAnalysisP.Text.SourceText
Microsoft.CodeAnalysisP.Text.SourceText.CanBeEmbedded.get -> bool
Microsoft.CodeAnalysisP.Text.SourceText.ChecksumAlgorithm.get -> Microsoft.CodeAnalysisP.Text.SourceHashAlgorithm
Microsoft.CodeAnalysisP.Text.SourceText.ContentEquals(Microsoft.CodeAnalysisP.Text.SourceText other) -> bool
Microsoft.CodeAnalysisP.Text.SourceText.GetChecksum() -> System.Collections.Immutable.ImmutableArray<byte>
Microsoft.CodeAnalysisP.Text.SourceText.GetSubText(int start) -> Microsoft.CodeAnalysisP.Text.SourceText
Microsoft.CodeAnalysisP.Text.SourceText.Lines.get -> Microsoft.CodeAnalysisP.Text.TextLineCollection
Microsoft.CodeAnalysisP.Text.SourceText.Replace(int start, int length, string newText) -> Microsoft.CodeAnalysisP.Text.SourceText
Microsoft.CodeAnalysisP.Text.SourceText.Replace(Microsoft.CodeAnalysisP.Text.TextSpan span, string newText) -> Microsoft.CodeAnalysisP.Text.SourceText
Microsoft.CodeAnalysisP.Text.SourceText.SourceText(System.Collections.Immutable.ImmutableArray<byte> checksum = default(System.Collections.Immutable.ImmutableArray<byte>), Microsoft.CodeAnalysisP.Text.SourceHashAlgorithm checksumAlgorithm = Microsoft.CodeAnalysisP.Text.SourceHashAlgorithm.Sha1, Microsoft.CodeAnalysisP.Text.SourceTextContainer container = null) -> void
Microsoft.CodeAnalysisP.Text.SourceText.WithChanges(params Microsoft.CodeAnalysisP.Text.TextChange[] changes) -> Microsoft.CodeAnalysisP.Text.SourceText
Microsoft.CodeAnalysisP.Text.SourceText.Write(System.IO.TextWriter textWriter, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> void
Microsoft.CodeAnalysisP.Text.SourceTextContainer
Microsoft.CodeAnalysisP.Text.SourceTextContainer.SourceTextContainer() -> void
Microsoft.CodeAnalysisP.Text.TextChange
Microsoft.CodeAnalysisP.Text.TextChange.Equals(Microsoft.CodeAnalysisP.Text.TextChange other) -> bool
Microsoft.CodeAnalysisP.Text.TextChange.NewText.get -> string
Microsoft.CodeAnalysisP.Text.TextChange.Span.get -> Microsoft.CodeAnalysisP.Text.TextSpan
Microsoft.CodeAnalysisP.Text.TextChange.TextChange(Microsoft.CodeAnalysisP.Text.TextSpan span, string newText) -> void
Microsoft.CodeAnalysisP.Text.TextChangeEventArgs
Microsoft.CodeAnalysisP.Text.TextChangeEventArgs.Changes.get -> System.Collections.Generic.IReadOnlyList<Microsoft.CodeAnalysisP.Text.TextChangeRange>
Microsoft.CodeAnalysisP.Text.TextChangeEventArgs.NewText.get -> Microsoft.CodeAnalysisP.Text.SourceText
Microsoft.CodeAnalysisP.Text.TextChangeEventArgs.OldText.get -> Microsoft.CodeAnalysisP.Text.SourceText
Microsoft.CodeAnalysisP.Text.TextChangeEventArgs.TextChangeEventArgs(Microsoft.CodeAnalysisP.Text.SourceText oldText, Microsoft.CodeAnalysisP.Text.SourceText newText, params Microsoft.CodeAnalysisP.Text.TextChangeRange[] changes) -> void
Microsoft.CodeAnalysisP.Text.TextChangeEventArgs.TextChangeEventArgs(Microsoft.CodeAnalysisP.Text.SourceText oldText, Microsoft.CodeAnalysisP.Text.SourceText newText, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.Text.TextChangeRange> changes) -> void
Microsoft.CodeAnalysisP.Text.TextChangeRange
Microsoft.CodeAnalysisP.Text.TextChangeRange.Equals(Microsoft.CodeAnalysisP.Text.TextChangeRange other) -> bool
Microsoft.CodeAnalysisP.Text.TextChangeRange.NewLength.get -> int
Microsoft.CodeAnalysisP.Text.TextChangeRange.Span.get -> Microsoft.CodeAnalysisP.Text.TextSpan
Microsoft.CodeAnalysisP.Text.TextChangeRange.TextChangeRange(Microsoft.CodeAnalysisP.Text.TextSpan span, int newLength) -> void
Microsoft.CodeAnalysisP.Text.TextLine
Microsoft.CodeAnalysisP.Text.TextLine.End.get -> int
Microsoft.CodeAnalysisP.Text.TextLine.EndIncludingLineBreak.get -> int
Microsoft.CodeAnalysisP.Text.TextLine.Equals(Microsoft.CodeAnalysisP.Text.TextLine other) -> bool
Microsoft.CodeAnalysisP.Text.TextLine.LineNumber.get -> int
Microsoft.CodeAnalysisP.Text.TextLine.Span.get -> Microsoft.CodeAnalysisP.Text.TextSpan
Microsoft.CodeAnalysisP.Text.TextLine.SpanIncludingLineBreak.get -> Microsoft.CodeAnalysisP.Text.TextSpan
Microsoft.CodeAnalysisP.Text.TextLine.Start.get -> int
Microsoft.CodeAnalysisP.Text.TextLine.Text.get -> Microsoft.CodeAnalysisP.Text.SourceText
Microsoft.CodeAnalysisP.Text.TextLineCollection
Microsoft.CodeAnalysisP.Text.TextLineCollection.Enumerator
Microsoft.CodeAnalysisP.Text.TextLineCollection.Enumerator.Current.get -> Microsoft.CodeAnalysisP.Text.TextLine
Microsoft.CodeAnalysisP.Text.TextLineCollection.Enumerator.MoveNext() -> bool
Microsoft.CodeAnalysisP.Text.TextLineCollection.GetEnumerator() -> Microsoft.CodeAnalysisP.Text.TextLineCollection.Enumerator
Microsoft.CodeAnalysisP.Text.TextLineCollection.GetLinePositionSpan(Microsoft.CodeAnalysisP.Text.TextSpan span) -> Microsoft.CodeAnalysisP.Text.LinePositionSpan
Microsoft.CodeAnalysisP.Text.TextLineCollection.GetPosition(Microsoft.CodeAnalysisP.Text.LinePosition position) -> int
Microsoft.CodeAnalysisP.Text.TextLineCollection.GetTextSpan(Microsoft.CodeAnalysisP.Text.LinePositionSpan span) -> Microsoft.CodeAnalysisP.Text.TextSpan
Microsoft.CodeAnalysisP.Text.TextLineCollection.TextLineCollection() -> void
Microsoft.CodeAnalysisP.Text.TextSpan
Microsoft.CodeAnalysisP.Text.TextSpan.CompareTo(Microsoft.CodeAnalysisP.Text.TextSpan other) -> int
Microsoft.CodeAnalysisP.Text.TextSpan.Contains(int position) -> bool
Microsoft.CodeAnalysisP.Text.TextSpan.Contains(Microsoft.CodeAnalysisP.Text.TextSpan span) -> bool
Microsoft.CodeAnalysisP.Text.TextSpan.End.get -> int
Microsoft.CodeAnalysisP.Text.TextSpan.Equals(Microsoft.CodeAnalysisP.Text.TextSpan other) -> bool
Microsoft.CodeAnalysisP.Text.TextSpan.Intersection(Microsoft.CodeAnalysisP.Text.TextSpan span) -> Microsoft.CodeAnalysisP.Text.TextSpan?
Microsoft.CodeAnalysisP.Text.TextSpan.IntersectsWith(int position) -> bool
Microsoft.CodeAnalysisP.Text.TextSpan.IntersectsWith(Microsoft.CodeAnalysisP.Text.TextSpan span) -> bool
Microsoft.CodeAnalysisP.Text.TextSpan.IsEmpty.get -> bool
Microsoft.CodeAnalysisP.Text.TextSpan.Length.get -> int
Microsoft.CodeAnalysisP.Text.TextSpan.Overlap(Microsoft.CodeAnalysisP.Text.TextSpan span) -> Microsoft.CodeAnalysisP.Text.TextSpan?
Microsoft.CodeAnalysisP.Text.TextSpan.OverlapsWith(Microsoft.CodeAnalysisP.Text.TextSpan span) -> bool
Microsoft.CodeAnalysisP.Text.TextSpan.Start.get -> int
Microsoft.CodeAnalysisP.Text.TextSpan.TextSpan(int start, int length) -> void
Microsoft.CodeAnalysisP.TypedConstant
Microsoft.CodeAnalysisP.TypedConstant.Equals(Microsoft.CodeAnalysisP.TypedConstant other) -> bool
Microsoft.CodeAnalysisP.TypedConstant.IsNull.get -> bool
Microsoft.CodeAnalysisP.TypedConstant.Kind.get -> Microsoft.CodeAnalysisP.TypedConstantKind
Microsoft.CodeAnalysisP.TypedConstant.Type.get -> Microsoft.CodeAnalysisP.ITypeSymbol
Microsoft.CodeAnalysisP.TypedConstant.Value.get -> object
Microsoft.CodeAnalysisP.TypedConstant.Values.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.TypedConstant>
Microsoft.CodeAnalysisP.TypedConstantKind
Microsoft.CodeAnalysisP.TypedConstantKind.Array = 4 -> Microsoft.CodeAnalysisP.TypedConstantKind
Microsoft.CodeAnalysisP.TypedConstantKind.Enum = 2 -> Microsoft.CodeAnalysisP.TypedConstantKind
Microsoft.CodeAnalysisP.TypedConstantKind.Error = 0 -> Microsoft.CodeAnalysisP.TypedConstantKind
Microsoft.CodeAnalysisP.TypedConstantKind.Primitive = 1 -> Microsoft.CodeAnalysisP.TypedConstantKind
Microsoft.CodeAnalysisP.TypedConstantKind.Type = 3 -> Microsoft.CodeAnalysisP.TypedConstantKind
Microsoft.CodeAnalysisP.TypeInfo
Microsoft.CodeAnalysisP.TypeInfo.ConvertedType.get -> Microsoft.CodeAnalysisP.ITypeSymbol
Microsoft.CodeAnalysisP.TypeInfo.Equals(Microsoft.CodeAnalysisP.TypeInfo other) -> bool
Microsoft.CodeAnalysisP.TypeInfo.Type.get -> Microsoft.CodeAnalysisP.ITypeSymbol
Microsoft.CodeAnalysisP.TypeKind
Microsoft.CodeAnalysisP.TypeKind.Array = 1 -> Microsoft.CodeAnalysisP.TypeKind
Microsoft.CodeAnalysisP.TypeKind.Class = 2 -> Microsoft.CodeAnalysisP.TypeKind
Microsoft.CodeAnalysisP.TypeKind.Delegate = 3 -> Microsoft.CodeAnalysisP.TypeKind
Microsoft.CodeAnalysisP.TypeKind.Dynamic = 4 -> Microsoft.CodeAnalysisP.TypeKind
Microsoft.CodeAnalysisP.TypeKind.Enum = 5 -> Microsoft.CodeAnalysisP.TypeKind
Microsoft.CodeAnalysisP.TypeKind.Error = 6 -> Microsoft.CodeAnalysisP.TypeKind
Microsoft.CodeAnalysisP.TypeKind.Interface = 7 -> Microsoft.CodeAnalysisP.TypeKind
Microsoft.CodeAnalysisP.TypeKind.Module = 8 -> Microsoft.CodeAnalysisP.TypeKind
Microsoft.CodeAnalysisP.TypeKind.Pointer = 9 -> Microsoft.CodeAnalysisP.TypeKind
Microsoft.CodeAnalysisP.TypeKind.Struct = 10 -> Microsoft.CodeAnalysisP.TypeKind
Microsoft.CodeAnalysisP.TypeKind.Structure = 10 -> Microsoft.CodeAnalysisP.TypeKind
Microsoft.CodeAnalysisP.TypeKind.Submission = 12 -> Microsoft.CodeAnalysisP.TypeKind
Microsoft.CodeAnalysisP.TypeKind.TypeParameter = 11 -> Microsoft.CodeAnalysisP.TypeKind
Microsoft.CodeAnalysisP.TypeKind.Unknown = 0 -> Microsoft.CodeAnalysisP.TypeKind
Microsoft.CodeAnalysisP.TypeParameterKind
Microsoft.CodeAnalysisP.TypeParameterKind.Cref = 2 -> Microsoft.CodeAnalysisP.TypeParameterKind
Microsoft.CodeAnalysisP.TypeParameterKind.Method = 1 -> Microsoft.CodeAnalysisP.TypeParameterKind
Microsoft.CodeAnalysisP.TypeParameterKind.Type = 0 -> Microsoft.CodeAnalysisP.TypeParameterKind
Microsoft.CodeAnalysisP.UnresolvedMetadataReference
Microsoft.CodeAnalysisP.UnresolvedMetadataReference.Reference.get -> string
Microsoft.CodeAnalysisP.VarianceKind
Microsoft.CodeAnalysisP.VarianceKind.In = 2 -> Microsoft.CodeAnalysisP.VarianceKind
Microsoft.CodeAnalysisP.VarianceKind.None = 0 -> Microsoft.CodeAnalysisP.VarianceKind
Microsoft.CodeAnalysisP.VarianceKind.Out = 1 -> Microsoft.CodeAnalysisP.VarianceKind
Microsoft.CodeAnalysisP.WellKnownDiagnosticTags
Microsoft.CodeAnalysisP.WellKnownMemberNames
Microsoft.CodeAnalysisP.XmlFileResolver
Microsoft.CodeAnalysisP.XmlFileResolver.BaseDirectory.get -> string
Microsoft.CodeAnalysisP.XmlFileResolver.XmlFileResolver(string baseDirectory) -> void
Microsoft.CodeAnalysisP.XmlReferenceResolver
Microsoft.CodeAnalysisP.XmlReferenceResolver.XmlReferenceResolver() -> void
override abstract Microsoft.CodeAnalysisP.CompilationOptions.Equals(object obj) -> bool
override abstract Microsoft.CodeAnalysisP.CompilationOptions.GetHashCode() -> int
override abstract Microsoft.CodeAnalysisP.Diagnostic.Equals(object obj) -> bool
override abstract Microsoft.CodeAnalysisP.Diagnostic.GetHashCode() -> int
override abstract Microsoft.CodeAnalysisP.DocumentationProvider.Equals(object obj) -> bool
override abstract Microsoft.CodeAnalysisP.DocumentationProvider.GetHashCode() -> int
override abstract Microsoft.CodeAnalysisP.Location.Equals(object obj) -> bool
override abstract Microsoft.CodeAnalysisP.Location.GetHashCode() -> int
override abstract Microsoft.CodeAnalysisP.MetadataReferenceResolver.Equals(object other) -> bool
override abstract Microsoft.CodeAnalysisP.MetadataReferenceResolver.GetHashCode() -> int
override abstract Microsoft.CodeAnalysisP.ParseOptions.Equals(object obj) -> bool
override abstract Microsoft.CodeAnalysisP.ParseOptions.GetHashCode() -> int
override abstract Microsoft.CodeAnalysisP.SourceReferenceResolver.Equals(object other) -> bool
override abstract Microsoft.CodeAnalysisP.SourceReferenceResolver.GetHashCode() -> int
override abstract Microsoft.CodeAnalysisP.StrongNameProvider.Equals(object other) -> bool
override abstract Microsoft.CodeAnalysisP.StrongNameProvider.GetHashCode() -> int
override abstract Microsoft.CodeAnalysisP.XmlReferenceResolver.Equals(object other) -> bool
override abstract Microsoft.CodeAnalysisP.XmlReferenceResolver.GetHashCode() -> int
override Microsoft.CodeAnalysisP.AssemblyIdentity.Equals(object obj) -> bool
override Microsoft.CodeAnalysisP.AssemblyIdentity.GetHashCode() -> int
override Microsoft.CodeAnalysisP.AssemblyIdentity.ToString() -> string
override Microsoft.CodeAnalysisP.AssemblyMetadata.Dispose() -> void
override Microsoft.CodeAnalysisP.AssemblyMetadata.Kind.get -> Microsoft.CodeAnalysisP.MetadataImageKind
override Microsoft.CodeAnalysisP.ChildSyntaxList.Equals(object obj) -> bool
override Microsoft.CodeAnalysisP.ChildSyntaxList.GetHashCode() -> int
override Microsoft.CodeAnalysisP.ChildSyntaxList.Reversed.Equals(object obj) -> bool
override Microsoft.CodeAnalysisP.ChildSyntaxList.Reversed.GetHashCode() -> int
override Microsoft.CodeAnalysisP.CommandLineAnalyzerReference.Equals(object obj) -> bool
override Microsoft.CodeAnalysisP.CommandLineAnalyzerReference.GetHashCode() -> int
override Microsoft.CodeAnalysisP.CommandLineReference.Equals(object obj) -> bool
override Microsoft.CodeAnalysisP.CommandLineReference.GetHashCode() -> int
override Microsoft.CodeAnalysisP.CompilationReference.Display.get -> string
override Microsoft.CodeAnalysisP.CompilationReference.Equals(object obj) -> bool
override Microsoft.CodeAnalysisP.CompilationReference.GetHashCode() -> int
override Microsoft.CodeAnalysisP.DesktopStrongNameProvider.Equals(object obj) -> bool
override Microsoft.CodeAnalysisP.DesktopStrongNameProvider.GetHashCode() -> int
override Microsoft.CodeAnalysisP.Diagnostic.ToString() -> string
override Microsoft.CodeAnalysisP.DiagnosticDescriptor.Equals(object obj) -> bool
override Microsoft.CodeAnalysisP.DiagnosticDescriptor.GetHashCode() -> int
override Microsoft.CodeAnalysisP.Diagnostics.AnalyzerFileReference.Display.get -> string
override Microsoft.CodeAnalysisP.Diagnostics.AnalyzerFileReference.Equals(object obj) -> bool
override Microsoft.CodeAnalysisP.Diagnostics.AnalyzerFileReference.FullPath.get -> string
override Microsoft.CodeAnalysisP.Diagnostics.AnalyzerFileReference.GetAnalyzers(string language) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Diagnostics.DiagnosticAnalyzer>
override Microsoft.CodeAnalysisP.Diagnostics.AnalyzerFileReference.GetAnalyzersForAllLanguages() -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Diagnostics.DiagnosticAnalyzer>
override Microsoft.CodeAnalysisP.Diagnostics.AnalyzerFileReference.GetHashCode() -> int
override Microsoft.CodeAnalysisP.Diagnostics.AnalyzerFileReference.Id.get -> object
override Microsoft.CodeAnalysisP.Diagnostics.AnalyzerImageReference.Display.get -> string
override Microsoft.CodeAnalysisP.Diagnostics.AnalyzerImageReference.FullPath.get -> string
override Microsoft.CodeAnalysisP.Diagnostics.AnalyzerImageReference.GetAnalyzers(string language) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Diagnostics.DiagnosticAnalyzer>
override Microsoft.CodeAnalysisP.Diagnostics.AnalyzerImageReference.GetAnalyzersForAllLanguages() -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Diagnostics.DiagnosticAnalyzer>
override Microsoft.CodeAnalysisP.Diagnostics.AnalyzerImageReference.Id.get -> object
override Microsoft.CodeAnalysisP.Diagnostics.AnalyzerOptions.Equals(object obj) -> bool
override Microsoft.CodeAnalysisP.Diagnostics.AnalyzerOptions.GetHashCode() -> int
override Microsoft.CodeAnalysisP.Diagnostics.UnresolvedAnalyzerReference.Display.get -> string
override Microsoft.CodeAnalysisP.Diagnostics.UnresolvedAnalyzerReference.FullPath.get -> string
override Microsoft.CodeAnalysisP.Diagnostics.UnresolvedAnalyzerReference.GetAnalyzers(string language) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Diagnostics.DiagnosticAnalyzer>
override Microsoft.CodeAnalysisP.Diagnostics.UnresolvedAnalyzerReference.GetAnalyzersForAllLanguages() -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Diagnostics.DiagnosticAnalyzer>
override Microsoft.CodeAnalysisP.Diagnostics.UnresolvedAnalyzerReference.Id.get -> object
override Microsoft.CodeAnalysisP.Emit.EmitOptions.Equals(object obj) -> bool
override Microsoft.CodeAnalysisP.Emit.EmitOptions.GetHashCode() -> int
override Microsoft.CodeAnalysisP.Emit.SemanticEdit.Equals(object obj) -> bool
override Microsoft.CodeAnalysisP.Emit.SemanticEdit.GetHashCode() -> int
override Microsoft.CodeAnalysisP.FileLinePositionSpan.Equals(object other) -> bool
override Microsoft.CodeAnalysisP.FileLinePositionSpan.GetHashCode() -> int
override Microsoft.CodeAnalysisP.FileLinePositionSpan.ToString() -> string
override Microsoft.CodeAnalysisP.Location.ToString() -> string
override Microsoft.CodeAnalysisP.MetadataReferenceProperties.Equals(object obj) -> bool
override Microsoft.CodeAnalysisP.MetadataReferenceProperties.GetHashCode() -> int
override Microsoft.CodeAnalysisP.ModuleMetadata.Dispose() -> void
override Microsoft.CodeAnalysisP.ModuleMetadata.Kind.get -> Microsoft.CodeAnalysisP.MetadataImageKind
override Microsoft.CodeAnalysisP.Operations.OperationWalker.DefaultVisit(Microsoft.CodeAnalysisP.IOperation operation) -> void
override Microsoft.CodeAnalysisP.Operations.OperationWalker.Visit(Microsoft.CodeAnalysisP.IOperation operation) -> void
override Microsoft.CodeAnalysisP.Optional<T>.ToString() -> string
override Microsoft.CodeAnalysisP.PortableExecutableReference.Display.get -> string
override Microsoft.CodeAnalysisP.PreprocessingSymbolInfo.Equals(object obj) -> bool
override Microsoft.CodeAnalysisP.PreprocessingSymbolInfo.GetHashCode() -> int
override Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>.Enumerator.Equals(object obj) -> bool
override Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>.Enumerator.GetHashCode() -> int
override Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>.Equals(object obj) -> bool
override Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>.GetHashCode() -> int
override Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>.ToString() -> string
override Microsoft.CodeAnalysisP.SourceFileResolver.Equals(object obj) -> bool
override Microsoft.CodeAnalysisP.SourceFileResolver.GetHashCode() -> int
override Microsoft.CodeAnalysisP.SourceFileResolver.NormalizePath(string path, string baseFilePath) -> string
override Microsoft.CodeAnalysisP.SourceFileResolver.OpenRead(string resolvedPath) -> System.IO.Stream
override Microsoft.CodeAnalysisP.SourceFileResolver.ResolveReference(string path, string baseFilePath) -> string
override Microsoft.CodeAnalysisP.SubsystemVersion.Equals(object obj) -> bool
override Microsoft.CodeAnalysisP.SubsystemVersion.GetHashCode() -> int
override Microsoft.CodeAnalysisP.SubsystemVersion.ToString() -> string
override Microsoft.CodeAnalysisP.SymbolDisplayPart.ToString() -> string
override Microsoft.CodeAnalysisP.SymbolInfo.Equals(object obj) -> bool
override Microsoft.CodeAnalysisP.SymbolInfo.GetHashCode() -> int
override Microsoft.CodeAnalysisP.SyntaxAnnotation.Equals(object obj) -> bool
override Microsoft.CodeAnalysisP.SyntaxAnnotation.GetHashCode() -> int
override Microsoft.CodeAnalysisP.SyntaxList<TNode>.Enumerator.Equals(object obj) -> bool
override Microsoft.CodeAnalysisP.SyntaxList<TNode>.Enumerator.GetHashCode() -> int
override Microsoft.CodeAnalysisP.SyntaxList<TNode>.Equals(object obj) -> bool
override Microsoft.CodeAnalysisP.SyntaxList<TNode>.GetHashCode() -> int
override Microsoft.CodeAnalysisP.SyntaxList<TNode>.ToString() -> string
override Microsoft.CodeAnalysisP.SyntaxNode.ToString() -> string
override Microsoft.CodeAnalysisP.SyntaxNodeOrToken.Equals(object obj) -> bool
override Microsoft.CodeAnalysisP.SyntaxNodeOrToken.GetHashCode() -> int
override Microsoft.CodeAnalysisP.SyntaxNodeOrToken.ToString() -> string
override Microsoft.CodeAnalysisP.SyntaxNodeOrTokenList.Enumerator.Equals(object obj) -> bool
override Microsoft.CodeAnalysisP.SyntaxNodeOrTokenList.Enumerator.GetHashCode() -> int
override Microsoft.CodeAnalysisP.SyntaxNodeOrTokenList.Equals(object obj) -> bool
override Microsoft.CodeAnalysisP.SyntaxNodeOrTokenList.GetHashCode() -> int
override Microsoft.CodeAnalysisP.SyntaxNodeOrTokenList.ToString() -> string
override Microsoft.CodeAnalysisP.SyntaxToken.Equals(object obj) -> bool
override Microsoft.CodeAnalysisP.SyntaxToken.GetHashCode() -> int
override Microsoft.CodeAnalysisP.SyntaxToken.ToString() -> string
override Microsoft.CodeAnalysisP.SyntaxTokenList.Enumerator.Equals(object obj) -> bool
override Microsoft.CodeAnalysisP.SyntaxTokenList.Enumerator.GetHashCode() -> int
override Microsoft.CodeAnalysisP.SyntaxTokenList.Equals(object obj) -> bool
override Microsoft.CodeAnalysisP.SyntaxTokenList.GetHashCode() -> int
override Microsoft.CodeAnalysisP.SyntaxTokenList.Reversed.Enumerator.Equals(object obj) -> bool
override Microsoft.CodeAnalysisP.SyntaxTokenList.Reversed.Enumerator.GetHashCode() -> int
override Microsoft.CodeAnalysisP.SyntaxTokenList.Reversed.Equals(object obj) -> bool
override Microsoft.CodeAnalysisP.SyntaxTokenList.Reversed.GetHashCode() -> int
override Microsoft.CodeAnalysisP.SyntaxTokenList.ToString() -> string
override Microsoft.CodeAnalysisP.SyntaxTree.ToString() -> string
override Microsoft.CodeAnalysisP.SyntaxTrivia.Equals(object obj) -> bool
override Microsoft.CodeAnalysisP.SyntaxTrivia.GetHashCode() -> int
override Microsoft.CodeAnalysisP.SyntaxTrivia.ToString() -> string
override Microsoft.CodeAnalysisP.SyntaxTriviaList.Equals(object obj) -> bool
override Microsoft.CodeAnalysisP.SyntaxTriviaList.GetHashCode() -> int
override Microsoft.CodeAnalysisP.SyntaxTriviaList.Reversed.Equals(object obj) -> bool
override Microsoft.CodeAnalysisP.SyntaxTriviaList.Reversed.GetHashCode() -> int
override Microsoft.CodeAnalysisP.SyntaxTriviaList.ToString() -> string
override Microsoft.CodeAnalysisP.Text.LinePosition.Equals(object obj) -> bool
override Microsoft.CodeAnalysisP.Text.LinePosition.GetHashCode() -> int
override Microsoft.CodeAnalysisP.Text.LinePosition.ToString() -> string
override Microsoft.CodeAnalysisP.Text.LinePositionSpan.Equals(object obj) -> bool
override Microsoft.CodeAnalysisP.Text.LinePositionSpan.GetHashCode() -> int
override Microsoft.CodeAnalysisP.Text.LinePositionSpan.ToString() -> string
override Microsoft.CodeAnalysisP.Text.SourceText.ToString() -> string
override Microsoft.CodeAnalysisP.Text.TextChange.Equals(object obj) -> bool
override Microsoft.CodeAnalysisP.Text.TextChange.GetHashCode() -> int
override Microsoft.CodeAnalysisP.Text.TextChange.ToString() -> string
override Microsoft.CodeAnalysisP.Text.TextChangeRange.Equals(object obj) -> bool
override Microsoft.CodeAnalysisP.Text.TextChangeRange.GetHashCode() -> int
override Microsoft.CodeAnalysisP.Text.TextLine.Equals(object obj) -> bool
override Microsoft.CodeAnalysisP.Text.TextLine.GetHashCode() -> int
override Microsoft.CodeAnalysisP.Text.TextLine.ToString() -> string
override Microsoft.CodeAnalysisP.Text.TextLineCollection.Enumerator.Equals(object obj) -> bool
override Microsoft.CodeAnalysisP.Text.TextLineCollection.Enumerator.GetHashCode() -> int
override Microsoft.CodeAnalysisP.Text.TextSpan.Equals(object obj) -> bool
override Microsoft.CodeAnalysisP.Text.TextSpan.GetHashCode() -> int
override Microsoft.CodeAnalysisP.Text.TextSpan.ToString() -> string
override Microsoft.CodeAnalysisP.TypedConstant.Equals(object obj) -> bool
override Microsoft.CodeAnalysisP.TypedConstant.GetHashCode() -> int
override Microsoft.CodeAnalysisP.TypeInfo.Equals(object obj) -> bool
override Microsoft.CodeAnalysisP.TypeInfo.GetHashCode() -> int
override Microsoft.CodeAnalysisP.UnresolvedMetadataReference.Display.get -> string
override Microsoft.CodeAnalysisP.XmlFileResolver.Equals(object obj) -> bool
override Microsoft.CodeAnalysisP.XmlFileResolver.GetHashCode() -> int
override Microsoft.CodeAnalysisP.XmlFileResolver.OpenRead(string resolvedPath) -> System.IO.Stream
override Microsoft.CodeAnalysisP.XmlFileResolver.ResolveReference(string path, string baseFilePath) -> string
override sealed Microsoft.CodeAnalysisP.Diagnostics.DiagnosticAnalyzer.Equals(object obj) -> bool
override sealed Microsoft.CodeAnalysisP.Diagnostics.DiagnosticAnalyzer.GetHashCode() -> int
override sealed Microsoft.CodeAnalysisP.Diagnostics.DiagnosticAnalyzer.ToString() -> string
override sealed Microsoft.CodeAnalysisP.LocalizableString.Equals(object other) -> bool
override sealed Microsoft.CodeAnalysisP.LocalizableString.GetHashCode() -> int
override sealed Microsoft.CodeAnalysisP.LocalizableString.ToString() -> string
static Microsoft.CodeAnalysisP.AnnotationExtensions.WithAdditionalAnnotations<TNode>(this TNode node, params Microsoft.CodeAnalysisP.SyntaxAnnotation[] annotations) -> TNode
static Microsoft.CodeAnalysisP.AnnotationExtensions.WithAdditionalAnnotations<TNode>(this TNode node, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxAnnotation> annotations) -> TNode
static Microsoft.CodeAnalysisP.AnnotationExtensions.WithoutAnnotations<TNode>(this TNode node, params Microsoft.CodeAnalysisP.SyntaxAnnotation[] annotations) -> TNode
static Microsoft.CodeAnalysisP.AnnotationExtensions.WithoutAnnotations<TNode>(this TNode node, string annotationKind) -> TNode
static Microsoft.CodeAnalysisP.AnnotationExtensions.WithoutAnnotations<TNode>(this TNode node, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxAnnotation> annotations) -> TNode
static Microsoft.CodeAnalysisP.AssemblyIdentity.FromAssemblyDefinition(System.Reflection.Assembly assembly) -> Microsoft.CodeAnalysisP.AssemblyIdentity
static Microsoft.CodeAnalysisP.AssemblyIdentity.operator !=(Microsoft.CodeAnalysisP.AssemblyIdentity left, Microsoft.CodeAnalysisP.AssemblyIdentity right) -> bool
static Microsoft.CodeAnalysisP.AssemblyIdentity.operator ==(Microsoft.CodeAnalysisP.AssemblyIdentity left, Microsoft.CodeAnalysisP.AssemblyIdentity right) -> bool
static Microsoft.CodeAnalysisP.AssemblyIdentity.TryParseDisplayName(string displayName, out Microsoft.CodeAnalysisP.AssemblyIdentity identity) -> bool
static Microsoft.CodeAnalysisP.AssemblyIdentity.TryParseDisplayName(string displayName, out Microsoft.CodeAnalysisP.AssemblyIdentity identity, out Microsoft.CodeAnalysisP.AssemblyIdentityParts parts) -> bool
static Microsoft.CodeAnalysisP.AssemblyIdentityComparer.CultureComparer.get -> System.StringComparer
static Microsoft.CodeAnalysisP.AssemblyIdentityComparer.Default.get -> Microsoft.CodeAnalysisP.AssemblyIdentityComparer
static Microsoft.CodeAnalysisP.AssemblyIdentityComparer.SimpleNameComparer.get -> System.StringComparer
static Microsoft.CodeAnalysisP.AssemblyMetadata.Create(Microsoft.CodeAnalysisP.ModuleMetadata module) -> Microsoft.CodeAnalysisP.AssemblyMetadata
static Microsoft.CodeAnalysisP.AssemblyMetadata.Create(params Microsoft.CodeAnalysisP.ModuleMetadata[] modules) -> Microsoft.CodeAnalysisP.AssemblyMetadata
static Microsoft.CodeAnalysisP.AssemblyMetadata.Create(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.ModuleMetadata> modules) -> Microsoft.CodeAnalysisP.AssemblyMetadata
static Microsoft.CodeAnalysisP.AssemblyMetadata.Create(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ModuleMetadata> modules) -> Microsoft.CodeAnalysisP.AssemblyMetadata
static Microsoft.CodeAnalysisP.AssemblyMetadata.CreateFromFile(string path) -> Microsoft.CodeAnalysisP.AssemblyMetadata
static Microsoft.CodeAnalysisP.AssemblyMetadata.CreateFromImage(System.Collections.Generic.IEnumerable<byte> peImage) -> Microsoft.CodeAnalysisP.AssemblyMetadata
static Microsoft.CodeAnalysisP.AssemblyMetadata.CreateFromImage(System.Collections.Immutable.ImmutableArray<byte> peImage) -> Microsoft.CodeAnalysisP.AssemblyMetadata
static Microsoft.CodeAnalysisP.AssemblyMetadata.CreateFromStream(System.IO.Stream peStream, bool leaveOpen = false) -> Microsoft.CodeAnalysisP.AssemblyMetadata
static Microsoft.CodeAnalysisP.AssemblyMetadata.CreateFromStream(System.IO.Stream peStream, System.Reflection.PortableExecutable.PEStreamOptions options) -> Microsoft.CodeAnalysisP.AssemblyMetadata
static Microsoft.CodeAnalysisP.CaseInsensitiveComparison.Compare(string left, string right) -> int
static Microsoft.CodeAnalysisP.CaseInsensitiveComparison.Comparer.get -> System.StringComparer
static Microsoft.CodeAnalysisP.CaseInsensitiveComparison.EndsWith(string value, string possibleEnd) -> bool
static Microsoft.CodeAnalysisP.CaseInsensitiveComparison.Equals(string left, string right) -> bool
static Microsoft.CodeAnalysisP.CaseInsensitiveComparison.GetHashCode(string value) -> int
static Microsoft.CodeAnalysisP.CaseInsensitiveComparison.StartsWith(string value, string possibleStart) -> bool
static Microsoft.CodeAnalysisP.CaseInsensitiveComparison.ToLower(char c) -> char
static Microsoft.CodeAnalysisP.CaseInsensitiveComparison.ToLower(string value) -> string
static Microsoft.CodeAnalysisP.CaseInsensitiveComparison.ToLower(System.Text.StringBuilder builder) -> void
static Microsoft.CodeAnalysisP.ChildSyntaxList.operator !=(Microsoft.CodeAnalysisP.ChildSyntaxList list1, Microsoft.CodeAnalysisP.ChildSyntaxList list2) -> bool
static Microsoft.CodeAnalysisP.ChildSyntaxList.operator ==(Microsoft.CodeAnalysisP.ChildSyntaxList list1, Microsoft.CodeAnalysisP.ChildSyntaxList list2) -> bool
static Microsoft.CodeAnalysisP.CommandLineParser.SplitCommandLineIntoArguments(string commandLine, bool removeHashComments) -> System.Collections.Generic.IEnumerable<string>
static Microsoft.CodeAnalysisP.Compilation.GetRequiredLanguageVersion(Microsoft.CodeAnalysisP.Diagnostic diagnostic) -> string
static Microsoft.CodeAnalysisP.CompilationOptions.operator !=(Microsoft.CodeAnalysisP.CompilationOptions left, Microsoft.CodeAnalysisP.CompilationOptions right) -> bool
static Microsoft.CodeAnalysisP.CompilationOptions.operator ==(Microsoft.CodeAnalysisP.CompilationOptions left, Microsoft.CodeAnalysisP.CompilationOptions right) -> bool
static Microsoft.CodeAnalysisP.DesktopAssemblyIdentityComparer.Default.get -> Microsoft.CodeAnalysisP.DesktopAssemblyIdentityComparer
static Microsoft.CodeAnalysisP.DesktopAssemblyIdentityComparer.LoadFromXml(System.IO.Stream input) -> Microsoft.CodeAnalysisP.DesktopAssemblyIdentityComparer
static Microsoft.CodeAnalysisP.Diagnostic.Create(Microsoft.CodeAnalysisP.DiagnosticDescriptor descriptor, Microsoft.CodeAnalysisP.Location location, Microsoft.CodeAnalysisP.DiagnosticSeverity effectiveSeverity, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.Location> additionalLocations, System.Collections.Immutable.ImmutableDictionary<string, string> properties, params object[] messageArgs) -> Microsoft.CodeAnalysisP.Diagnostic
static Microsoft.CodeAnalysisP.Diagnostic.Create(Microsoft.CodeAnalysisP.DiagnosticDescriptor descriptor, Microsoft.CodeAnalysisP.Location location, params object[] messageArgs) -> Microsoft.CodeAnalysisP.Diagnostic
static Microsoft.CodeAnalysisP.Diagnostic.Create(Microsoft.CodeAnalysisP.DiagnosticDescriptor descriptor, Microsoft.CodeAnalysisP.Location location, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.Location> additionalLocations, params object[] messageArgs) -> Microsoft.CodeAnalysisP.Diagnostic
static Microsoft.CodeAnalysisP.Diagnostic.Create(Microsoft.CodeAnalysisP.DiagnosticDescriptor descriptor, Microsoft.CodeAnalysisP.Location location, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.Location> additionalLocations, System.Collections.Immutable.ImmutableDictionary<string, string> properties, params object[] messageArgs) -> Microsoft.CodeAnalysisP.Diagnostic
static Microsoft.CodeAnalysisP.Diagnostic.Create(Microsoft.CodeAnalysisP.DiagnosticDescriptor descriptor, Microsoft.CodeAnalysisP.Location location, System.Collections.Immutable.ImmutableDictionary<string, string> properties, params object[] messageArgs) -> Microsoft.CodeAnalysisP.Diagnostic
static Microsoft.CodeAnalysisP.Diagnostic.Create(string id, string category, Microsoft.CodeAnalysisP.LocalizableString message, Microsoft.CodeAnalysisP.DiagnosticSeverity severity, Microsoft.CodeAnalysisP.DiagnosticSeverity defaultSeverity, bool isEnabledByDefault, int warningLevel, bool isSuppressed, Microsoft.CodeAnalysisP.LocalizableString title = null, Microsoft.CodeAnalysisP.LocalizableString description = null, string helpLink = null, Microsoft.CodeAnalysisP.Location location = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.Location> additionalLocations = null, System.Collections.Generic.IEnumerable<string> customTags = null, System.Collections.Immutable.ImmutableDictionary<string, string> properties = null) -> Microsoft.CodeAnalysisP.Diagnostic
static Microsoft.CodeAnalysisP.Diagnostic.Create(string id, string category, Microsoft.CodeAnalysisP.LocalizableString message, Microsoft.CodeAnalysisP.DiagnosticSeverity severity, Microsoft.CodeAnalysisP.DiagnosticSeverity defaultSeverity, bool isEnabledByDefault, int warningLevel, Microsoft.CodeAnalysisP.LocalizableString title = null, Microsoft.CodeAnalysisP.LocalizableString description = null, string helpLink = null, Microsoft.CodeAnalysisP.Location location = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.Location> additionalLocations = null, System.Collections.Generic.IEnumerable<string> customTags = null, System.Collections.Immutable.ImmutableDictionary<string, string> properties = null) -> Microsoft.CodeAnalysisP.Diagnostic
static Microsoft.CodeAnalysisP.Diagnostics.CompilationWithAnalyzers.ClearAnalyzerState(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Diagnostics.DiagnosticAnalyzer> analyzers) -> void
static Microsoft.CodeAnalysisP.Diagnostics.CompilationWithAnalyzers.GetEffectiveDiagnostics(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.Diagnostic> diagnostics, Microsoft.CodeAnalysisP.Compilation compilation) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.Diagnostic>
static Microsoft.CodeAnalysisP.Diagnostics.CompilationWithAnalyzers.GetEffectiveDiagnostics(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Diagnostic> diagnostics, Microsoft.CodeAnalysisP.Compilation compilation) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.Diagnostic>
static Microsoft.CodeAnalysisP.Diagnostics.CompilationWithAnalyzers.IsDiagnosticAnalyzerSuppressed(Microsoft.CodeAnalysisP.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysisP.CompilationOptions options, System.Action<System.Exception, Microsoft.CodeAnalysisP.Diagnostics.DiagnosticAnalyzer, Microsoft.CodeAnalysisP.Diagnostic> onAnalyzerException = null) -> bool
static Microsoft.CodeAnalysisP.Diagnostics.DiagnosticAnalyzerExtensions.WithAnalyzers(this Microsoft.CodeAnalysisP.Compilation compilation, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Diagnostics.DiagnosticAnalyzer> analyzers, Microsoft.CodeAnalysisP.Diagnostics.AnalyzerOptions options = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysisP.Diagnostics.CompilationWithAnalyzers
static Microsoft.CodeAnalysisP.Diagnostics.DiagnosticAnalyzerExtensions.WithAnalyzers(this Microsoft.CodeAnalysisP.Compilation compilation, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.Diagnostics.DiagnosticAnalyzer> analyzers, Microsoft.CodeAnalysisP.Diagnostics.CompilationWithAnalyzersOptions analysisOptions) -> Microsoft.CodeAnalysisP.Diagnostics.CompilationWithAnalyzers
static Microsoft.CodeAnalysisP.DocumentationCommentId.CreateDeclarationId(Microsoft.CodeAnalysisP.ISymbol symbol) -> string
static Microsoft.CodeAnalysisP.DocumentationCommentId.CreateReferenceId(Microsoft.CodeAnalysisP.ISymbol symbol) -> string
static Microsoft.CodeAnalysisP.DocumentationCommentId.GetFirstSymbolForDeclarationId(string id, Microsoft.CodeAnalysisP.Compilation compilation) -> Microsoft.CodeAnalysisP.ISymbol
static Microsoft.CodeAnalysisP.DocumentationCommentId.GetFirstSymbolForReferenceId(string id, Microsoft.CodeAnalysisP.Compilation compilation) -> Microsoft.CodeAnalysisP.ISymbol
static Microsoft.CodeAnalysisP.DocumentationCommentId.GetSymbolsForDeclarationId(string id, Microsoft.CodeAnalysisP.Compilation compilation) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ISymbol>
static Microsoft.CodeAnalysisP.DocumentationCommentId.GetSymbolsForReferenceId(string id, Microsoft.CodeAnalysisP.Compilation compilation) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ISymbol>
static Microsoft.CodeAnalysisP.DocumentationProvider.Default.get -> Microsoft.CodeAnalysisP.DocumentationProvider
static Microsoft.CodeAnalysisP.EmbeddedText.FromBytes(string filePath, System.ArraySegment<byte> bytes, Microsoft.CodeAnalysisP.Text.SourceHashAlgorithm checksumAlgorithm = Microsoft.CodeAnalysisP.Text.SourceHashAlgorithm.Sha1) -> Microsoft.CodeAnalysisP.EmbeddedText
static Microsoft.CodeAnalysisP.EmbeddedText.FromSource(string filePath, Microsoft.CodeAnalysisP.Text.SourceText text) -> Microsoft.CodeAnalysisP.EmbeddedText
static Microsoft.CodeAnalysisP.EmbeddedText.FromStream(string filePath, System.IO.Stream stream, Microsoft.CodeAnalysisP.Text.SourceHashAlgorithm checksumAlgorithm = Microsoft.CodeAnalysisP.Text.SourceHashAlgorithm.Sha1) -> Microsoft.CodeAnalysisP.EmbeddedText
static Microsoft.CodeAnalysisP.Emit.EditAndContinueMethodDebugInformation.Create(System.Collections.Immutable.ImmutableArray<byte> compressedSlotMap, System.Collections.Immutable.ImmutableArray<byte> compressedLambdaMap) -> Microsoft.CodeAnalysisP.Emit.EditAndContinueMethodDebugInformation
static Microsoft.CodeAnalysisP.Emit.EmitBaseline.CreateInitialBaseline(Microsoft.CodeAnalysisP.ModuleMetadata module, System.Func<System.Reflection.Metadata.MethodDefinitionHandle, Microsoft.CodeAnalysisP.Emit.EditAndContinueMethodDebugInformation> debugInformationProvider) -> Microsoft.CodeAnalysisP.Emit.EmitBaseline
static Microsoft.CodeAnalysisP.Emit.EmitBaseline.CreateInitialBaseline(Microsoft.CodeAnalysisP.ModuleMetadata module, System.Func<System.Reflection.Metadata.MethodDefinitionHandle, Microsoft.CodeAnalysisP.Emit.EditAndContinueMethodDebugInformation> debugInformationProvider, System.Func<System.Reflection.Metadata.MethodDefinitionHandle, System.Reflection.Metadata.StandaloneSignatureHandle> localSignatureProvider, bool hasPortableDebugInformation) -> Microsoft.CodeAnalysisP.Emit.EmitBaseline
static Microsoft.CodeAnalysisP.Emit.EmitOptions.operator !=(Microsoft.CodeAnalysisP.Emit.EmitOptions left, Microsoft.CodeAnalysisP.Emit.EmitOptions right) -> bool
static Microsoft.CodeAnalysisP.Emit.EmitOptions.operator ==(Microsoft.CodeAnalysisP.Emit.EmitOptions left, Microsoft.CodeAnalysisP.Emit.EmitOptions right) -> bool
static Microsoft.CodeAnalysisP.FileSystemExtensions.Emit(this Microsoft.CodeAnalysisP.Compilation compilation, string outputPath, string pdbPath = null, string xmlDocPath = null, string win32ResourcesPath = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.ResourceDescription> manifestResources = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysisP.Emit.EmitResult
static Microsoft.CodeAnalysisP.ISymbolExtensions.GetConstructedReducedFrom(this Microsoft.CodeAnalysisP.IMethodSymbol method) -> Microsoft.CodeAnalysisP.IMethodSymbol
static Microsoft.CodeAnalysisP.LocalizableString.explicit operator string(Microsoft.CodeAnalysisP.LocalizableString localizableResource) -> string
static Microsoft.CodeAnalysisP.LocalizableString.implicit operator Microsoft.CodeAnalysisP.LocalizableString(string fixedResource) -> Microsoft.CodeAnalysisP.LocalizableString
static Microsoft.CodeAnalysisP.Location.Create(Microsoft.CodeAnalysisP.SyntaxTree syntaxTree, Microsoft.CodeAnalysisP.Text.TextSpan textSpan) -> Microsoft.CodeAnalysisP.Location
static Microsoft.CodeAnalysisP.Location.Create(string filePath, Microsoft.CodeAnalysisP.Text.TextSpan textSpan, Microsoft.CodeAnalysisP.Text.LinePositionSpan lineSpan) -> Microsoft.CodeAnalysisP.Location
static Microsoft.CodeAnalysisP.Location.None.get -> Microsoft.CodeAnalysisP.Location
static Microsoft.CodeAnalysisP.Location.operator !=(Microsoft.CodeAnalysisP.Location left, Microsoft.CodeAnalysisP.Location right) -> bool
static Microsoft.CodeAnalysisP.Location.operator ==(Microsoft.CodeAnalysisP.Location left, Microsoft.CodeAnalysisP.Location right) -> bool
static Microsoft.CodeAnalysisP.MetadataReference.CreateFromAssembly(System.Reflection.Assembly assembly) -> Microsoft.CodeAnalysisP.MetadataReference
static Microsoft.CodeAnalysisP.MetadataReference.CreateFromAssembly(System.Reflection.Assembly assembly, Microsoft.CodeAnalysisP.MetadataReferenceProperties properties, Microsoft.CodeAnalysisP.DocumentationProvider documentation = null) -> Microsoft.CodeAnalysisP.MetadataReference
static Microsoft.CodeAnalysisP.MetadataReference.CreateFromFile(string path, Microsoft.CodeAnalysisP.MetadataReferenceProperties properties = default(Microsoft.CodeAnalysisP.MetadataReferenceProperties), Microsoft.CodeAnalysisP.DocumentationProvider documentation = null) -> Microsoft.CodeAnalysisP.PortableExecutableReference
static Microsoft.CodeAnalysisP.MetadataReference.CreateFromImage(System.Collections.Generic.IEnumerable<byte> peImage, Microsoft.CodeAnalysisP.MetadataReferenceProperties properties = default(Microsoft.CodeAnalysisP.MetadataReferenceProperties), Microsoft.CodeAnalysisP.DocumentationProvider documentation = null, string filePath = null) -> Microsoft.CodeAnalysisP.PortableExecutableReference
static Microsoft.CodeAnalysisP.MetadataReference.CreateFromImage(System.Collections.Immutable.ImmutableArray<byte> peImage, Microsoft.CodeAnalysisP.MetadataReferenceProperties properties = default(Microsoft.CodeAnalysisP.MetadataReferenceProperties), Microsoft.CodeAnalysisP.DocumentationProvider documentation = null, string filePath = null) -> Microsoft.CodeAnalysisP.PortableExecutableReference
static Microsoft.CodeAnalysisP.MetadataReference.CreateFromStream(System.IO.Stream peStream, Microsoft.CodeAnalysisP.MetadataReferenceProperties properties = default(Microsoft.CodeAnalysisP.MetadataReferenceProperties), Microsoft.CodeAnalysisP.DocumentationProvider documentation = null, string filePath = null) -> Microsoft.CodeAnalysisP.PortableExecutableReference
static Microsoft.CodeAnalysisP.MetadataReferenceProperties.Assembly.get -> Microsoft.CodeAnalysisP.MetadataReferenceProperties
static Microsoft.CodeAnalysisP.MetadataReferenceProperties.GlobalAlias.get -> string
static Microsoft.CodeAnalysisP.MetadataReferenceProperties.Module.get -> Microsoft.CodeAnalysisP.MetadataReferenceProperties
static Microsoft.CodeAnalysisP.MetadataReferenceProperties.operator !=(Microsoft.CodeAnalysisP.MetadataReferenceProperties left, Microsoft.CodeAnalysisP.MetadataReferenceProperties right) -> bool
static Microsoft.CodeAnalysisP.MetadataReferenceProperties.operator ==(Microsoft.CodeAnalysisP.MetadataReferenceProperties left, Microsoft.CodeAnalysisP.MetadataReferenceProperties right) -> bool
static Microsoft.CodeAnalysisP.ModelExtensions.AnalyzeControlFlow(this Microsoft.CodeAnalysisP.SemanticModel semanticModel, Microsoft.CodeAnalysisP.SyntaxNode firstStatement, Microsoft.CodeAnalysisP.SyntaxNode lastStatement) -> Microsoft.CodeAnalysisP.ControlFlowAnalysis
static Microsoft.CodeAnalysisP.ModelExtensions.AnalyzeControlFlow(this Microsoft.CodeAnalysisP.SemanticModel semanticModel, Microsoft.CodeAnalysisP.SyntaxNode statement) -> Microsoft.CodeAnalysisP.ControlFlowAnalysis
static Microsoft.CodeAnalysisP.ModelExtensions.AnalyzeDataFlow(this Microsoft.CodeAnalysisP.SemanticModel semanticModel, Microsoft.CodeAnalysisP.SyntaxNode firstStatement, Microsoft.CodeAnalysisP.SyntaxNode lastStatement) -> Microsoft.CodeAnalysisP.DataFlowAnalysis
static Microsoft.CodeAnalysisP.ModelExtensions.AnalyzeDataFlow(this Microsoft.CodeAnalysisP.SemanticModel semanticModel, Microsoft.CodeAnalysisP.SyntaxNode statementOrExpression) -> Microsoft.CodeAnalysisP.DataFlowAnalysis
static Microsoft.CodeAnalysisP.ModelExtensions.GetAliasInfo(this Microsoft.CodeAnalysisP.SemanticModel semanticModel, Microsoft.CodeAnalysisP.SyntaxNode nameSyntax, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysisP.IAliasSymbol
static Microsoft.CodeAnalysisP.ModelExtensions.GetDeclaredSymbol(this Microsoft.CodeAnalysisP.SemanticModel semanticModel, Microsoft.CodeAnalysisP.SyntaxNode declaration, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysisP.ISymbol
static Microsoft.CodeAnalysisP.ModelExtensions.GetMemberGroup(this Microsoft.CodeAnalysisP.SemanticModel semanticModel, Microsoft.CodeAnalysisP.SyntaxNode node, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ISymbol>
static Microsoft.CodeAnalysisP.ModelExtensions.GetSpeculativeAliasInfo(this Microsoft.CodeAnalysisP.SemanticModel semanticModel, int position, Microsoft.CodeAnalysisP.SyntaxNode nameSyntax, Microsoft.CodeAnalysisP.SpeculativeBindingOption bindingOption) -> Microsoft.CodeAnalysisP.IAliasSymbol
static Microsoft.CodeAnalysisP.ModelExtensions.GetSpeculativeSymbolInfo(this Microsoft.CodeAnalysisP.SemanticModel semanticModel, int position, Microsoft.CodeAnalysisP.SyntaxNode expression, Microsoft.CodeAnalysisP.SpeculativeBindingOption bindingOption) -> Microsoft.CodeAnalysisP.SymbolInfo
static Microsoft.CodeAnalysisP.ModelExtensions.GetSpeculativeTypeInfo(this Microsoft.CodeAnalysisP.SemanticModel semanticModel, int position, Microsoft.CodeAnalysisP.SyntaxNode expression, Microsoft.CodeAnalysisP.SpeculativeBindingOption bindingOption) -> Microsoft.CodeAnalysisP.TypeInfo
static Microsoft.CodeAnalysisP.ModelExtensions.GetSymbolInfo(this Microsoft.CodeAnalysisP.SemanticModel semanticModel, Microsoft.CodeAnalysisP.SyntaxNode node, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysisP.SymbolInfo
static Microsoft.CodeAnalysisP.ModelExtensions.GetTypeInfo(this Microsoft.CodeAnalysisP.SemanticModel semanticModel, Microsoft.CodeAnalysisP.SyntaxNode node, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysisP.TypeInfo
static Microsoft.CodeAnalysisP.ModuleMetadata.CreateFromFile(string path) -> Microsoft.CodeAnalysisP.ModuleMetadata
static Microsoft.CodeAnalysisP.ModuleMetadata.CreateFromImage(System.Collections.Generic.IEnumerable<byte> peImage) -> Microsoft.CodeAnalysisP.ModuleMetadata
static Microsoft.CodeAnalysisP.ModuleMetadata.CreateFromImage(System.Collections.Immutable.ImmutableArray<byte> peImage) -> Microsoft.CodeAnalysisP.ModuleMetadata
static Microsoft.CodeAnalysisP.ModuleMetadata.CreateFromImage(System.IntPtr peImage, int size) -> Microsoft.CodeAnalysisP.ModuleMetadata
static Microsoft.CodeAnalysisP.ModuleMetadata.CreateFromMetadata(System.IntPtr metadata, int size) -> Microsoft.CodeAnalysisP.ModuleMetadata
static Microsoft.CodeAnalysisP.ModuleMetadata.CreateFromStream(System.IO.Stream peStream, bool leaveOpen = false) -> Microsoft.CodeAnalysisP.ModuleMetadata
static Microsoft.CodeAnalysisP.ModuleMetadata.CreateFromStream(System.IO.Stream peStream, System.Reflection.PortableExecutable.PEStreamOptions options) -> Microsoft.CodeAnalysisP.ModuleMetadata
static Microsoft.CodeAnalysisP.Operations.OperationExtensions.Descendants(this Microsoft.CodeAnalysisP.IOperation operation) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.IOperation>
static Microsoft.CodeAnalysisP.Operations.OperationExtensions.DescendantsAndSelf(this Microsoft.CodeAnalysisP.IOperation operation) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.IOperation>
static Microsoft.CodeAnalysisP.Operations.OperationExtensions.GetArgumentName(this Microsoft.CodeAnalysisP.Operations.IDynamicIndexerAccessOperation dynamicOperation, int index) -> string
static Microsoft.CodeAnalysisP.Operations.OperationExtensions.GetArgumentName(this Microsoft.CodeAnalysisP.Operations.IDynamicInvocationOperation dynamicOperation, int index) -> string
static Microsoft.CodeAnalysisP.Operations.OperationExtensions.GetArgumentName(this Microsoft.CodeAnalysisP.Operations.IDynamicObjectCreationOperation dynamicOperation, int index) -> string
static Microsoft.CodeAnalysisP.Operations.OperationExtensions.GetArgumentRefKind(this Microsoft.CodeAnalysisP.Operations.IDynamicIndexerAccessOperation dynamicOperation, int index) -> Microsoft.CodeAnalysisP.RefKind?
static Microsoft.CodeAnalysisP.Operations.OperationExtensions.GetArgumentRefKind(this Microsoft.CodeAnalysisP.Operations.IDynamicInvocationOperation dynamicOperation, int index) -> Microsoft.CodeAnalysisP.RefKind?
static Microsoft.CodeAnalysisP.Operations.OperationExtensions.GetArgumentRefKind(this Microsoft.CodeAnalysisP.Operations.IDynamicObjectCreationOperation dynamicOperation, int index) -> Microsoft.CodeAnalysisP.RefKind?
static Microsoft.CodeAnalysisP.Operations.OperationExtensions.GetDeclaredVariables(this Microsoft.CodeAnalysisP.Operations.IVariableDeclarationGroupOperation declarationGroup) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ILocalSymbol>
static Microsoft.CodeAnalysisP.Operations.OperationExtensions.GetDeclaredVariables(this Microsoft.CodeAnalysisP.Operations.IVariableDeclarationOperation declaration) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.ILocalSymbol>
static Microsoft.CodeAnalysisP.Operations.OperationExtensions.GetVariableInitializer(this Microsoft.CodeAnalysisP.Operations.IVariableDeclaratorOperation declarationOperation) -> Microsoft.CodeAnalysisP.Operations.IVariableInitializerOperation
static Microsoft.CodeAnalysisP.Optional<T>.implicit operator Microsoft.CodeAnalysisP.Optional<T>(T value) -> Microsoft.CodeAnalysisP.Optional<T>
static Microsoft.CodeAnalysisP.ParseOptions.operator !=(Microsoft.CodeAnalysisP.ParseOptions left, Microsoft.CodeAnalysisP.ParseOptions right) -> bool
static Microsoft.CodeAnalysisP.ParseOptions.operator ==(Microsoft.CodeAnalysisP.ParseOptions left, Microsoft.CodeAnalysisP.ParseOptions right) -> bool
static Microsoft.CodeAnalysisP.RuleSet.GetDiagnosticOptionsFromRulesetFile(string rulesetFileFullPath, out System.Collections.Generic.Dictionary<string, Microsoft.CodeAnalysisP.ReportDiagnostic> specificDiagnosticOptions) -> Microsoft.CodeAnalysisP.ReportDiagnostic
static Microsoft.CodeAnalysisP.RuleSet.GetEffectiveIncludesFromFile(string filePath) -> System.Collections.Immutable.ImmutableArray<string>
static Microsoft.CodeAnalysisP.RuleSet.LoadEffectiveRuleSetFromFile(string filePath) -> Microsoft.CodeAnalysisP.RuleSet
static Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>.implicit operator Microsoft.CodeAnalysisP.SeparatedSyntaxList<Microsoft.CodeAnalysisP.SyntaxNode>(Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode> nodes) -> Microsoft.CodeAnalysisP.SeparatedSyntaxList<Microsoft.CodeAnalysisP.SyntaxNode>
static Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>.implicit operator Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>(Microsoft.CodeAnalysisP.SeparatedSyntaxList<Microsoft.CodeAnalysisP.SyntaxNode> nodes) -> Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>
static Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>.operator !=(Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode> left, Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode> right) -> bool
static Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode>.operator ==(Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode> left, Microsoft.CodeAnalysisP.SeparatedSyntaxList<TNode> right) -> bool
static Microsoft.CodeAnalysisP.SourceFileResolver.Default.get -> Microsoft.CodeAnalysisP.SourceFileResolver
static Microsoft.CodeAnalysisP.SubsystemVersion.Create(int major, int minor) -> Microsoft.CodeAnalysisP.SubsystemVersion
static Microsoft.CodeAnalysisP.SubsystemVersion.None.get -> Microsoft.CodeAnalysisP.SubsystemVersion
static Microsoft.CodeAnalysisP.SubsystemVersion.TryParse(string str, out Microsoft.CodeAnalysisP.SubsystemVersion version) -> bool
static Microsoft.CodeAnalysisP.SubsystemVersion.Windows2000.get -> Microsoft.CodeAnalysisP.SubsystemVersion
static Microsoft.CodeAnalysisP.SubsystemVersion.Windows7.get -> Microsoft.CodeAnalysisP.SubsystemVersion
static Microsoft.CodeAnalysisP.SubsystemVersion.Windows8.get -> Microsoft.CodeAnalysisP.SubsystemVersion
static Microsoft.CodeAnalysisP.SubsystemVersion.WindowsVista.get -> Microsoft.CodeAnalysisP.SubsystemVersion
static Microsoft.CodeAnalysisP.SubsystemVersion.WindowsXP.get -> Microsoft.CodeAnalysisP.SubsystemVersion
static Microsoft.CodeAnalysisP.SymbolDisplayExtensions.ToDisplayString(this System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.SymbolDisplayPart> parts) -> string
static Microsoft.CodeAnalysisP.SymbolDisplayFormat.CSharpErrorMessageFormat.get -> Microsoft.CodeAnalysisP.SymbolDisplayFormat
static Microsoft.CodeAnalysisP.SymbolDisplayFormat.CSharpShortErrorMessageFormat.get -> Microsoft.CodeAnalysisP.SymbolDisplayFormat
static Microsoft.CodeAnalysisP.SymbolDisplayFormat.FullyQualifiedFormat.get -> Microsoft.CodeAnalysisP.SymbolDisplayFormat
static Microsoft.CodeAnalysisP.SymbolDisplayFormat.MinimallyQualifiedFormat.get -> Microsoft.CodeAnalysisP.SymbolDisplayFormat
static Microsoft.CodeAnalysisP.SymbolDisplayFormat.VisualBasicErrorMessageFormat.get -> Microsoft.CodeAnalysisP.SymbolDisplayFormat
static Microsoft.CodeAnalysisP.SymbolDisplayFormat.VisualBasicShortErrorMessageFormat.get -> Microsoft.CodeAnalysisP.SymbolDisplayFormat
static Microsoft.CodeAnalysisP.SyntaxAnnotation.ElasticAnnotation.get -> Microsoft.CodeAnalysisP.SyntaxAnnotation
static Microsoft.CodeAnalysisP.SyntaxAnnotation.operator !=(Microsoft.CodeAnalysisP.SyntaxAnnotation left, Microsoft.CodeAnalysisP.SyntaxAnnotation right) -> bool
static Microsoft.CodeAnalysisP.SyntaxAnnotation.operator ==(Microsoft.CodeAnalysisP.SyntaxAnnotation left, Microsoft.CodeAnalysisP.SyntaxAnnotation right) -> bool
static Microsoft.CodeAnalysisP.SyntaxList<TNode>.implicit operator Microsoft.CodeAnalysisP.SyntaxList<Microsoft.CodeAnalysisP.SyntaxNode>(Microsoft.CodeAnalysisP.SyntaxList<TNode> nodes) -> Microsoft.CodeAnalysisP.SyntaxList<Microsoft.CodeAnalysisP.SyntaxNode>
static Microsoft.CodeAnalysisP.SyntaxList<TNode>.implicit operator Microsoft.CodeAnalysisP.SyntaxList<TNode>(Microsoft.CodeAnalysisP.SyntaxList<Microsoft.CodeAnalysisP.SyntaxNode> nodes) -> Microsoft.CodeAnalysisP.SyntaxList<TNode>
static Microsoft.CodeAnalysisP.SyntaxList<TNode>.operator !=(Microsoft.CodeAnalysisP.SyntaxList<TNode> left, Microsoft.CodeAnalysisP.SyntaxList<TNode> right) -> bool
static Microsoft.CodeAnalysisP.SyntaxList<TNode>.operator ==(Microsoft.CodeAnalysisP.SyntaxList<TNode> left, Microsoft.CodeAnalysisP.SyntaxList<TNode> right) -> bool
static Microsoft.CodeAnalysisP.SyntaxNodeExtensions.GetCurrentNode<TNode>(this Microsoft.CodeAnalysisP.SyntaxNode root, TNode node) -> TNode
static Microsoft.CodeAnalysisP.SyntaxNodeExtensions.GetCurrentNodes<TNode>(this Microsoft.CodeAnalysisP.SyntaxNode root, System.Collections.Generic.IEnumerable<TNode> nodes) -> System.Collections.Generic.IEnumerable<TNode>
static Microsoft.CodeAnalysisP.SyntaxNodeExtensions.GetCurrentNodes<TNode>(this Microsoft.CodeAnalysisP.SyntaxNode root, TNode node) -> System.Collections.Generic.IEnumerable<TNode>
static Microsoft.CodeAnalysisP.SyntaxNodeExtensions.InsertNodesAfter<TRoot>(this TRoot root, Microsoft.CodeAnalysisP.SyntaxNode nodeInList, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxNode> newNodes) -> TRoot
static Microsoft.CodeAnalysisP.SyntaxNodeExtensions.InsertNodesBefore<TRoot>(this TRoot root, Microsoft.CodeAnalysisP.SyntaxNode nodeInList, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxNode> newNodes) -> TRoot
static Microsoft.CodeAnalysisP.SyntaxNodeExtensions.InsertTokensAfter<TRoot>(this TRoot root, Microsoft.CodeAnalysisP.SyntaxToken tokenInList, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxToken> newTokens) -> TRoot
static Microsoft.CodeAnalysisP.SyntaxNodeExtensions.InsertTokensBefore<TRoot>(this TRoot root, Microsoft.CodeAnalysisP.SyntaxToken tokenInList, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxToken> newTokens) -> TRoot
static Microsoft.CodeAnalysisP.SyntaxNodeExtensions.InsertTriviaAfter<TRoot>(this TRoot root, Microsoft.CodeAnalysisP.SyntaxTrivia trivia, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxTrivia> newTrivia) -> TRoot
static Microsoft.CodeAnalysisP.SyntaxNodeExtensions.InsertTriviaBefore<TRoot>(this TRoot root, Microsoft.CodeAnalysisP.SyntaxTrivia trivia, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxTrivia> newTrivia) -> TRoot
static Microsoft.CodeAnalysisP.SyntaxNodeExtensions.NormalizeWhitespace<TNode>(this TNode node, string indentation = "    ", string eol = "\r\n", bool elasticTrivia = false) -> TNode
static Microsoft.CodeAnalysisP.SyntaxNodeExtensions.NormalizeWhitespace<TNode>(this TNode node, string indentation, bool elasticTrivia) -> TNode
static Microsoft.CodeAnalysisP.SyntaxNodeExtensions.RemoveNode<TRoot>(this TRoot root, Microsoft.CodeAnalysisP.SyntaxNode node, Microsoft.CodeAnalysisP.SyntaxRemoveOptions options) -> TRoot
static Microsoft.CodeAnalysisP.SyntaxNodeExtensions.RemoveNodes<TRoot>(this TRoot root, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxNode> nodes, Microsoft.CodeAnalysisP.SyntaxRemoveOptions options) -> TRoot
static Microsoft.CodeAnalysisP.SyntaxNodeExtensions.ReplaceNode<TRoot>(this TRoot root, Microsoft.CodeAnalysisP.SyntaxNode oldNode, Microsoft.CodeAnalysisP.SyntaxNode newNode) -> TRoot
static Microsoft.CodeAnalysisP.SyntaxNodeExtensions.ReplaceNode<TRoot>(this TRoot root, Microsoft.CodeAnalysisP.SyntaxNode oldNode, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxNode> newNodes) -> TRoot
static Microsoft.CodeAnalysisP.SyntaxNodeExtensions.ReplaceNodes<TRoot, TNode>(this TRoot root, System.Collections.Generic.IEnumerable<TNode> nodes, System.Func<TNode, TNode, Microsoft.CodeAnalysisP.SyntaxNode> computeReplacementNode) -> TRoot
static Microsoft.CodeAnalysisP.SyntaxNodeExtensions.ReplaceSyntax<TRoot>(this TRoot root, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxNode> nodes, System.Func<Microsoft.CodeAnalysisP.SyntaxNode, Microsoft.CodeAnalysisP.SyntaxNode, Microsoft.CodeAnalysisP.SyntaxNode> computeReplacementNode, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxToken> tokens, System.Func<Microsoft.CodeAnalysisP.SyntaxToken, Microsoft.CodeAnalysisP.SyntaxToken, Microsoft.CodeAnalysisP.SyntaxToken> computeReplacementToken, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxTrivia> trivia, System.Func<Microsoft.CodeAnalysisP.SyntaxTrivia, Microsoft.CodeAnalysisP.SyntaxTrivia, Microsoft.CodeAnalysisP.SyntaxTrivia> computeReplacementTrivia) -> TRoot
static Microsoft.CodeAnalysisP.SyntaxNodeExtensions.ReplaceToken<TRoot>(this TRoot root, Microsoft.CodeAnalysisP.SyntaxToken oldToken, Microsoft.CodeAnalysisP.SyntaxToken newToken) -> TRoot
static Microsoft.CodeAnalysisP.SyntaxNodeExtensions.ReplaceToken<TRoot>(this TRoot root, Microsoft.CodeAnalysisP.SyntaxToken tokenInList, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxToken> newTokens) -> TRoot
static Microsoft.CodeAnalysisP.SyntaxNodeExtensions.ReplaceTokens<TRoot>(this TRoot root, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxToken> tokens, System.Func<Microsoft.CodeAnalysisP.SyntaxToken, Microsoft.CodeAnalysisP.SyntaxToken, Microsoft.CodeAnalysisP.SyntaxToken> computeReplacementToken) -> TRoot
static Microsoft.CodeAnalysisP.SyntaxNodeExtensions.ReplaceTrivia<TRoot>(this TRoot root, Microsoft.CodeAnalysisP.SyntaxTrivia oldTrivia, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxTrivia> newTrivia) -> TRoot
static Microsoft.CodeAnalysisP.SyntaxNodeExtensions.ReplaceTrivia<TRoot>(this TRoot root, Microsoft.CodeAnalysisP.SyntaxTrivia trivia, Microsoft.CodeAnalysisP.SyntaxTrivia newTrivia) -> TRoot
static Microsoft.CodeAnalysisP.SyntaxNodeExtensions.ReplaceTrivia<TRoot>(this TRoot root, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxTrivia> trivia, System.Func<Microsoft.CodeAnalysisP.SyntaxTrivia, Microsoft.CodeAnalysisP.SyntaxTrivia, Microsoft.CodeAnalysisP.SyntaxTrivia> computeReplacementTrivia) -> TRoot
static Microsoft.CodeAnalysisP.SyntaxNodeExtensions.TrackNodes<TRoot>(this TRoot root, params Microsoft.CodeAnalysisP.SyntaxNode[] nodes) -> TRoot
static Microsoft.CodeAnalysisP.SyntaxNodeExtensions.TrackNodes<TRoot>(this TRoot root, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxNode> nodes) -> TRoot
static Microsoft.CodeAnalysisP.SyntaxNodeExtensions.WithLeadingTrivia<TSyntax>(this TSyntax node, Microsoft.CodeAnalysisP.SyntaxTriviaList trivia) -> TSyntax
static Microsoft.CodeAnalysisP.SyntaxNodeExtensions.WithLeadingTrivia<TSyntax>(this TSyntax node, params Microsoft.CodeAnalysisP.SyntaxTrivia[] trivia) -> TSyntax
static Microsoft.CodeAnalysisP.SyntaxNodeExtensions.WithLeadingTrivia<TSyntax>(this TSyntax node, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxTrivia> trivia) -> TSyntax
static Microsoft.CodeAnalysisP.SyntaxNodeExtensions.WithoutLeadingTrivia<TSyntax>(this TSyntax node) -> TSyntax
static Microsoft.CodeAnalysisP.SyntaxNodeExtensions.WithoutTrailingTrivia<TSyntax>(this TSyntax node) -> TSyntax
static Microsoft.CodeAnalysisP.SyntaxNodeExtensions.WithoutTrivia(this Microsoft.CodeAnalysisP.SyntaxToken token) -> Microsoft.CodeAnalysisP.SyntaxToken
static Microsoft.CodeAnalysisP.SyntaxNodeExtensions.WithoutTrivia<TSyntax>(this TSyntax syntax) -> TSyntax
static Microsoft.CodeAnalysisP.SyntaxNodeExtensions.WithTrailingTrivia<TSyntax>(this TSyntax node, Microsoft.CodeAnalysisP.SyntaxTriviaList trivia) -> TSyntax
static Microsoft.CodeAnalysisP.SyntaxNodeExtensions.WithTrailingTrivia<TSyntax>(this TSyntax node, params Microsoft.CodeAnalysisP.SyntaxTrivia[] trivia) -> TSyntax
static Microsoft.CodeAnalysisP.SyntaxNodeExtensions.WithTrailingTrivia<TSyntax>(this TSyntax node, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.SyntaxTrivia> trivia) -> TSyntax
static Microsoft.CodeAnalysisP.SyntaxNodeExtensions.WithTriviaFrom<TSyntax>(this TSyntax syntax, Microsoft.CodeAnalysisP.SyntaxNode node) -> TSyntax
static Microsoft.CodeAnalysisP.SyntaxNodeOrToken.explicit operator Microsoft.CodeAnalysisP.SyntaxNode(Microsoft.CodeAnalysisP.SyntaxNodeOrToken nodeOrToken) -> Microsoft.CodeAnalysisP.SyntaxNode
static Microsoft.CodeAnalysisP.SyntaxNodeOrToken.explicit operator Microsoft.CodeAnalysisP.SyntaxToken(Microsoft.CodeAnalysisP.SyntaxNodeOrToken nodeOrToken) -> Microsoft.CodeAnalysisP.SyntaxToken
static Microsoft.CodeAnalysisP.SyntaxNodeOrToken.GetFirstChildIndexSpanningPosition(Microsoft.CodeAnalysisP.SyntaxNode node, int position) -> int
static Microsoft.CodeAnalysisP.SyntaxNodeOrToken.implicit operator Microsoft.CodeAnalysisP.SyntaxNodeOrToken(Microsoft.CodeAnalysisP.SyntaxNode node) -> Microsoft.CodeAnalysisP.SyntaxNodeOrToken
static Microsoft.CodeAnalysisP.SyntaxNodeOrToken.implicit operator Microsoft.CodeAnalysisP.SyntaxNodeOrToken(Microsoft.CodeAnalysisP.SyntaxToken token) -> Microsoft.CodeAnalysisP.SyntaxNodeOrToken
static Microsoft.CodeAnalysisP.SyntaxNodeOrToken.operator !=(Microsoft.CodeAnalysisP.SyntaxNodeOrToken left, Microsoft.CodeAnalysisP.SyntaxNodeOrToken right) -> bool
static Microsoft.CodeAnalysisP.SyntaxNodeOrToken.operator ==(Microsoft.CodeAnalysisP.SyntaxNodeOrToken left, Microsoft.CodeAnalysisP.SyntaxNodeOrToken right) -> bool
static Microsoft.CodeAnalysisP.SyntaxNodeOrTokenList.operator !=(Microsoft.CodeAnalysisP.SyntaxNodeOrTokenList left, Microsoft.CodeAnalysisP.SyntaxNodeOrTokenList right) -> bool
static Microsoft.CodeAnalysisP.SyntaxNodeOrTokenList.operator ==(Microsoft.CodeAnalysisP.SyntaxNodeOrTokenList left, Microsoft.CodeAnalysisP.SyntaxNodeOrTokenList right) -> bool
static Microsoft.CodeAnalysisP.SyntaxToken.operator !=(Microsoft.CodeAnalysisP.SyntaxToken left, Microsoft.CodeAnalysisP.SyntaxToken right) -> bool
static Microsoft.CodeAnalysisP.SyntaxToken.operator ==(Microsoft.CodeAnalysisP.SyntaxToken left, Microsoft.CodeAnalysisP.SyntaxToken right) -> bool
static Microsoft.CodeAnalysisP.SyntaxTokenList.Create(Microsoft.CodeAnalysisP.SyntaxToken token) -> Microsoft.CodeAnalysisP.SyntaxTokenList
static Microsoft.CodeAnalysisP.SyntaxTokenList.operator !=(Microsoft.CodeAnalysisP.SyntaxTokenList left, Microsoft.CodeAnalysisP.SyntaxTokenList right) -> bool
static Microsoft.CodeAnalysisP.SyntaxTokenList.operator ==(Microsoft.CodeAnalysisP.SyntaxTokenList left, Microsoft.CodeAnalysisP.SyntaxTokenList right) -> bool
static Microsoft.CodeAnalysisP.SyntaxTrivia.operator !=(Microsoft.CodeAnalysisP.SyntaxTrivia left, Microsoft.CodeAnalysisP.SyntaxTrivia right) -> bool
static Microsoft.CodeAnalysisP.SyntaxTrivia.operator ==(Microsoft.CodeAnalysisP.SyntaxTrivia left, Microsoft.CodeAnalysisP.SyntaxTrivia right) -> bool
static Microsoft.CodeAnalysisP.SyntaxTriviaList.Create(Microsoft.CodeAnalysisP.SyntaxTrivia trivia) -> Microsoft.CodeAnalysisP.SyntaxTriviaList
static Microsoft.CodeAnalysisP.SyntaxTriviaList.Empty.get -> Microsoft.CodeAnalysisP.SyntaxTriviaList
static Microsoft.CodeAnalysisP.SyntaxTriviaList.operator !=(Microsoft.CodeAnalysisP.SyntaxTriviaList left, Microsoft.CodeAnalysisP.SyntaxTriviaList right) -> bool
static Microsoft.CodeAnalysisP.SyntaxTriviaList.operator ==(Microsoft.CodeAnalysisP.SyntaxTriviaList left, Microsoft.CodeAnalysisP.SyntaxTriviaList right) -> bool
static Microsoft.CodeAnalysisP.Text.LinePosition.operator !=(Microsoft.CodeAnalysisP.Text.LinePosition left, Microsoft.CodeAnalysisP.Text.LinePosition right) -> bool
static Microsoft.CodeAnalysisP.Text.LinePosition.operator <(Microsoft.CodeAnalysisP.Text.LinePosition left, Microsoft.CodeAnalysisP.Text.LinePosition right) -> bool
static Microsoft.CodeAnalysisP.Text.LinePosition.operator <=(Microsoft.CodeAnalysisP.Text.LinePosition left, Microsoft.CodeAnalysisP.Text.LinePosition right) -> bool
static Microsoft.CodeAnalysisP.Text.LinePosition.operator ==(Microsoft.CodeAnalysisP.Text.LinePosition left, Microsoft.CodeAnalysisP.Text.LinePosition right) -> bool
static Microsoft.CodeAnalysisP.Text.LinePosition.operator >(Microsoft.CodeAnalysisP.Text.LinePosition left, Microsoft.CodeAnalysisP.Text.LinePosition right) -> bool
static Microsoft.CodeAnalysisP.Text.LinePosition.operator >=(Microsoft.CodeAnalysisP.Text.LinePosition left, Microsoft.CodeAnalysisP.Text.LinePosition right) -> bool
static Microsoft.CodeAnalysisP.Text.LinePosition.Zero.get -> Microsoft.CodeAnalysisP.Text.LinePosition
static Microsoft.CodeAnalysisP.Text.LinePositionSpan.operator !=(Microsoft.CodeAnalysisP.Text.LinePositionSpan left, Microsoft.CodeAnalysisP.Text.LinePositionSpan right) -> bool
static Microsoft.CodeAnalysisP.Text.LinePositionSpan.operator ==(Microsoft.CodeAnalysisP.Text.LinePositionSpan left, Microsoft.CodeAnalysisP.Text.LinePositionSpan right) -> bool
static Microsoft.CodeAnalysisP.Text.SourceText.From(byte[] buffer, int length, System.Text.Encoding encoding = null, Microsoft.CodeAnalysisP.Text.SourceHashAlgorithm checksumAlgorithm = Microsoft.CodeAnalysisP.Text.SourceHashAlgorithm.Sha1, bool throwIfBinaryDetected = false, bool canBeEmbedded = false) -> Microsoft.CodeAnalysisP.Text.SourceText
static Microsoft.CodeAnalysisP.Text.SourceText.From(byte[] buffer, int length, System.Text.Encoding encoding, Microsoft.CodeAnalysisP.Text.SourceHashAlgorithm checksumAlgorithm, bool throwIfBinaryDetected) -> Microsoft.CodeAnalysisP.Text.SourceText
static Microsoft.CodeAnalysisP.Text.SourceText.From(string text, System.Text.Encoding encoding = null, Microsoft.CodeAnalysisP.Text.SourceHashAlgorithm checksumAlgorithm = Microsoft.CodeAnalysisP.Text.SourceHashAlgorithm.Sha1) -> Microsoft.CodeAnalysisP.Text.SourceText
static Microsoft.CodeAnalysisP.Text.SourceText.From(System.IO.Stream stream, System.Text.Encoding encoding = null, Microsoft.CodeAnalysisP.Text.SourceHashAlgorithm checksumAlgorithm = Microsoft.CodeAnalysisP.Text.SourceHashAlgorithm.Sha1, bool throwIfBinaryDetected = false, bool canBeEmbedded = false) -> Microsoft.CodeAnalysisP.Text.SourceText
static Microsoft.CodeAnalysisP.Text.SourceText.From(System.IO.Stream stream, System.Text.Encoding encoding, Microsoft.CodeAnalysisP.Text.SourceHashAlgorithm checksumAlgorithm, bool throwIfBinaryDetected) -> Microsoft.CodeAnalysisP.Text.SourceText
static Microsoft.CodeAnalysisP.Text.SourceText.From(System.IO.TextReader reader, int length, System.Text.Encoding encoding = null, Microsoft.CodeAnalysisP.Text.SourceHashAlgorithm checksumAlgorithm = Microsoft.CodeAnalysisP.Text.SourceHashAlgorithm.Sha1) -> Microsoft.CodeAnalysisP.Text.SourceText
static Microsoft.CodeAnalysisP.Text.TextChange.implicit operator Microsoft.CodeAnalysisP.Text.TextChangeRange(Microsoft.CodeAnalysisP.Text.TextChange change) -> Microsoft.CodeAnalysisP.Text.TextChangeRange
static Microsoft.CodeAnalysisP.Text.TextChange.NoChanges.get -> System.Collections.Generic.IReadOnlyList<Microsoft.CodeAnalysisP.Text.TextChange>
static Microsoft.CodeAnalysisP.Text.TextChange.operator !=(Microsoft.CodeAnalysisP.Text.TextChange left, Microsoft.CodeAnalysisP.Text.TextChange right) -> bool
static Microsoft.CodeAnalysisP.Text.TextChange.operator ==(Microsoft.CodeAnalysisP.Text.TextChange left, Microsoft.CodeAnalysisP.Text.TextChange right) -> bool
static Microsoft.CodeAnalysisP.Text.TextChangeRange.Collapse(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.Text.TextChangeRange> changes) -> Microsoft.CodeAnalysisP.Text.TextChangeRange
static Microsoft.CodeAnalysisP.Text.TextChangeRange.NoChanges.get -> System.Collections.Generic.IReadOnlyList<Microsoft.CodeAnalysisP.Text.TextChangeRange>
static Microsoft.CodeAnalysisP.Text.TextChangeRange.operator !=(Microsoft.CodeAnalysisP.Text.TextChangeRange left, Microsoft.CodeAnalysisP.Text.TextChangeRange right) -> bool
static Microsoft.CodeAnalysisP.Text.TextChangeRange.operator ==(Microsoft.CodeAnalysisP.Text.TextChangeRange left, Microsoft.CodeAnalysisP.Text.TextChangeRange right) -> bool
static Microsoft.CodeAnalysisP.Text.TextLine.FromSpan(Microsoft.CodeAnalysisP.Text.SourceText text, Microsoft.CodeAnalysisP.Text.TextSpan span) -> Microsoft.CodeAnalysisP.Text.TextLine
static Microsoft.CodeAnalysisP.Text.TextLine.operator !=(Microsoft.CodeAnalysisP.Text.TextLine left, Microsoft.CodeAnalysisP.Text.TextLine right) -> bool
static Microsoft.CodeAnalysisP.Text.TextLine.operator ==(Microsoft.CodeAnalysisP.Text.TextLine left, Microsoft.CodeAnalysisP.Text.TextLine right) -> bool
static Microsoft.CodeAnalysisP.Text.TextSpan.FromBounds(int start, int end) -> Microsoft.CodeAnalysisP.Text.TextSpan
static Microsoft.CodeAnalysisP.Text.TextSpan.operator !=(Microsoft.CodeAnalysisP.Text.TextSpan left, Microsoft.CodeAnalysisP.Text.TextSpan right) -> bool
static Microsoft.CodeAnalysisP.Text.TextSpan.operator ==(Microsoft.CodeAnalysisP.Text.TextSpan left, Microsoft.CodeAnalysisP.Text.TextSpan right) -> bool
static Microsoft.CodeAnalysisP.XmlFileResolver.Default.get -> Microsoft.CodeAnalysisP.XmlFileResolver
virtual Microsoft.CodeAnalysisP.Diagnostic.DefaultSeverity.get -> Microsoft.CodeAnalysisP.DiagnosticSeverity
virtual Microsoft.CodeAnalysisP.Diagnostic.Properties.get -> System.Collections.Immutable.ImmutableDictionary<string, string>
virtual Microsoft.CodeAnalysisP.DiagnosticFormatter.Format(Microsoft.CodeAnalysisP.Diagnostic diagnostic, System.IFormatProvider formatter = null) -> string
virtual Microsoft.CodeAnalysisP.Diagnostics.AnalysisContext.ConfigureGeneratedCodeAnalysis(Microsoft.CodeAnalysisP.Diagnostics.GeneratedCodeAnalysisFlags analysisMode) -> void
virtual Microsoft.CodeAnalysisP.Diagnostics.AnalysisContext.EnableConcurrentExecution() -> void
virtual Microsoft.CodeAnalysisP.Diagnostics.AnalysisContext.RegisterOperationAction(System.Action<Microsoft.CodeAnalysisP.Diagnostics.OperationAnalysisContext> action, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.OperationKind> operationKinds) -> void
virtual Microsoft.CodeAnalysisP.Diagnostics.AnalysisContext.RegisterOperationBlockAction(System.Action<Microsoft.CodeAnalysisP.Diagnostics.OperationBlockAnalysisContext> action) -> void
virtual Microsoft.CodeAnalysisP.Diagnostics.AnalysisContext.RegisterOperationBlockStartAction(System.Action<Microsoft.CodeAnalysisP.Diagnostics.OperationBlockStartAnalysisContext> action) -> void
virtual Microsoft.CodeAnalysisP.Diagnostics.AnalyzerReference.Display.get -> string
virtual Microsoft.CodeAnalysisP.Diagnostics.CompilationStartAnalysisContext.RegisterOperationAction(System.Action<Microsoft.CodeAnalysisP.Diagnostics.OperationAnalysisContext> action, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysisP.OperationKind> operationKinds) -> void
virtual Microsoft.CodeAnalysisP.Diagnostics.CompilationStartAnalysisContext.RegisterOperationBlockAction(System.Action<Microsoft.CodeAnalysisP.Diagnostics.OperationBlockAnalysisContext> action) -> void
virtual Microsoft.CodeAnalysisP.Diagnostics.CompilationStartAnalysisContext.RegisterOperationBlockStartAction(System.Action<Microsoft.CodeAnalysisP.Diagnostics.OperationBlockStartAnalysisContext> action) -> void
virtual Microsoft.CodeAnalysisP.Location.GetLineSpan() -> Microsoft.CodeAnalysisP.FileLinePositionSpan
virtual Microsoft.CodeAnalysisP.Location.GetMappedLineSpan() -> Microsoft.CodeAnalysisP.FileLinePositionSpan
virtual Microsoft.CodeAnalysisP.Location.MetadataModule.get -> Microsoft.CodeAnalysisP.IModuleSymbol
virtual Microsoft.CodeAnalysisP.Location.SourceSpan.get -> Microsoft.CodeAnalysisP.Text.TextSpan
virtual Microsoft.CodeAnalysisP.Location.SourceTree.get -> Microsoft.CodeAnalysisP.SyntaxTree
virtual Microsoft.CodeAnalysisP.MetadataReference.Display.get -> string
virtual Microsoft.CodeAnalysisP.MetadataReferenceResolver.ResolveMissingAssemblies.get -> bool
virtual Microsoft.CodeAnalysisP.MetadataReferenceResolver.ResolveMissingAssembly(Microsoft.CodeAnalysisP.MetadataReference definition, Microsoft.CodeAnalysisP.AssemblyIdentity referenceIdentity) -> Microsoft.CodeAnalysisP.PortableExecutableReference
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.DefaultVisit(Microsoft.CodeAnalysisP.IOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.Visit(Microsoft.CodeAnalysisP.IOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitAddressOf(Microsoft.CodeAnalysisP.Operations.IAddressOfOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitAnonymousFunction(Microsoft.CodeAnalysisP.Operations.IAnonymousFunctionOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitAnonymousObjectCreation(Microsoft.CodeAnalysisP.Operations.IAnonymousObjectCreationOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitArgument(Microsoft.CodeAnalysisP.Operations.IArgumentOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitArrayCreation(Microsoft.CodeAnalysisP.Operations.IArrayCreationOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitArrayElementReference(Microsoft.CodeAnalysisP.Operations.IArrayElementReferenceOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitArrayInitializer(Microsoft.CodeAnalysisP.Operations.IArrayInitializerOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitAwait(Microsoft.CodeAnalysisP.Operations.IAwaitOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitBinaryOperator(Microsoft.CodeAnalysisP.Operations.IBinaryOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitBlock(Microsoft.CodeAnalysisP.Operations.IBlockOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitBranch(Microsoft.CodeAnalysisP.Operations.IBranchOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitCatchClause(Microsoft.CodeAnalysisP.Operations.ICatchClauseOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitCoalesce(Microsoft.CodeAnalysisP.Operations.ICoalesceOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitCollectionElementInitializer(Microsoft.CodeAnalysisP.Operations.ICollectionElementInitializerOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitCompoundAssignment(Microsoft.CodeAnalysisP.Operations.ICompoundAssignmentOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitConditional(Microsoft.CodeAnalysisP.Operations.IConditionalOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitConditionalAccess(Microsoft.CodeAnalysisP.Operations.IConditionalAccessOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitConditionalAccessInstance(Microsoft.CodeAnalysisP.Operations.IConditionalAccessInstanceOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitConstantPattern(Microsoft.CodeAnalysisP.Operations.IConstantPatternOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitConstructorBodyOperation(Microsoft.CodeAnalysisP.Operations.IConstructorBodyOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitConversion(Microsoft.CodeAnalysisP.Operations.IConversionOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitDeclarationExpression(Microsoft.CodeAnalysisP.Operations.IDeclarationExpressionOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitDeclarationPattern(Microsoft.CodeAnalysisP.Operations.IDeclarationPatternOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitDeconstructionAssignment(Microsoft.CodeAnalysisP.Operations.IDeconstructionAssignmentOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitDefaultCaseClause(Microsoft.CodeAnalysisP.Operations.IDefaultCaseClauseOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitDefaultValue(Microsoft.CodeAnalysisP.Operations.IDefaultValueOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitDelegateCreation(Microsoft.CodeAnalysisP.Operations.IDelegateCreationOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitDiscardOperation(Microsoft.CodeAnalysisP.Operations.IDiscardOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitDynamicIndexerAccess(Microsoft.CodeAnalysisP.Operations.IDynamicIndexerAccessOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitDynamicInvocation(Microsoft.CodeAnalysisP.Operations.IDynamicInvocationOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitDynamicMemberReference(Microsoft.CodeAnalysisP.Operations.IDynamicMemberReferenceOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitDynamicObjectCreation(Microsoft.CodeAnalysisP.Operations.IDynamicObjectCreationOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitEmpty(Microsoft.CodeAnalysisP.Operations.IEmptyOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitEnd(Microsoft.CodeAnalysisP.Operations.IEndOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitEventAssignment(Microsoft.CodeAnalysisP.Operations.IEventAssignmentOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitEventReference(Microsoft.CodeAnalysisP.Operations.IEventReferenceOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitExpressionStatement(Microsoft.CodeAnalysisP.Operations.IExpressionStatementOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitFieldInitializer(Microsoft.CodeAnalysisP.Operations.IFieldInitializerOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitFieldReference(Microsoft.CodeAnalysisP.Operations.IFieldReferenceOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitForEachLoop(Microsoft.CodeAnalysisP.Operations.IForEachLoopOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitForLoop(Microsoft.CodeAnalysisP.Operations.IForLoopOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitForToLoop(Microsoft.CodeAnalysisP.Operations.IForToLoopOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitIncrementOrDecrement(Microsoft.CodeAnalysisP.Operations.IIncrementOrDecrementOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitInstanceReference(Microsoft.CodeAnalysisP.Operations.IInstanceReferenceOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitInterpolatedString(Microsoft.CodeAnalysisP.Operations.IInterpolatedStringOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitInterpolatedStringText(Microsoft.CodeAnalysisP.Operations.IInterpolatedStringTextOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitInterpolation(Microsoft.CodeAnalysisP.Operations.IInterpolationOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitInvalid(Microsoft.CodeAnalysisP.Operations.IInvalidOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitInvocation(Microsoft.CodeAnalysisP.Operations.IInvocationOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitIsPattern(Microsoft.CodeAnalysisP.Operations.IIsPatternOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitIsType(Microsoft.CodeAnalysisP.Operations.IIsTypeOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitLabeled(Microsoft.CodeAnalysisP.Operations.ILabeledOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitLiteral(Microsoft.CodeAnalysisP.Operations.ILiteralOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitLocalFunction(Microsoft.CodeAnalysisP.Operations.ILocalFunctionOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitLocalReference(Microsoft.CodeAnalysisP.Operations.ILocalReferenceOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitLock(Microsoft.CodeAnalysisP.Operations.ILockOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitMemberInitializer(Microsoft.CodeAnalysisP.Operations.IMemberInitializerOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitMethodBodyOperation(Microsoft.CodeAnalysisP.Operations.IMethodBodyOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitMethodReference(Microsoft.CodeAnalysisP.Operations.IMethodReferenceOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitNameOf(Microsoft.CodeAnalysisP.Operations.INameOfOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitObjectCreation(Microsoft.CodeAnalysisP.Operations.IObjectCreationOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitObjectOrCollectionInitializer(Microsoft.CodeAnalysisP.Operations.IObjectOrCollectionInitializerOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitOmittedArgument(Microsoft.CodeAnalysisP.Operations.IOmittedArgumentOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitParameterInitializer(Microsoft.CodeAnalysisP.Operations.IParameterInitializerOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitParameterReference(Microsoft.CodeAnalysisP.Operations.IParameterReferenceOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitParenthesized(Microsoft.CodeAnalysisP.Operations.IParenthesizedOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitPatternCaseClause(Microsoft.CodeAnalysisP.Operations.IPatternCaseClauseOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitPropertyInitializer(Microsoft.CodeAnalysisP.Operations.IPropertyInitializerOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitPropertyReference(Microsoft.CodeAnalysisP.Operations.IPropertyReferenceOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitRaiseEvent(Microsoft.CodeAnalysisP.Operations.IRaiseEventOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitRangeCaseClause(Microsoft.CodeAnalysisP.Operations.IRangeCaseClauseOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitRelationalCaseClause(Microsoft.CodeAnalysisP.Operations.IRelationalCaseClauseOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitReturn(Microsoft.CodeAnalysisP.Operations.IReturnOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitSimpleAssignment(Microsoft.CodeAnalysisP.Operations.ISimpleAssignmentOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitSingleValueCaseClause(Microsoft.CodeAnalysisP.Operations.ISingleValueCaseClauseOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitSizeOf(Microsoft.CodeAnalysisP.Operations.ISizeOfOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitStop(Microsoft.CodeAnalysisP.Operations.IStopOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitSwitch(Microsoft.CodeAnalysisP.Operations.ISwitchOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitSwitchCase(Microsoft.CodeAnalysisP.Operations.ISwitchCaseOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitThrow(Microsoft.CodeAnalysisP.Operations.IThrowOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitTranslatedQuery(Microsoft.CodeAnalysisP.Operations.ITranslatedQueryOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitTry(Microsoft.CodeAnalysisP.Operations.ITryOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitTuple(Microsoft.CodeAnalysisP.Operations.ITupleOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitTupleBinaryOperator(Microsoft.CodeAnalysisP.Operations.ITupleBinaryOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitTypeOf(Microsoft.CodeAnalysisP.Operations.ITypeOfOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitTypeParameterObjectCreation(Microsoft.CodeAnalysisP.Operations.ITypeParameterObjectCreationOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitUnaryOperator(Microsoft.CodeAnalysisP.Operations.IUnaryOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitUsing(Microsoft.CodeAnalysisP.Operations.IUsingOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitVariableDeclaration(Microsoft.CodeAnalysisP.Operations.IVariableDeclarationOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitVariableDeclarationGroup(Microsoft.CodeAnalysisP.Operations.IVariableDeclarationGroupOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitVariableDeclarator(Microsoft.CodeAnalysisP.Operations.IVariableDeclaratorOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitVariableInitializer(Microsoft.CodeAnalysisP.Operations.IVariableInitializerOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor.VisitWhileLoop(Microsoft.CodeAnalysisP.Operations.IWhileLoopOperation operation) -> void
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.DefaultVisit(Microsoft.CodeAnalysisP.IOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.Visit(Microsoft.CodeAnalysisP.IOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitAddressOf(Microsoft.CodeAnalysisP.Operations.IAddressOfOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitAnonymousFunction(Microsoft.CodeAnalysisP.Operations.IAnonymousFunctionOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitAnonymousObjectCreation(Microsoft.CodeAnalysisP.Operations.IAnonymousObjectCreationOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitArgument(Microsoft.CodeAnalysisP.Operations.IArgumentOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitArrayCreation(Microsoft.CodeAnalysisP.Operations.IArrayCreationOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitArrayElementReference(Microsoft.CodeAnalysisP.Operations.IArrayElementReferenceOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitArrayInitializer(Microsoft.CodeAnalysisP.Operations.IArrayInitializerOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitAwait(Microsoft.CodeAnalysisP.Operations.IAwaitOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitBinaryOperator(Microsoft.CodeAnalysisP.Operations.IBinaryOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitBlock(Microsoft.CodeAnalysisP.Operations.IBlockOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitBranch(Microsoft.CodeAnalysisP.Operations.IBranchOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitCatchClause(Microsoft.CodeAnalysisP.Operations.ICatchClauseOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitCoalesce(Microsoft.CodeAnalysisP.Operations.ICoalesceOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitCollectionElementInitializer(Microsoft.CodeAnalysisP.Operations.ICollectionElementInitializerOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitCompoundAssignment(Microsoft.CodeAnalysisP.Operations.ICompoundAssignmentOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitConditional(Microsoft.CodeAnalysisP.Operations.IConditionalOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitConditionalAccess(Microsoft.CodeAnalysisP.Operations.IConditionalAccessOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitConditionalAccessInstance(Microsoft.CodeAnalysisP.Operations.IConditionalAccessInstanceOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitConstantPattern(Microsoft.CodeAnalysisP.Operations.IConstantPatternOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitConstructorBodyOperation(Microsoft.CodeAnalysisP.Operations.IConstructorBodyOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitConversion(Microsoft.CodeAnalysisP.Operations.IConversionOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitDeclarationExpression(Microsoft.CodeAnalysisP.Operations.IDeclarationExpressionOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitDeclarationPattern(Microsoft.CodeAnalysisP.Operations.IDeclarationPatternOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitDeconstructionAssignment(Microsoft.CodeAnalysisP.Operations.IDeconstructionAssignmentOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitDefaultCaseClause(Microsoft.CodeAnalysisP.Operations.IDefaultCaseClauseOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitDefaultValue(Microsoft.CodeAnalysisP.Operations.IDefaultValueOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitDelegateCreation(Microsoft.CodeAnalysisP.Operations.IDelegateCreationOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitDiscardOperation(Microsoft.CodeAnalysisP.Operations.IDiscardOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitDynamicIndexerAccess(Microsoft.CodeAnalysisP.Operations.IDynamicIndexerAccessOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitDynamicInvocation(Microsoft.CodeAnalysisP.Operations.IDynamicInvocationOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitDynamicMemberReference(Microsoft.CodeAnalysisP.Operations.IDynamicMemberReferenceOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitDynamicObjectCreation(Microsoft.CodeAnalysisP.Operations.IDynamicObjectCreationOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitEmpty(Microsoft.CodeAnalysisP.Operations.IEmptyOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitEnd(Microsoft.CodeAnalysisP.Operations.IEndOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitEventAssignment(Microsoft.CodeAnalysisP.Operations.IEventAssignmentOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitEventReference(Microsoft.CodeAnalysisP.Operations.IEventReferenceOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitExpressionStatement(Microsoft.CodeAnalysisP.Operations.IExpressionStatementOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitFieldInitializer(Microsoft.CodeAnalysisP.Operations.IFieldInitializerOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitFieldReference(Microsoft.CodeAnalysisP.Operations.IFieldReferenceOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitForEachLoop(Microsoft.CodeAnalysisP.Operations.IForEachLoopOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitForLoop(Microsoft.CodeAnalysisP.Operations.IForLoopOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitForToLoop(Microsoft.CodeAnalysisP.Operations.IForToLoopOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitIncrementOrDecrement(Microsoft.CodeAnalysisP.Operations.IIncrementOrDecrementOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitInstanceReference(Microsoft.CodeAnalysisP.Operations.IInstanceReferenceOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitInterpolatedString(Microsoft.CodeAnalysisP.Operations.IInterpolatedStringOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitInterpolatedStringText(Microsoft.CodeAnalysisP.Operations.IInterpolatedStringTextOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitInterpolation(Microsoft.CodeAnalysisP.Operations.IInterpolationOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitInvalid(Microsoft.CodeAnalysisP.Operations.IInvalidOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitInvocation(Microsoft.CodeAnalysisP.Operations.IInvocationOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitIsPattern(Microsoft.CodeAnalysisP.Operations.IIsPatternOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitIsType(Microsoft.CodeAnalysisP.Operations.IIsTypeOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitLabeled(Microsoft.CodeAnalysisP.Operations.ILabeledOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitLiteral(Microsoft.CodeAnalysisP.Operations.ILiteralOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitLocalFunction(Microsoft.CodeAnalysisP.Operations.ILocalFunctionOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitLocalReference(Microsoft.CodeAnalysisP.Operations.ILocalReferenceOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitLock(Microsoft.CodeAnalysisP.Operations.ILockOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitMemberInitializer(Microsoft.CodeAnalysisP.Operations.IMemberInitializerOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitMethodBodyOperation(Microsoft.CodeAnalysisP.Operations.IMethodBodyOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitMethodReference(Microsoft.CodeAnalysisP.Operations.IMethodReferenceOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitNameOf(Microsoft.CodeAnalysisP.Operations.INameOfOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitObjectCreation(Microsoft.CodeAnalysisP.Operations.IObjectCreationOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitObjectOrCollectionInitializer(Microsoft.CodeAnalysisP.Operations.IObjectOrCollectionInitializerOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitOmittedArgument(Microsoft.CodeAnalysisP.Operations.IOmittedArgumentOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitParameterInitializer(Microsoft.CodeAnalysisP.Operations.IParameterInitializerOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitParameterReference(Microsoft.CodeAnalysisP.Operations.IParameterReferenceOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitParenthesized(Microsoft.CodeAnalysisP.Operations.IParenthesizedOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitPatternCaseClause(Microsoft.CodeAnalysisP.Operations.IPatternCaseClauseOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitPropertyInitializer(Microsoft.CodeAnalysisP.Operations.IPropertyInitializerOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitPropertyReference(Microsoft.CodeAnalysisP.Operations.IPropertyReferenceOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitRaiseEvent(Microsoft.CodeAnalysisP.Operations.IRaiseEventOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitRangeCaseClause(Microsoft.CodeAnalysisP.Operations.IRangeCaseClauseOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitRelationalCaseClause(Microsoft.CodeAnalysisP.Operations.IRelationalCaseClauseOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitReturn(Microsoft.CodeAnalysisP.Operations.IReturnOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitSimpleAssignment(Microsoft.CodeAnalysisP.Operations.ISimpleAssignmentOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitSingleValueCaseClause(Microsoft.CodeAnalysisP.Operations.ISingleValueCaseClauseOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitSizeOf(Microsoft.CodeAnalysisP.Operations.ISizeOfOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitStop(Microsoft.CodeAnalysisP.Operations.IStopOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitSwitch(Microsoft.CodeAnalysisP.Operations.ISwitchOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitSwitchCase(Microsoft.CodeAnalysisP.Operations.ISwitchCaseOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitThrow(Microsoft.CodeAnalysisP.Operations.IThrowOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitTranslatedQuery(Microsoft.CodeAnalysisP.Operations.ITranslatedQueryOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitTry(Microsoft.CodeAnalysisP.Operations.ITryOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitTuple(Microsoft.CodeAnalysisP.Operations.ITupleOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitTupleBinaryOperator(Microsoft.CodeAnalysisP.Operations.ITupleBinaryOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitTypeOf(Microsoft.CodeAnalysisP.Operations.ITypeOfOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitTypeParameterObjectCreation(Microsoft.CodeAnalysisP.Operations.ITypeParameterObjectCreationOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitUnaryOperator(Microsoft.CodeAnalysisP.Operations.IUnaryOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitUsing(Microsoft.CodeAnalysisP.Operations.IUsingOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitVariableDeclaration(Microsoft.CodeAnalysisP.Operations.IVariableDeclarationOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitVariableDeclarationGroup(Microsoft.CodeAnalysisP.Operations.IVariableDeclarationGroupOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitVariableDeclarator(Microsoft.CodeAnalysisP.Operations.IVariableDeclaratorOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitVariableInitializer(Microsoft.CodeAnalysisP.Operations.IVariableInitializerOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.Operations.OperationVisitor<TArgument, TResult>.VisitWhileLoop(Microsoft.CodeAnalysisP.Operations.IWhileLoopOperation operation, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysisP.SemanticModel.GetTopmostNodeForDiagnosticAnalysis(Microsoft.CodeAnalysisP.ISymbol symbol, Microsoft.CodeAnalysisP.SyntaxNode declaringSyntax) -> Microsoft.CodeAnalysisP.SyntaxNode
virtual Microsoft.CodeAnalysisP.SemanticModel.IgnoresAccessibility.get -> bool
virtual Microsoft.CodeAnalysisP.SourceFileResolver.FileExists(string resolvedPath) -> bool
virtual Microsoft.CodeAnalysisP.SourceReferenceResolver.ReadText(string resolvedPath) -> Microsoft.CodeAnalysisP.Text.SourceText
virtual Microsoft.CodeAnalysisP.SymbolVisitor.DefaultVisit(Microsoft.CodeAnalysisP.ISymbol symbol) -> void
virtual Microsoft.CodeAnalysisP.SymbolVisitor.Visit(Microsoft.CodeAnalysisP.ISymbol symbol) -> void
virtual Microsoft.CodeAnalysisP.SymbolVisitor.VisitAlias(Microsoft.CodeAnalysisP.IAliasSymbol symbol) -> void
virtual Microsoft.CodeAnalysisP.SymbolVisitor.VisitArrayType(Microsoft.CodeAnalysisP.IArrayTypeSymbol symbol) -> void
virtual Microsoft.CodeAnalysisP.SymbolVisitor.VisitAssembly(Microsoft.CodeAnalysisP.IAssemblySymbol symbol) -> void
virtual Microsoft.CodeAnalysisP.SymbolVisitor.VisitDiscard(Microsoft.CodeAnalysisP.IDiscardSymbol symbol) -> void
virtual Microsoft.CodeAnalysisP.SymbolVisitor.VisitDynamicType(Microsoft.CodeAnalysisP.IDynamicTypeSymbol symbol) -> void
virtual Microsoft.CodeAnalysisP.SymbolVisitor.VisitEvent(Microsoft.CodeAnalysisP.IEventSymbol symbol) -> void
virtual Microsoft.CodeAnalysisP.SymbolVisitor.VisitField(Microsoft.CodeAnalysisP.IFieldSymbol symbol) -> void
virtual Microsoft.CodeAnalysisP.SymbolVisitor.VisitLabel(Microsoft.CodeAnalysisP.ILabelSymbol symbol) -> void
virtual Microsoft.CodeAnalysisP.SymbolVisitor.VisitLocal(Microsoft.CodeAnalysisP.ILocalSymbol symbol) -> void
virtual Microsoft.CodeAnalysisP.SymbolVisitor.VisitMethod(Microsoft.CodeAnalysisP.IMethodSymbol symbol) -> void
virtual Microsoft.CodeAnalysisP.SymbolVisitor.VisitModule(Microsoft.CodeAnalysisP.IModuleSymbol symbol) -> void
virtual Microsoft.CodeAnalysisP.SymbolVisitor.VisitNamedType(Microsoft.CodeAnalysisP.INamedTypeSymbol symbol) -> void
virtual Microsoft.CodeAnalysisP.SymbolVisitor.VisitNamespace(Microsoft.CodeAnalysisP.INamespaceSymbol symbol) -> void
virtual Microsoft.CodeAnalysisP.SymbolVisitor.VisitParameter(Microsoft.CodeAnalysisP.IParameterSymbol symbol) -> void
virtual Microsoft.CodeAnalysisP.SymbolVisitor.VisitPointerType(Microsoft.CodeAnalysisP.IPointerTypeSymbol symbol) -> void
virtual Microsoft.CodeAnalysisP.SymbolVisitor.VisitProperty(Microsoft.CodeAnalysisP.IPropertySymbol symbol) -> void
virtual Microsoft.CodeAnalysisP.SymbolVisitor.VisitRangeVariable(Microsoft.CodeAnalysisP.IRangeVariableSymbol symbol) -> void
virtual Microsoft.CodeAnalysisP.SymbolVisitor.VisitTypeParameter(Microsoft.CodeAnalysisP.ITypeParameterSymbol symbol) -> void
virtual Microsoft.CodeAnalysisP.SymbolVisitor<TResult>.DefaultVisit(Microsoft.CodeAnalysisP.ISymbol symbol) -> TResult
virtual Microsoft.CodeAnalysisP.SymbolVisitor<TResult>.Visit(Microsoft.CodeAnalysisP.ISymbol symbol) -> TResult
virtual Microsoft.CodeAnalysisP.SymbolVisitor<TResult>.VisitAlias(Microsoft.CodeAnalysisP.IAliasSymbol symbol) -> TResult
virtual Microsoft.CodeAnalysisP.SymbolVisitor<TResult>.VisitArrayType(Microsoft.CodeAnalysisP.IArrayTypeSymbol symbol) -> TResult
virtual Microsoft.CodeAnalysisP.SymbolVisitor<TResult>.VisitAssembly(Microsoft.CodeAnalysisP.IAssemblySymbol symbol) -> TResult
virtual Microsoft.CodeAnalysisP.SymbolVisitor<TResult>.VisitDiscard(Microsoft.CodeAnalysisP.IDiscardSymbol symbol) -> TResult
virtual Microsoft.CodeAnalysisP.SymbolVisitor<TResult>.VisitDynamicType(Microsoft.CodeAnalysisP.IDynamicTypeSymbol symbol) -> TResult
virtual Microsoft.CodeAnalysisP.SymbolVisitor<TResult>.VisitEvent(Microsoft.CodeAnalysisP.IEventSymbol symbol) -> TResult
virtual Microsoft.CodeAnalysisP.SymbolVisitor<TResult>.VisitField(Microsoft.CodeAnalysisP.IFieldSymbol symbol) -> TResult
virtual Microsoft.CodeAnalysisP.SymbolVisitor<TResult>.VisitLabel(Microsoft.CodeAnalysisP.ILabelSymbol symbol) -> TResult
virtual Microsoft.CodeAnalysisP.SymbolVisitor<TResult>.VisitLocal(Microsoft.CodeAnalysisP.ILocalSymbol symbol) -> TResult
virtual Microsoft.CodeAnalysisP.SymbolVisitor<TResult>.VisitMethod(Microsoft.CodeAnalysisP.IMethodSymbol symbol) -> TResult
virtual Microsoft.CodeAnalysisP.SymbolVisitor<TResult>.VisitModule(Microsoft.CodeAnalysisP.IModuleSymbol symbol) -> TResult
virtual Microsoft.CodeAnalysisP.SymbolVisitor<TResult>.VisitNamedType(Microsoft.CodeAnalysisP.INamedTypeSymbol symbol) -> TResult
virtual Microsoft.CodeAnalysisP.SymbolVisitor<TResult>.VisitNamespace(Microsoft.CodeAnalysisP.INamespaceSymbol symbol) -> TResult
virtual Microsoft.CodeAnalysisP.SymbolVisitor<TResult>.VisitParameter(Microsoft.CodeAnalysisP.IParameterSymbol symbol) -> TResult
virtual Microsoft.CodeAnalysisP.SymbolVisitor<TResult>.VisitPointerType(Microsoft.CodeAnalysisP.IPointerTypeSymbol symbol) -> TResult
virtual Microsoft.CodeAnalysisP.SymbolVisitor<TResult>.VisitProperty(Microsoft.CodeAnalysisP.IPropertySymbol symbol) -> TResult
virtual Microsoft.CodeAnalysisP.SymbolVisitor<TResult>.VisitRangeVariable(Microsoft.CodeAnalysisP.IRangeVariableSymbol symbol) -> TResult
virtual Microsoft.CodeAnalysisP.SymbolVisitor<TResult>.VisitTypeParameter(Microsoft.CodeAnalysisP.ITypeParameterSymbol symbol) -> TResult
virtual Microsoft.CodeAnalysisP.SyntaxNode.ChildThatContainsPosition(int position) -> Microsoft.CodeAnalysisP.SyntaxNodeOrToken
virtual Microsoft.CodeAnalysisP.SyntaxNode.ParentTrivia.get -> Microsoft.CodeAnalysisP.SyntaxTrivia
virtual Microsoft.CodeAnalysisP.SyntaxNode.SerializeTo(System.IO.Stream stream, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> void
virtual Microsoft.CodeAnalysisP.SyntaxNode.ToFullString() -> string
virtual Microsoft.CodeAnalysisP.SyntaxNode.WriteTo(System.IO.TextWriter writer) -> void
virtual Microsoft.CodeAnalysisP.SyntaxReference.GetSyntaxAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.CodeAnalysisP.SyntaxNode>
virtual Microsoft.CodeAnalysisP.SyntaxTree.GetLineVisibility(int position, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysisP.LineVisibility
virtual Microsoft.CodeAnalysisP.SyntaxTree.GetTextAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.CodeAnalysisP.Text.SourceText>
virtual Microsoft.CodeAnalysisP.SyntaxWalker.Visit(Microsoft.CodeAnalysisP.SyntaxNode node) -> void
virtual Microsoft.CodeAnalysisP.SyntaxWalker.VisitToken(Microsoft.CodeAnalysisP.SyntaxToken token) -> void
virtual Microsoft.CodeAnalysisP.SyntaxWalker.VisitTrivia(Microsoft.CodeAnalysisP.SyntaxTrivia trivia) -> void
virtual Microsoft.CodeAnalysisP.Text.SourceText.Container.get -> Microsoft.CodeAnalysisP.Text.SourceTextContainer
virtual Microsoft.CodeAnalysisP.Text.SourceText.ContentEqualsImpl(Microsoft.CodeAnalysisP.Text.SourceText other) -> bool
virtual Microsoft.CodeAnalysisP.Text.SourceText.GetChangeRanges(Microsoft.CodeAnalysisP.Text.SourceText oldText) -> System.Collections.Generic.IReadOnlyList<Microsoft.CodeAnalysisP.Text.TextChangeRange>
virtual Microsoft.CodeAnalysisP.Text.SourceText.GetLinesCore() -> Microsoft.CodeAnalysisP.Text.TextLineCollection
virtual Microsoft.CodeAnalysisP.Text.SourceText.GetSubText(Microsoft.CodeAnalysisP.Text.TextSpan span) -> Microsoft.CodeAnalysisP.Text.SourceText
virtual Microsoft.CodeAnalysisP.Text.SourceText.GetTextChanges(Microsoft.CodeAnalysisP.Text.SourceText oldText) -> System.Collections.Generic.IReadOnlyList<Microsoft.CodeAnalysisP.Text.TextChange>
virtual Microsoft.CodeAnalysisP.Text.SourceText.ToString(Microsoft.CodeAnalysisP.Text.TextSpan span) -> string
virtual Microsoft.CodeAnalysisP.Text.SourceText.WithChanges(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysisP.Text.TextChange> changes) -> Microsoft.CodeAnalysisP.Text.SourceText
virtual Microsoft.CodeAnalysisP.Text.SourceText.Write(System.IO.TextWriter writer, Microsoft.CodeAnalysisP.Text.TextSpan span, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> void
virtual Microsoft.CodeAnalysisP.Text.TextLineCollection.GetLineFromPosition(int position) -> Microsoft.CodeAnalysisP.Text.TextLine
virtual Microsoft.CodeAnalysisP.Text.TextLineCollection.GetLinePosition(int position) -> Microsoft.CodeAnalysisP.Text.LinePosition
virtual Microsoft.CodeAnalysisP.XmlFileResolver.FileExists(string resolvedPath) -> bool
